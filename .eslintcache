[{"D:\\react\\new-runex\\src\\index.js":"1","D:\\react\\new-runex\\src\\reportWebVitals.js":"2","D:\\react\\new-runex\\src\\App.js":"3","D:\\react\\new-runex\\src\\components\\RaceRegister.js":"4","D:\\react\\new-runex\\src\\services\\index.js":"5","D:\\react\\new-runex\\src\\services\\user.service.js":"6","D:\\react\\new-runex\\src\\services\\regevent.service.js":"7","D:\\react\\new-runex\\src\\services\\activity.service.js":"8","D:\\react\\new-runex\\src\\services\\event.service.js":"9","D:\\react\\new-runex\\src\\store\\index.js":"10","D:\\react\\new-runex\\src\\actions\\index.js":"11","D:\\react\\new-runex\\src\\utils\\constants.js":"12","D:\\react\\new-runex\\src\\utils\\utils.js":"13","D:\\react\\new-runex\\src\\utils\\auth-header.js":"14","D:\\react\\new-runex\\src\\store\\history.js":"15","D:\\react\\new-runex\\src\\store\\store.js":"16","D:\\react\\new-runex\\src\\actions\\user.actions.js":"17","D:\\react\\new-runex\\src\\actions\\event.actions.js":"18","D:\\react\\new-runex\\src\\actions\\alert.actions.js":"19","D:\\react\\new-runex\\src\\reducers\\index.js":"20","D:\\react\\new-runex\\src\\reducers\\registration.reducer.js":"21","D:\\react\\new-runex\\src\\reducers\\alert.reducer.js":"22","D:\\react\\new-runex\\src\\reducers\\eventer.reducer.js":"23","D:\\react\\new-runex\\src\\reducers\\authentication.reducer.js":"24","D:\\react\\new-runex\\src\\reducers\\users.reducer.js":"25","D:\\react\\new-runex\\src\\components\\visual\\RaceProfile.js":"26","D:\\react\\new-runex\\src\\components\\race\\Register.js":"27","D:\\react\\new-runex\\src\\components\\race\\Content.js":"28","D:\\react\\new-runex\\src\\components\\race\\Race.js":"29","D:\\react\\new-runex\\src\\components\\race\\Address.js":"30","D:\\react\\new-runex\\src\\components\\race\\Confirm.js":"31","D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\index.js":"32","D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\CheckoutInternetBanking.js":"33","D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\CheckoutCreditCard.js":"34","D:\\react\\new-runex\\src\\components\\race\\ConfirmPayment.js":"35","D:\\react\\new-runex\\src\\serviceWorker.js":"36","D:\\react\\new-runex\\src\\components\\race\\index.js":"37","D:\\react\\new-runex\\src\\components\\visual\\index.js":"38","D:\\react\\new-runex\\src\\components\\visual\\ConditionsModal.js":"39","D:\\react\\new-runex\\src\\components\\visual\\RaceSummary.js":"40"},{"size":942,"mtime":1609739486081,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1608899809427,"results":"43","hashOfConfig":"42"},{"size":860,"mtime":1609739486072,"results":"44","hashOfConfig":"42"},{"size":10882,"mtime":1609739486075,"results":"45","hashOfConfig":"42"},{"size":162,"mtime":1609738911194,"results":"46","hashOfConfig":"42"},{"size":7322,"mtime":1609738911222,"results":"47","hashOfConfig":"42"},{"size":6262,"mtime":1609738911196,"results":"48","hashOfConfig":"42"},{"size":1497,"mtime":1609738911162,"results":"49","hashOfConfig":"42"},{"size":10276,"mtime":1609738911193,"results":"50","hashOfConfig":"42"},{"size":52,"mtime":1609738911226,"results":"51","hashOfConfig":"42"},{"size":98,"mtime":1609738909690,"results":"52","hashOfConfig":"42"},{"size":2949,"mtime":1609738911303,"results":"53","hashOfConfig":"42"},{"size":4013,"mtime":1609738911321,"results":"54","hashOfConfig":"42"},{"size":762,"mtime":1609738911258,"results":"55","hashOfConfig":"42"},{"size":97,"mtime":1609738911225,"results":"56","hashOfConfig":"42"},{"size":352,"mtime":1609738911226,"results":"57","hashOfConfig":"42"},{"size":7108,"mtime":1609738909700,"results":"58","hashOfConfig":"42"},{"size":5094,"mtime":1609738909688,"results":"59","hashOfConfig":"42"},{"size":434,"mtime":1609738909627,"results":"60","hashOfConfig":"42"},{"size":426,"mtime":1609738911159,"results":"61","hashOfConfig":"42"},{"size":370,"mtime":1609738911160,"results":"62","hashOfConfig":"42"},{"size":606,"mtime":1609738911141,"results":"63","hashOfConfig":"42"},{"size":962,"mtime":1609738911158,"results":"64","hashOfConfig":"42"},{"size":2071,"mtime":1609738911142,"results":"65","hashOfConfig":"42"},{"size":1466,"mtime":1609738911160,"results":"66","hashOfConfig":"42"},{"size":54964,"mtime":1609739486077,"results":"67","hashOfConfig":"42"},{"size":7263,"mtime":1609738910048,"results":"68","hashOfConfig":"42"},{"size":2905,"mtime":1609738909989,"results":"69","hashOfConfig":"42"},{"size":27397,"mtime":1609738909999,"results":"70","hashOfConfig":"42"},{"size":41631,"mtime":1609738909737,"results":"71","hashOfConfig":"42"},{"size":49435,"mtime":1609738909761,"results":"72","hashOfConfig":"42"},{"size":111,"mtime":1609738909703,"results":"73","hashOfConfig":"42"},{"size":2278,"mtime":1609738909703,"results":"74","hashOfConfig":"42"},{"size":2033,"mtime":1609738909702,"results":"75","hashOfConfig":"42"},{"size":5297,"mtime":1609738909762,"results":"76","hashOfConfig":"42"},{"size":5058,"mtime":1609738911161,"results":"77","hashOfConfig":"42"},{"size":33,"mtime":1598255474513,"results":"78","hashOfConfig":"42"},{"size":33,"mtime":1598255474513,"results":"79","hashOfConfig":"42"},{"size":2817,"mtime":1609738910050,"results":"80","hashOfConfig":"42"},{"size":14445,"mtime":1609738910224,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y6q95s",{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"90"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\react\\new-runex\\src\\index.js",[],"D:\\react\\new-runex\\src\\reportWebVitals.js",[],["167","168"],"D:\\react\\new-runex\\src\\App.js",["169"],"import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport React, { Suspense, lazy } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { history } from './store';\r\n\r\nconst RaceRegister = lazy(() => import('./components/RaceRegister'));\r\nconst RaceSummary = lazy(() => import('./components/visual/RaceSummary'));\r\n// import RaceSummary from './component/runex/race/RaceSummary'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <Router>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <Switch>\r\n            <Route exact path=\"/raceregister/:slug\" component={RaceRegister} />\r\n            <Route exact path=\"/racesummary\" component={RaceSummary} />\r\n            {/* <Route path=\"/about\" component={About} /> */}\r\n          </Switch>\r\n        </Suspense>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["170","171"],"D:\\react\\new-runex\\src\\components\\RaceRegister.js",["172","173","174","175"],"import React, { Component } from 'react'\r\nimport { eventService } from '../services'\r\n\r\n\r\nexport default class RaceRegister extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            event: {},\r\n            tickets: [],\r\n            products: [],\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.getEvent()\r\n    }\r\n    componentWillReceiveProps (nextProps) {\r\n        console.log(nextProps)\r\n        if (nextProps.event) {\r\n            const { event } = this.props\r\n            if (event !== undefined && event !== null) {\r\n                if (event.event !== null && event.event !== undefined) {\r\n                    if (event.event.category.id === '5d7dbc800ea2d6053ea1e226') {\r\n                        this.setState({ isVR: true })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getEvent() {\r\n        const { slug } = this.props.match.params\r\n        // const { eventID } = this.props.route.match.params\r\n\r\n        eventService.getEventInfoBySlug(slug).then(res => {\r\n            \r\n            if (res.data.code === 200) {\r\n                const { event } = res.data.data\r\n                    let ticketArray = []\r\n                    let productsArray = []\r\n                    let productArray = []\r\n                    // var result = Object.keys(event.ticket.products).map((key) => [Number(key), event.ticket.products[key]]);\r\n                    // console.log(result)\r\n                    // Set tickets\r\n                    event.ticket && event.ticket.length > 0 && event.ticket.map((ticket, index) => {\r\n                        const productTemps = ticket.products\r\n                        productArray.push(productTemps)\r\n                        const ticketTemp = {\r\n                            ...ticket,\r\n                            id: ticket.id,\r\n                            title: ticket.title,\r\n                            description: ticket.description,\r\n                            price: ticket.price,\r\n                            distance: ticket.distance,\r\n                            quantity: ticket.quantity,\r\n                            ticket_type: ticket.ticket_type,\r\n                            team: ticket.team,\r\n                            currency: \"THB\",\r\n                            prodect: productArray\r\n                        }\r\n                        // console.log(ticketArray.filter(ticket => ticket.products && ticket.products.find(bb => bb.name ==='')))\r\n                        \r\n                        ticket.products && JSON.stringify(ticket.products, function (key, product) {\r\n                            const typeInitial = []\r\n                            product.sizes && product.sizes.length > 0 && product.sizes.map((size) => {\r\n                                const sizeTemp = {\r\n                                    name: size.name,\r\n                                    remark: size.remark\r\n                                }\r\n                                typeInitial.push(sizeTemp)\r\n                            })\r\n                            \r\n                          \r\n                            const productTemps = {\r\n                                ...product,\r\n                                id: product.id,\r\n                                name: product.name,\r\n                                image: [{\r\n                                    path_url: product.image[0].path_url\r\n                                }],\r\n                                detail: product.detail,\r\n                                sizes: typeInitial,\r\n                                status: product.status,\r\n                                is_show: ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.name === product.name && bb.is_show === true)).length > 0,\r\n                                forAllTicket: ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.name === product.name)).length === ticketArray.length,\r\n                                ticketTitle: (ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.name === product.name)).length === ticketArray.length)?'':ticket.title\r\n                            }\r\n                            \r\n                            // name: '',\r\n                            // image: [{\r\n                            //     path_url: null\r\n                            // }],\r\n                            // detail: '',\r\n                            // sizes: [\r\n                            //     typeInitial\r\n                            // ],\r\n                            // unit: 0,\r\n                            // status: 'sold',\r\n                            // is_show: true,\r\n                            // forAllTicket: true,\r\n                            // reuse: true,\r\n                            // ticketID: 0\r\n                            productsArray.push(productTemps)\r\n                        })\r\n                        ticketArray.push(ticketTemp)\r\n                    })\r\n                    \r\n                    // Set products\r\n                    /*event.product && event.product.length > 0 && event.product.map((product) => {\r\n                        const typeTemp = []\r\n\r\n                        product.type && product.type.length > 0 && product.type.map((type) => {\r\n                            const typeInitial = {\r\n                                name: type.name,\r\n                                remark: type.remark,\r\n                                price: type.price\r\n                            }\r\n                            typeTemp.push(typeInitial)\r\n                        })\r\n\r\n                        const productTemp = {\r\n                            ...product,\r\n                            id: product.id,\r\n                            name: product.name,\r\n                            image: [{\r\n                                path_url: product.image[0].path_url\r\n                            }],\r\n                            detail: product.detail,\r\n                            types: typeTemp,\r\n                            unit: product.unit,\r\n                            status: product.status,\r\n                            show: ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.id === product.id && bb.show === true)).length > 0,\r\n                            forAllTicket: ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.id === product.id)).length === ticketArray.length,\r\n                            ticketID: ''\r\n                        }\r\n\r\n                        if (ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.id === product.id)).length === ticketArray.length) {\r\n                            productTemp.ticketID = ''\r\n                        } else {\r\n                            ticketArray.map((ticket, indexA) => {\r\n                                ticket.product && ticket.product.some(bb => {\r\n                                    if (bb.id === product.id) {\r\n                                        return (productTemp.ticketID = indexA)\r\n                                    }\r\n                                })\r\n                            })\r\n                        }\r\n\r\n                        productArray.push(productTemp)\r\n                    })*/\r\n\r\n                    //ticketArray.map((tick) => tick.product = [])\r\n                    let dataFromServer = {\r\n                        name: event.name,\r\n                        category: event.category,\r\n\r\n                        cover: event.cover,\r\n                        cover_thumb: event.cover_thumb[0].image,\r\n\r\n                        location: event.location,\r\n                        receive_location: event.receive_location,\r\n                        is_post: event.is_post,\r\n                        // post_end_date: moment(moment(event.post_end_date).utc().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate(),\r\n                \r\n                        // post_end_date: event.post_end_date ? moment(utils.convertDateApiToString(event.post_end_date), 'DD-MM-YYYY').toDate() : moment().toDate(),\r\n                        // is_free: event.is_free,\r\n                        // inapp: event.inapp,\r\n\r\n                        // startReg: moment(moment(event.start_reg).utc().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate(),\r\n                        // startTimeReg: moment(moment(event.start_reg).utc().format('HH:mm:ss'), 'HH:mm:ss').toDate(),\r\n                        // endReg: moment(moment(event.end_reg).utc().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate(),\r\n                        // endTimeReg: moment(moment(event.end_reg).utc().format('HH:mm:ss'), 'HH:mm:ss').toDate(),\r\n\r\n                        // startEvent: moment(moment(event.start_event).utc().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate(),\r\n                        // startTimeEvent: moment(moment(event.start_event).utc().format('HH:mm:ss'), 'HH:mm:ss').toDate(),\r\n                        // endEvent: moment(moment(event.end_event).utc().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate(),\r\n                        // endTimeEvent: moment(moment(event.end_event).utc().format('HH:mm:ss'), 'HH:mm:ss').toDate(),\r\n\r\n                        // description: EditorState.createWithContent(convertFromRaw(JSON.parse(event.body))),\r\n\r\n                        tickets: ticketArray,\r\n\r\n                        products: productsArray,\r\n                        partner: event.partner\r\n                    }\r\n                    \r\n                    // initialFormData = dataFromServer\r\n                this.setState({\r\n                    event: res.data.data.event\r\n                })\r\n                this.setState({\r\n                    tickets: dataFromServer.tickets\r\n                })\r\n                this.setState({\r\n                    products: dataFromServer.products\r\n                })\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        const { event, tickets, products } = this.state \r\n        \r\n        // if(event.event.category.name === 'Run'){\r\n        //     history.push('/raceregister/'+eventID)\r\n        // }else{\r\n        //     history.push('/register/'+eventID)\r\n        // }\r\n        return (\r\n            <Register event={event} tickets={tickets} products={products} />\r\n        )\r\n    }\r\n}\r\nconst Race = React.lazy(() => import('./race/Register'));\r\nconst Visual = React.lazy(() => import('./visual/RaceProfile'));\r\nfunction Register(props) {\r\n    const {event, tickets, products} = props\r\n    // const {category} = (props.event)?props.event.category:null;\r\n    // console.log(category)\r\n    // if (event.category!==\"Virtual Run\") {\r\n    //     return <Race event={props.event} tickets={props.tickets} products={props.products} />;\r\n    // }\r\n    return <Visual event={props.event} tickets={props.tickets} products={props.products}/>;\r\n}","D:\\react\\new-runex\\src\\services\\index.js",[],"D:\\react\\new-runex\\src\\services\\user.service.js",["176","177","178"],"D:\\react\\new-runex\\src\\services\\regevent.service.js",["179"],"D:\\react\\new-runex\\src\\services\\activity.service.js",[],"D:\\react\\new-runex\\src\\services\\event.service.js",[],"D:\\react\\new-runex\\src\\store\\index.js",[],"D:\\react\\new-runex\\src\\actions\\index.js",[],"D:\\react\\new-runex\\src\\utils\\constants.js",[],"D:\\react\\new-runex\\src\\utils\\utils.js",[],"D:\\react\\new-runex\\src\\utils\\auth-header.js",[],"D:\\react\\new-runex\\src\\store\\history.js",[],"D:\\react\\new-runex\\src\\store\\store.js",["180"],"D:\\react\\new-runex\\src\\actions\\user.actions.js",[],"D:\\react\\new-runex\\src\\actions\\event.actions.js",["181","182","183"],"D:\\react\\new-runex\\src\\actions\\alert.actions.js",[],"D:\\react\\new-runex\\src\\reducers\\index.js",[],"D:\\react\\new-runex\\src\\reducers\\registration.reducer.js",[],"D:\\react\\new-runex\\src\\reducers\\alert.reducer.js",[],"D:\\react\\new-runex\\src\\reducers\\eventer.reducer.js",[],"D:\\react\\new-runex\\src\\reducers\\authentication.reducer.js",[],"D:\\react\\new-runex\\src\\reducers\\users.reducer.js",[],"D:\\react\\new-runex\\src\\components\\visual\\RaceProfile.js",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200"],"import React, { Component } from 'react'\r\nimport { Row, Col, Media, Card, Button, Form, Container } from 'react-bootstrap'\r\nimport iconmedal from '../../images/icon-medal.svg'\r\nimport iconshirt from '../../images/icon-shirt.svg'\r\nimport iconshirtactive from '../../images/icon-tshirt-active.svg'\r\nimport ThaiAddress from \"react-thai-address\";\r\n// import iconrunning from '../../images/icon-running.svg'\r\nimport iconrunningwhite from '../../images/icon-running-white.svg'\r\n//import moment from 'moment'\r\nimport { utils } from '../../utils/utils'\r\nimport { IMAGE_URL } from '../../utils/constants'\r\nimport { history } from '../../store'\r\nimport { eventService, userService } from '../../services'\r\n// import { CountryDropdown } from 'react-country-region-selector'\r\nimport Swal from 'sweetalert2'\r\nimport ReactDatePicker from 'react-datepicker'\r\n\r\nexport default class RaceProfile extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: {},\r\n            fullname: '',\r\n            citycen_id: '',\r\n            passport: '',\r\n            phone: '',\r\n            birthdate: '',\r\n            birthdateApi: '',\r\n            gender: '',\r\n            blood_type: '',\r\n            distant: 'Select distant',\r\n            cities: [],\r\n            tumbons: [],\r\n            address: undefined,\r\n            address_no_tmp: '',\r\n            address_no: '',\r\n            province: '',\r\n            district: '',\r\n            city: '',\r\n            postcode: '',\r\n            validated: false,\r\n            hasAddress: false,\r\n            isVR: true,\r\n            firstname_th: '',\r\n            lastname_th: '',\r\n            firstname: '',\r\n            lastname: '',\r\n            toggleEditAddress: false,\r\n            event: {},\r\n            select_ticket: 'ระบุระยะ, Distance',\r\n            select_distance: 'ระบุระยะ, Distance',\r\n            productSize: -1,\r\n            productOnTicketSize: -1,\r\n            products: [],\r\n            productTickets: [],\r\n            size: undefined,\r\n            priceShow: 0,\r\n            selectTicket: undefined,\r\n            reload: false,\r\n            ticket: {},\r\n            country: '',\r\n            emergency_phone: '',\r\n            emergency_contact: '',\r\n            citycen_type: '',\r\n            reciept_type: 'yourself',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.getEvent()\r\n        // console.log(this.props)\r\n        // this.setState({\r\n        //     products: this.props.products\r\n        // })\r\n        this.setState({\r\n            event: this.props.event\r\n        })\r\n        this.setState({\r\n            tickets: this.props.tickets\r\n        })\r\n        const { user } = this.state\r\n        if (user.address !== undefined && user.address !== null) {\r\n            if (user.address.length > 0) {\r\n                const addr = user.address[0]\r\n                this.setState({ hasAddress: true })\r\n                this.setState({ address_no: addr.address })\r\n                this.setState({ address_no_tmp: addr.address })\r\n                this.setState({ province: addr.province })\r\n                this.setState({ district: addr.district })\r\n                this.setState({ city: addr.city })\r\n                this.setState({ postcode: addr.zipcode })\r\n                var cities = []\r\n                const results = ThaiAddress.search({ province: user.address[0].province });\r\n                //console.log(results);\r\n                results.map(item => {\r\n                    if (!cities.includes(item.city)) {\r\n                        //console.log(item.city)\r\n                        cities.push(item.city)\r\n                    }\r\n                })\r\n\r\n                this.setState({ cities: cities }, () => {\r\n                    this.setState({ district: addr.district }, () => {\r\n                        var tumbons = [];\r\n                        const results = ThaiAddress.search({\r\n                            city: this.state.district,\r\n                            province: this.state.province\r\n                        });\r\n                        //console.log(results);\r\n                        results.map(item => {\r\n                            if (!tumbons.includes(item.tumbon)) {\r\n                                //console.log(item.city)\r\n                                tumbons.push(item.tumbon);\r\n                            }\r\n                        })\r\n                        this.setState({ tumbons: tumbons })\r\n                    })\r\n                })\r\n            }\r\n            this.setState({ fullname: user.fullname })\r\n            this.setState({ firstname: user.firstname })\r\n            this.setState({ lastname: user.lastname })\r\n            if (user.passport !== undefined) {\r\n                this.setState({ passport: user.passport })\r\n                if (user.passport !== '') {\r\n                    this.setState({ citycen_type: 'Passport' })\r\n                } else {\r\n                    this.setState({ citycen_type: 'CiticenID' })\r\n                }\r\n            }\r\n            if (user.citycen_id !== undefined) {\r\n                this.setState({ citycen_id: user.citycen_id })\r\n                if (user.citycen_id !== '') {\r\n                    this.setState({ citycen_type: 'CiticenID' })\r\n                }\r\n            }\r\n            if (user.nationality !== undefined && user.nationality !== '') {\r\n                this.setState({ country: user.nationality })\r\n            } else {\r\n                this.setState({ country: 'Thailand' })\r\n            }\r\n            this.setState({ gender: user.gender })\r\n            this.setState({ phone: user.phone })\r\n            this.setState({ birthdate: user.birthdate })\r\n            this.setState({ birthdateApi: user.birthdate })\r\n            this.setState({ blood_type: user.blood_type })\r\n            this.setState({ emergency_contact: user.emergency_contact })\r\n            this.setState({ emergency_phone: user.emergency_phone })\r\n        }\r\n        //this.getEvent()\r\n    }\r\n\r\n    // componentWillReceiveProps (nextProps) {\r\n    //     if (nextProps.event) {\r\n    //         const { event } = this.props\r\n    //         if (event !== undefined && event !== null) {\r\n    //             if (event.event !== null && event.event !== undefined) {\r\n    //                 if (event.event.category.id === '5d7dbc800ea2d6053ea1e226') {\r\n    //                     this.setState({ isVR: true })\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    getEvent() {\r\n        const { eventID } = this.props.match.params\r\n        // const { eventID } = this.props.route.match.params\r\n\r\n        eventService.getEventInfo(eventID).then(res => {\r\n            if (res.data.code === 200) {\r\n                this.setState({\r\n                    event: res.data.data.event\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    onSelectBirthdate = (e) => {\r\n        //console.log(e)\r\n        //`${this.state.toDateReg}T${this.state.toTimeReg}:00`,\r\n        this.setState({ birthdateApi: utils.convertDateToApi(e) })\r\n        this.setState({ birthdate: e })\r\n    }\r\n\r\n    onSelectGender = e => {\r\n        this.setState({ gender: e.target.value })\r\n    }\r\n\r\n    onSelectCitycen = e => {\r\n        this.setState({ citycen_type: e.target.value })\r\n    }\r\n\r\n    onChangeCitycenValue = e => {\r\n        const { citycen_type } = this.state\r\n        if (citycen_type === 'CiticenID') {\r\n            this.setState({ citycen_id: e.target.value })\r\n        } else {\r\n            this.setState({ passport: e.target.value })\r\n        }\r\n    }\r\n\r\n    onSelectBloodType = e => {\r\n        this.setState({ blood_type: e.target.value })\r\n    }\r\n\r\n    selectCountry(val) {\r\n        this.setState({ country: val });\r\n    }\r\n\r\n    selectRegion(val) {\r\n        this.setState({ region: val });\r\n    }\r\n\r\n    onSelectedprovince = e => {\r\n        this.setState({ province: e.target.value }, () => {\r\n            var cities = [];\r\n            const results = ThaiAddress.search({ province: this.state.province });\r\n            //console.log(results);\r\n            results.map(item => {\r\n                if (!cities.includes(item.city)) {\r\n                    //console.log(item.city)\r\n                    cities.push(item.city)\r\n                }\r\n            })\r\n\r\n            this.setState({ cities: cities });\r\n            this.setState({ tumbons: [] });\r\n            this.setState({ postcode: \"\" });\r\n        });\r\n    };\r\n\r\n    onSelectedDistrict = e => {\r\n        this.setState({ district: e.target.value }, () => {\r\n            var tumbons = [];\r\n            const results = ThaiAddress.search({\r\n                city: this.state.district,\r\n                province: this.state.province\r\n            });\r\n            //console.log(results);\r\n            results.map(item => {\r\n                if (!tumbons.includes(item.tumbon)) {\r\n                    //console.log(item.city)\r\n                    tumbons.push(item.tumbon);\r\n                }\r\n            });\r\n            this.setState({ tumbons: tumbons });\r\n            this.setState({ postcode: \"\" });\r\n            this.setState({ address: undefined });\r\n        });\r\n    };\r\n\r\n    onSelectedTumbon = e => {\r\n        //console.log(e.target.value);\r\n        const results = ThaiAddress.search({\r\n            tumbon: e.target.value,\r\n            city: this.state.district,\r\n            province: this.state.province\r\n        });\r\n        //console.log(results);\r\n        results.map(item => {\r\n            if (\r\n                item.tumbon === e.target.value &&\r\n                item.city === this.state.district &&\r\n                item.province === this.state.province\r\n            ) {\r\n                this.setState({ city: item.tumbon })\r\n                this.setState({ postcode: '' + item.zipcode });\r\n                this.setState({ address: item });\r\n                //console.log(item)\r\n            }\r\n        });\r\n\r\n        //this.setState({ tumbons: tumbons });\r\n    };\r\n\r\n    renderProvinces() {\r\n        ThaiAddress.search({ province: \"\" });\r\n        var arr = [];\r\n        const results = ThaiAddress.provinces;\r\n\r\n        results.map((item) => {\r\n            arr.push(\r\n                <option key={item} value={item}>\r\n                    {item}\r\n                </option>\r\n            );\r\n        });\r\n\r\n        return arr;\r\n    }\r\n\r\n    onChangeTicket = (e) => {\r\n        this.props.tickets.map((item, index) => {\r\n            if (item.id === e.target.value) {\r\n                console.log(e.target.value)\r\n                this.setState({ ticket: item })\r\n                //this.setState({select_ticket:e.target.value})\r\n                this.setState({ selectTicket: undefined })\r\n                this.setState({ productTickets: [] })\r\n                console.log(this.state.ticket)\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    onSelectedSize = (size, product, tick) => {\r\n        const { productTickets, reload } = this.state\r\n        var arr = productTickets\r\n        var currentIndex = this.checkTicketIndex(product)\r\n        if (currentIndex !== -1) {\r\n            arr.splice(currentIndex, 1)\r\n            const item = {\r\n                product: product,\r\n                type: size.name,\r\n                price: size.price,\r\n                remark: size.remark,\r\n                ticket: this.state.ticket\r\n            }\r\n            arr.push(item)\r\n\r\n        } else {\r\n            //products.splice(currentIndex, 1)\r\n            const item = {\r\n                product: product,\r\n                type: size.name,\r\n                price: size.price,\r\n                remark: size.remark,\r\n                ticket: this.state.ticket\r\n            }\r\n            arr.push(item)\r\n        }\r\n        this.setState({ productTickets: arr })\r\n        this.setState({ reload: !reload })\r\n\r\n    }\r\n\r\n    onSelectedProduct = (isDeselect, item, type) => {\r\n        const { products, reload } = this.state\r\n        var arr = products\r\n        var currentIndex = this.checkProductIndex(item)\r\n        if (isDeselect) {\r\n            if (currentIndex !== -1) {\r\n                arr.splice(currentIndex, 1)\r\n            }\r\n        } else {\r\n            if (currentIndex !== -1) {\r\n                arr.splice(currentIndex, 1)\r\n                const product = {\r\n                    id: item.id,\r\n                    type: type.name,\r\n                    price: type.price,\r\n                    product: item\r\n                }\r\n                arr.push(product)\r\n            } else {\r\n                //products.splice(currentIndex, 1)\r\n                const product = {\r\n                    id: item.id,\r\n                    type: type.name,\r\n                    price: type.price,\r\n                    product: item\r\n                }\r\n                arr.push(product)\r\n            }\r\n        }\r\n        this.setState({ products: arr })\r\n        this.setState({ reload: !reload })\r\n\r\n        //console.log(arr)\r\n    }\r\n\r\n    checkProductIndex = (item) => {\r\n        const { products } = this.state\r\n        var check = -1\r\n        products.map((element, index) => {\r\n            if (element.id === item.id) {\r\n                check = index\r\n            }\r\n        })\r\n        return check\r\n    }\r\n\r\n    checkProductAndSize = (item, type) => {\r\n        const { products } = this.state\r\n        var check = false\r\n        products.map((element) => {\r\n            if (element.id === item.id && element.type === type.name) {\r\n                check = true\r\n            }\r\n\r\n        })\r\n        return check\r\n    }\r\n\r\n    checkTicketIndex = (product, type) => {\r\n        const { productTickets } = this.state\r\n        var check = -1\r\n        productTickets.map((element, index) => {\r\n            if (element.product.id === product.id || element.product.reuse === product.reuse) {\r\n                check = index\r\n            }\r\n        })\r\n        return check\r\n        // if (selectTicket === undefined) {\r\n        //     return false\r\n        // }\r\n        // if (product.id === selectTicket.product.id && selectTicket.type === type.name) {\r\n        //     check = true\r\n        // }\r\n        // return check\r\n    }\r\n\r\n    checkProductTicket = (product, size) => {\r\n        const { productTickets } = this.state\r\n        var check = false\r\n        productTickets.map((element) => {\r\n            if (product.id === element.product.id && element.size === size.name) {\r\n                check = true\r\n            }\r\n\r\n        })\r\n        return check\r\n    }\r\n\r\n    showCitycen() {\r\n        const { citycen_type, citycen_id, passport } = this.state\r\n        if (citycen_type === 'CiticenID') {\r\n            return citycen_id\r\n        } else {\r\n            return passport\r\n        }\r\n    }\r\n\r\n    showPrice() {\r\n        const { products, event, ticket, reciept_type } = this.state\r\n\r\n        var total = 0\r\n        if (event.ticket !== undefined && event.ticket !== null) {\r\n            if (ticket !== undefined) {\r\n                if (ticket.price !== undefined) {\r\n                    total = ticket.price\r\n                    products.map((element) => (\r\n                        total += element.price\r\n                    ))\r\n                }\r\n            }\r\n            if (reciept_type === 'postman') {\r\n                total += 60\r\n            }\r\n        }\r\n        return total\r\n    }\r\n\r\n    isSold(event) {\r\n        var check = false\r\n        event.product.map(item => {\r\n            if (item.status === 'sold') {\r\n                check = true\r\n            }\r\n        })\r\n        return check\r\n    }\r\n\r\n    saveData = () => {\r\n        console.log(this)\r\n        var address = {\r\n            address: this.state.address_no,\r\n            province: this.state.province,\r\n            district: this.state.district,\r\n            city: this.state.city,\r\n            zipcode: this.state.postcode\r\n        }\r\n\r\n        var data = this.state.user\r\n        data.birthdate = utils.convertDateToApi(this.state.birthdateApi)\r\n        data.phone = this.state.phone\r\n        data.passport = this.state.passport\r\n        data.emergency_contact = this.state.emergency_contact\r\n        data.emergency_phone = this.state.emergency_phone\r\n        data.gender = this.state.gender\r\n        data.citycen_id = this.state.citycen_id\r\n        data.address = [address]\r\n        data.firstname = this.state.firstname\r\n        data.lastname = this.state.lastname\r\n        data.blood_type = this.state.blood_type\r\n        data.nationality = this.state.country\r\n        data.fullname = this.state.firstname + ' ' + this.state.lastname\r\n        // userService.updateUser(data).then(response => {\r\n        //     console.log(response)\r\n        //     if (response.code === 200) {\r\n        const { productTickets, ticket, event, products, reciept_type } = this.state\r\n        console.log(productTickets)\r\n        if (ticket.id === undefined || ticket.id === null) {\r\n            Swal.fire(\r\n                '',\r\n                'Please select distance.',\r\n                'warning'\r\n            )\r\n        } else if (ticket.product != null && productTickets.length === 0) {\r\n            Swal.fire(\r\n                '',\r\n                'Please select shirt size.',\r\n                'warning'\r\n            )\r\n        } else  {\r\n            var check = 0\r\n\r\n            if (products.length > 0) {\r\n                console.log(products)\r\n                products.map((item) => (\r\n                    item.show ? check += 1 : check += 0\r\n                ))\r\n                if (productTickets.length === check) {\r\n                    let ticket_options = {\r\n                        user_option: data,\r\n                        product: products,\r\n                        tickets: productTickets,\r\n                        total_price: this.showPrice(),\r\n                        reciept_type: reciept_type\r\n                    }\r\n                    history.push({\r\n                        pathname: '/racesummary',\r\n                        state: {\r\n                            ticket: productTickets,\r\n                            product: products,\r\n                            event: event,\r\n                            ticket_options: [ticket_options],\r\n                            index: 0\r\n                        }\r\n                    })\r\n\r\n                } else {\r\n                    Swal.fire(\r\n                        '',\r\n                        'Please select product on ticket.',\r\n                        'warning'\r\n                    )\r\n                }\r\n            } else if (ticket.price === 0) {\r\n                console.log(ticket)\r\n                var arr = productTickets\r\n                const item = {\r\n                    product: {},\r\n                    type: '',\r\n                    price: 0.00,\r\n                    ticket: ticket\r\n                }\r\n                arr.push(item)\r\n                let ticket_options = {\r\n                    user_option: data,\r\n                    product: products,\r\n                    tickets: arr,\r\n                    total_price: this.showPrice(),\r\n                    reciept_type: reciept_type\r\n                }\r\n                history.push({\r\n                    pathname: '/racesummary',\r\n                    state: {\r\n                        ticket: ticket,\r\n                        product: arr,\r\n                        event: event,\r\n                        ticket_options: [ticket_options],\r\n                        index: 0\r\n                    }\r\n                })\r\n                history.go()\r\n\r\n\r\n                // this.setState({ productTickets: arr }, () => {\r\n                    \r\n                // })\r\n            } else {\r\n                Swal.fire(\r\n                    '',\r\n                    'ไม่สามารถบันทึกข้อมูลได้',\r\n                    'warning'\r\n                )\r\n            }\r\n        }\r\n\r\n        console.log('not thing')\r\n        // } else {\r\n        //     Swal.fire(\r\n        //         '',\r\n        //         'ไม่สามารถบันทึกข้อมูลได้',\r\n        //         'warning'\r\n        //     )\r\n        // }\r\n        // }, error => {\r\n        //     console.log(error)\r\n        // })\r\n    }\r\n\r\n    onClickConfirm = () => {\r\n        this.saveData()\r\n    }\r\n\r\n    render() {\r\n\r\n        const { validated, birthdate, citycen_id, gender, phone, address_no, province, district, postcode, city } = this.state\r\n        const { event, productOnTicketSize, ticket, blood_type, country, emergency_contact, emergency_phone } = this.state\r\n        console.log(event)\r\n        const handleValidate = e => {\r\n            const form = e.currentTarget;\r\n            e.preventDefault();\r\n            if (form.checkValidity() === false) {\r\n                e.stopPropagation();\r\n            } else {\r\n                //\r\n                this.onClickConfirm()\r\n            }\r\n            this.setState({ validated: true });\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Container className=\"mt-5\" >\r\n                    <Card >\r\n                        <Card.Body>\r\n                            <Row>\r\n                                <Col md={4}>\r\n                                    <Card className=\"mb-5\">\r\n                                        <Card.Img variant=\"top\" src={event ? event.cover : 'dddd'} />\r\n                                        <Card.Body>\r\n                                            <h4 className=\"h4\">{event ? event.name : ''}</h4>\r\n                                            <p className=\"text-muted mb-4\" style={{ color: '#FA6400', display: ticket.price !== undefined ? \"block\" : 'none' }} >ราคาค่าสมัคร</p>\r\n                                            <h1 className=\"mb-0\" style={{ color: '#FA6400', display: ticket.price !== undefined ? \"block\" : 'none' }}>{this.showPrice() + ' ' + 'THB'} </h1>\r\n                                            <p className=\"text-muted mb-4\" style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>(including. postage fee)</p>\r\n                                            <Card.Title style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>Finisher’s Award</Card.Title>\r\n                                            <Media style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>\r\n                                                <img\r\n                                                    width={35}\r\n                                                    height={35}\r\n                                                    className=\"mr-1\"\r\n                                                    src={iconmedal}\r\n                                                    alt=\"runex\"\r\n                                                />\r\n                                                <Media.Body style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>\r\n                                                    <h6 className=\"mb-1 pt-1\">Finisher's Medal</h6>\r\n                                                </Media.Body>\r\n                                            </Media>\r\n                                        </Card.Body>\r\n                                        <Card.Footer className=\"bg-white mb-3\">\r\n                                            <h6>Hurry! Registration close in</h6>\r\n                                            <ul className=\"list-group list-group-horizontal-md text-center\">\r\n                                                <li className=\"list-group-item px-3 border-0\">\r\n                                                    <h6>{event ? utils.convertDateApiToString(event.end_reg) : ''}<small className=\"ml-1 text-muted\"></small></h6>\r\n                                                </li>\r\n\r\n                                            </ul>\r\n                                        </Card.Footer>\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col md={8}>\r\n                                    <Card>\r\n                                        <Card.Body>\r\n                                            <Card.Title>กรอกข้อมูลผู้สมัคร</Card.Title>\r\n                                            <Form className=\"mb-5\" noValidate validated={validated} onSubmit={handleValidate}>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col} controlId=\"validationCustom01\">\r\n                                                        <Form.Label>ชื่อ,Name<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            required\r\n                                                            type=\"text\"\r\n                                                            value={this.state.firstname}\r\n                                                            placeholder=\"First name\"\r\n                                                            onChange={e => this.setState({ firstname: e.target.value })}\r\n                                                        />\r\n                                                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                    <Form.Group as={Col} controlId=\"validationCustom02\">\r\n                                                        <Form.Label>นามสกุล, Last name<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            required\r\n                                                            type=\"text\"\r\n                                                            value={this.state.lastname}\r\n                                                            placeholder=\"Last name\"\r\n                                                            onChange={e => this.setState({ lastname: e.target.value })}\r\n                                                        />\r\n                                                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Group controlId=\"formBasicBirthday\">\r\n                                                    <Form.Row>\r\n                                                        <Col xs={5}>\r\n                                                            <Form.Label>บัตรประชาชน, Passport<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control value={this.state.citycen_type} className=\"form-select\" as=\"select\" onChange={this.onSelectCitycen} required>\r\n                                                                <option value=\"CiticenID\">บัตรประชาชน</option>\r\n                                                                <option value=\"Passport\">Passport</option>\r\n                                                            </Form.Control>\r\n                                                        </Col>\r\n                                                        <Col xs={7}>\r\n                                                            <Form.Label>&nbsp;<span className=\"text-danger\"> </span></Form.Label>\r\n                                                            <Form.Control value={this.showCitycen()} minLength='13' type=\"number\" placeholder=\"ระบุหมายเลข, Specify number\" required onChange={this.onChangeCitycenValue} />\r\n                                                            <Form.Control.Feedback type=\"invalid\">บัตรประชาชน หรือ Passport ID is required!</Form.Control.Feedback>\r\n\r\n                                                        </Col>\r\n\r\n                                                    </Form.Row>\r\n                                                </Form.Group>\r\n                                                <Form.Group controlId=\"formBasicBirthday\">\r\n                                                    <Form.Row>\r\n                                                        <Col xs={7}>\r\n\r\n                                                            <Form.Label>เบอร์โทรศัพท์, Phone<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control minLength='10' type=\"number\" placeholder=\"เบอร์โทรศัพท์, Phone\" value={phone} required onChange={e => this.setState({ phone: e.target.value })} />\r\n                                                            <Form.Control.Feedback type=\"invalid\">เบอร์โทรศัพท์, Phone is required!</Form.Control.Feedback>\r\n\r\n                                                        </Col>\r\n                                                        <Col xs={5}>\r\n\r\n                                                            <Form.Label>เพศ, Gender<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control value={gender} as=\"select\" className=\"form-select\" onChange={this.onSelectGender} required>\r\n                                                                <option value=\"\">ระบุ, Select</option>\r\n                                                                <option value=\"Male\">Male</option>\r\n                                                                <option value=\"Female\">Female</option>\r\n                                                            </Form.Control>\r\n                                                            <Form.Control.Feedback type=\"invalid\">Gender is required!</Form.Control.Feedback>\r\n\r\n                                                        </Col>\r\n                                                    </Form.Row>\r\n                                                </Form.Group>\r\n                                                <Form.Group controlId=\"formBasicBirthday\">\r\n                                                    <Form.Row>\r\n                                                        <Col xs={7}>\r\n                                                            <Form.Label>วัน เดือน ปีเกิด, Birthday <span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Row>\r\n                                                                <ReactDatePicker\r\n                                                                    // selected={utils.convertDateApiToString(birthdate)}\r\n                                                                    value={utils.convertDateApiToString(birthdate)}\r\n                                                                    onChange={this.onSelectBirthdate}\r\n                                                                    peekNextMonth\r\n                                                                    showMonthDropdown\r\n                                                                    showYearDropdown\r\n                                                                    maxDate={new Date()}\r\n                                                                    className=\"form-control\"\r\n                                                                    dropdownMode=\"select\"\r\n                                                                    placeholderText='วันที่, DD เดือน, MM ปี, YYYY'\r\n                                                                    required\r\n                                                                />\r\n                                                                {/* <Form.Control value={utils.convertDateApiToString(birthdate)} type=\"date\" placeholder=\"วันที่, DD เดือน, MM ปี, YYYY\" max={moment().format(\"YYYY-MM-DD\")} required onChange={this.onSelectBirthdate} /> */}\r\n                                                                <Form.Control.Feedback type=\"invalid\">วัน เดือน ปีเกิด, Birthday  is required!</Form.Control.Feedback>\r\n                                                            </Form.Row>\r\n                                                        </Col>\r\n                                                        <Col xs={5}>\r\n                                                            <Form.Label>กรุ๊ปเลือด, Blood type<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control value={blood_type} as=\"select\" className=\"form-select\" onChange={this.onSelectBloodType} required>\r\n                                                                <option value=\"\">ระบุ, Select</option>\r\n                                                                <option value=\"A\">A</option>\r\n                                                                <option value=\"B\">B</option>\r\n                                                                <option value=\"AB\">AB</option>\r\n                                                                <option value=\"O\">O</option>\r\n                                                            </Form.Control>\r\n                                                            <Form.Control.Feedback type=\"invalid\">Gender is required!</Form.Control.Feedback>\r\n                                                        </Col>\r\n                                                    </Form.Row>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group controlId=\"formGridAddress\">\r\n                                                    <Form.Label>ที่อยู่, Address<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <Form.Control as=\"textarea\" rows=\"2\" placeholder=\"\" value={address_no} required onChange={e => this.setState({ address_no: e.target.value })} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">ที่อยู่, Address is required!</Form.Control.Feedback>\r\n                                                </Form.Group>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col} controlId=\"formGridCity\">\r\n                                                        <Form.Label>จังหวัด, Province<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            className=\"form-select\"\r\n                                                            onChange={this.onSelectedprovince}\r\n                                                            required\r\n                                                            value={province}\r\n                                                        >\r\n                                                            <option value=\"\">Select จังหวัด, Province</option>\r\n                                                            {this.renderProvinces()}\r\n                                                        </Form.Control>\r\n\r\n                                                        <Form.Control.Feedback type=\"invalid\">จังหวัด, Province is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col} controlId=\"formGridState\">\r\n                                                        <Form.Label>อำเภอ, District<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            className=\"form-select\"\r\n                                                            onChange={this.onSelectedDistrict}\r\n                                                            required\r\n                                                            value={district}\r\n                                                        >\r\n                                                            <option value=\"\">Select อำเภอ, District</option>\r\n                                                            {this.state.cities.map((item) => (\r\n                                                                <option key={item} value={item}>\r\n                                                                    {item}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </Form.Control>\r\n                                                        <Form.Control.Feedback type=\"invalid\">อำเภอ, District is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col} controlId=\"formGridTumbon\">\r\n                                                        <Form.Label>ตำบล, Sub District<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            className=\"form-select\"\r\n                                                            onChange={this.onSelectedTumbon}\r\n                                                            required\r\n                                                            value={city}\r\n                                                        >\r\n                                                            <option value=\"\">Select ตำบล, Sub District</option>\r\n                                                            {this.state.tumbons.map((item) => (\r\n                                                                <option key={item} value={item}>\r\n                                                                    {item}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </Form.Control>\r\n                                                        <Form.Control.Feedback type=\"invalid\">ตำบล, Sub District is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col} controlId=\"formGridZip\">\r\n                                                        <Form.Label>รหัสไปรษณีย์, Postcode<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control required defaultValue={postcode} />\r\n                                                        <Form.Control.Feedback type=\"invalid\">Postcode is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n                                                <hr color='#FA6400'></hr>\r\n\r\n                                                <Form.Group controlId=\"formTicket\">\r\n                                                    <Form.Label>ระบุระยะ, Distance<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <select className=\"custom-select form-select\" onChange={this.onChangeTicket.bind()} required>\r\n                                                        <option value='' key='99'>{this.state.select_ticket}</option>\r\n                                                        {this.props.tickets !== undefined ? this.props.tickets.map((item, index) => (\r\n                                                            <option value={item.id} key={index}>{item.distance !== 0 ? item.title + ' ' + item.distance + ' km.' : item.title}</option>\r\n                                                        )) : ''}\r\n                                                    </select>\r\n                                                </Form.Group>\r\n                                                <Form.Label hidden={ticket.product === undefined}>ขนาดไซต์เสื้อ, T-Shirt Size<span className=\"text-danger\">*</span></Form.Label>\r\n                                                {ticket.product ? event.product ? event.product.map((prod, index) => (\r\n                                                    ticket.product.map((item) => (\r\n                                                        (item.id === prod.id && item.show) ? (\r\n                                                            <Form.Group className=\"mb-5\" key={ticket.id + index}>\r\n                                                                <Form.Label>{prod.name}<span className=\"text-danger\"></span></Form.Label>\r\n                                                                {/* <Form.Label>{prod.detail}<span className=\"text-danger\"></span></Form.Label> */}\r\n                                                                <Row className=\"pirate\">\r\n                                                                    {prod.type ? prod.type.map((type, index) => (\r\n                                                                        <Col className=\"col-half-offset\" sm=\"2\" xs=\"2\" key={prod.id + index}>\r\n                                                                            <Card style={{ cursor: 'pointer', borderColor: this.checkProductTicket(prod, type) ? '#FA6400' : 'rgba(0,0,0,0.19)' }} className=\"text-center\" >\r\n                                                                                <Card.Body className=\"p-2\" style={{ color: this.checkProductTicket(prod, type) ? '#FA6400' : 'rgba(0,0,0,0.75)' }}\r\n                                                                                    onClick={this.onSelectedSize.bind(this, type, prod, ticket)}>\r\n\r\n                                                                                    <img\r\n                                                                                        width={25}\r\n                                                                                        height={20}\r\n                                                                                        className=\"mr-1\"\r\n                                                                                        src={this.checkProductTicket(prod, type) ? iconshirtactive : iconshirt}\r\n                                                                                        alt=\"runex\"\r\n                                                                                    />\r\n                                                                                    <h6 className=\"card-text\">{type.name}<br></br><small>{type.remark}</small></h6>\r\n                                                                                </Card.Body>\r\n                                                                            </Card>\r\n                                                                        </Col>\r\n                                                                    )) : ''}\r\n                                                                </Row>\r\n                                                            </Form.Group>\r\n                                                        ) : ''\r\n                                                    ))\r\n                                                )) : '' : ''}\r\n                                                <Form.Row>\r\n                                                    <Form.Label style={{ display: event.product ? (!this.isSold(event) ? \"none\" : \"block\") : 'none' }}>ซื้อสินค้าเพิ่มเติม</Form.Label>\r\n                                                    {event.product ? event.product.map((item, index) => (\r\n                                                        item.status === 'sold' ? (<Form.Group className=\"mb-5\" key={index}>\r\n\r\n                                                            <Form.Label>{item.name}<span className=\"text-danger\"></span></Form.Label>\r\n                                                            <Form.Label>{item.detail}<span className=\"text-danger\"></span></Form.Label>\r\n                                                            <Row>\r\n                                                                <Col>\r\n                                                                    <img\r\n                                                                        width={64}\r\n                                                                        height={64}\r\n                                                                        className=\"mr-3\"\r\n                                                                        style={{ marginBottom: 5 }}\r\n                                                                        src={item.image ? IMAGE_URL + item.image[0].path_url : ''}\r\n                                                                        alt=\"\"\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                            <Row className=\"size\">\r\n                                                                {item ? item.type.map((type, index) => (\r\n                                                                    <Col className=\"col-half-offset\" sm=\"2\" md=\"2\" key={item.id + index}>\r\n                                                                        <Card style={{ cursor: 'pointer', borderColor: this.checkProductAndSize(item, type) ? '#FA6400' : 'rgba(0,0,0,0.19)' }}\r\n                                                                            className=\"text-center\"\r\n                                                                        >\r\n                                                                            <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)') }}\r\n                                                                                onClick={this.onSelectedProduct.bind(this, false, item, type)}>\r\n\r\n                                                                                <h6 className=\"card-text\">{type.name}<br></br><small>{type.remark}</small></h6>\r\n                                                                            </Card.Body>\r\n                                                                        </Card>\r\n                                                                    </Col>\r\n                                                                )) : ''}\r\n                                                            </Row>\r\n                                                            <Row className=\"size\">\r\n                                                                <Col className=\"mt-2\" sm=\"2\" xs=\"4\" key={item.id + '99'}>\r\n                                                                    <Card style={{ cursor: 'pointer', borderColor: (this.checkProductIndex(item) === -1) ? '#FA6400' : 'rgba(0,0,0,0.19)', padding: 1 }}\r\n                                                                        className=\"text-center\" >\r\n                                                                        <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)'), padding: 1 }}\r\n                                                                            onClick={this.onSelectedProduct.bind(this, true, item, null)}>\r\n\r\n                                                                            <h6 className=\"card-text\">ไม่ได้เลือก<br></br><small></small></h6>\r\n                                                                        </Card.Body>\r\n                                                                    </Card>\r\n                                                                </Col>\r\n                                                            </Row>\r\n\r\n                                                        </Form.Group>) : ''\r\n                                                    )) : ''}\r\n                                                </Form.Row>\r\n\r\n                                                <fieldset>\r\n                                                    <Form.Group as={Row}>\r\n\r\n                                                        <Col sm={10}>\r\n                                                            <Form.Label>รูปแบบการจัดส่ง , Shipping<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Check\r\n                                                                type=\"radio\"\r\n                                                                label={'รับเสื้อที่หน้างาน ' + event.receive_location}\r\n                                                                name=\"shippingRadios\"\r\n                                                                id=\"RecieptMyself\"\r\n                                                                defaultChecked={true}\r\n                                                                onClick={() => this.setState({ reciept_type: 'yourself' })}\r\n                                                            />\r\n                                                            <Form.Check\r\n                                                                type=\"radio\"\r\n                                                                label='รับเสื้อทางไปรษณีย์ (ค่าจัดส่ง 60  บาท)'\r\n                                                                name=\"shippingRadios\"\r\n                                                                id=\"RecieptPost\"\r\n                                                                onClick={() => this.setState({ reciept_type: 'postman' })}\r\n                                                                style={{ display: event ? (!event.is_post || utils.isAfterDate(event.post_end_date) ? \"none\" : \"block\") : 'none' }}\r\n                                                            />\r\n                                                        </Col>\r\n                                                    </Form.Group>\r\n                                                </fieldset>\r\n                                                <hr color='#FA6400'></hr>\r\n\r\n                                                <Form.Group controlId=\"formEmergencyContact\">\r\n                                                    <Form.Label>ชื่อผู้ติดต่อฉุกเฉิน, Emergency contact list<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <Form.Control type=\"text\" placeholder=\"ชื่อผู้ติดต่อฉุกเฉิน, Emergency contact\" value={emergency_contact} required onChange={e => this.setState({ emergency_contact: e.target.value })} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">ชื่อผู้ติดต่อฉุกเฉิน, Emergency contact is required!</Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group controlId=\"formEmergencyPhone\">\r\n                                                    <Form.Label>เบอร์โทรผู้ติดต่อฉุกเฉิน, Emergency contact number<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <Form.Control type=\"text\" placeholder=\"เบอร์โทรผู้ติดต่อฉุกเฉย, Emergency contact number\" value={emergency_phone} required onChange={e => this.setState({ emergency_phone: e.target.value })} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">เบอร์โทรผู้ติดต่อฉุกเฉิน, Emergency contact number is required!</Form.Control.Feedback>\r\n                                                </Form.Group>\r\n                                                <Row className=\"justify-content-md-center\">\r\n                                                    <Col md={\"auto\"} sm={\"auto\"}>\r\n                                                        <Button type=\"submit\" className=\"btn-custom rounded-pill px-4 ml-2\" >\r\n                                                            <img\r\n                                                                width={25}\r\n                                                                height={20}\r\n                                                                className=\"mr-1\"\r\n                                                                src={iconrunningwhite}\r\n                                                                alt=\"runex\"\r\n                                                            />ยืนยัน</Button>\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                                {/* <Button type='button' variant=\"outline-secondary\" className=\"float-right rounded-pill px-4\"\r\n                                    onClick={this.onClickBack.bind(this, event)}>Back</Button> */}\r\n                                            </Form>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\react\\new-runex\\src\\components\\race\\Register.js",["201","202","203"],"D:\\react\\new-runex\\src\\components\\race\\Content.js",["204","205","206","207","208"],"D:\\react\\new-runex\\src\\components\\race\\Race.js",["209","210","211","212","213","214","215","216"],"D:\\react\\new-runex\\src\\components\\race\\Address.js",["217","218","219","220","221","222","223","224","225","226"],"D:\\react\\new-runex\\src\\components\\race\\Confirm.js",["227"],"D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\index.js",[],"D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\CheckoutInternetBanking.js",[],"D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\CheckoutCreditCard.js",[],"D:\\react\\new-runex\\src\\components\\race\\ConfirmPayment.js",["228","229","230"],"D:\\react\\new-runex\\src\\serviceWorker.js",[],"D:\\react\\new-runex\\src\\components\\race\\index.js",[],"D:\\react\\new-runex\\src\\components\\visual\\index.js",[],"D:\\react\\new-runex\\src\\components\\visual\\ConditionsModal.js",[],"D:\\react\\new-runex\\src\\components\\visual\\RaceSummary.js",["231","232","233","234","235"],{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","severity":1,"message":"241","line":1,"column":8,"nodeType":"242","messageId":"243","endLine":1,"endColumn":12},{"ruleId":"236","replacedBy":"244"},{"ruleId":"238","replacedBy":"245"},{"ruleId":"246","severity":1,"message":"247","line":31,"column":97,"nodeType":"248","messageId":"249","endLine":31,"endColumn":99},{"ruleId":"246","severity":1,"message":"247","line":51,"column":99,"nodeType":"248","messageId":"249","endLine":51,"endColumn":101},{"ruleId":"240","severity":1,"message":"250","line":202,"column":19,"nodeType":"242","messageId":"243","endLine":202,"endColumn":26},{"ruleId":"240","severity":1,"message":"251","line":202,"column":28,"nodeType":"242","messageId":"243","endLine":202,"endColumn":36},{"ruleId":"240","severity":1,"message":"252","line":243,"column":10,"nodeType":"242","messageId":"243","endLine":243,"endColumn":17},{"ruleId":"240","severity":1,"message":"253","line":244,"column":9,"nodeType":"242","messageId":"243","endLine":244,"endColumn":23},{"ruleId":"240","severity":1,"message":"254","line":252,"column":10,"nodeType":"242","messageId":"243","endLine":252,"endColumn":24},{"ruleId":"240","severity":1,"message":"255","line":174,"column":11,"nodeType":"242","messageId":"243","endLine":174,"endColumn":18},{"ruleId":"240","severity":1,"message":"256","line":3,"column":10,"nodeType":"242","messageId":"243","endLine":3,"endColumn":22},{"ruleId":"240","severity":1,"message":"257","line":70,"column":10,"nodeType":"242","messageId":"243","endLine":70,"endColumn":24},{"ruleId":"240","severity":1,"message":"258","line":157,"column":12,"nodeType":"242","messageId":"243","endLine":157,"endColumn":19},{"ruleId":"240","severity":1,"message":"259","line":158,"column":12,"nodeType":"242","messageId":"243","endLine":158,"endColumn":19},{"ruleId":"240","severity":1,"message":"260","line":13,"column":24,"nodeType":"242","messageId":"243","endLine":13,"endColumn":35},{"ruleId":"240","severity":1,"message":"261","line":15,"column":8,"nodeType":"242","messageId":"243","endLine":15,"endColumn":12},{"ruleId":"246","severity":1,"message":"247","line":97,"column":34,"nodeType":"248","messageId":"249","endLine":97,"endColumn":36},{"ruleId":"246","severity":1,"message":"247","line":112,"column":42,"nodeType":"248","messageId":"249","endLine":112,"endColumn":44},{"ruleId":"246","severity":1,"message":"247","line":222,"column":30,"nodeType":"248","messageId":"249","endLine":222,"endColumn":32},{"ruleId":"246","severity":1,"message":"247","line":243,"column":30,"nodeType":"248","messageId":"249","endLine":243,"endColumn":32},{"ruleId":"246","severity":1,"message":"247","line":263,"column":26,"nodeType":"248","messageId":"249","endLine":263,"endColumn":28},{"ruleId":"246","severity":1,"message":"247","line":284,"column":28,"nodeType":"248","messageId":"249","endLine":284,"endColumn":30},{"ruleId":"246","severity":1,"message":"247","line":296,"column":46,"nodeType":"248","messageId":"249","endLine":296,"endColumn":48},{"ruleId":"246","severity":1,"message":"247","line":379,"column":39,"nodeType":"248","messageId":"249","endLine":379,"endColumn":41},{"ruleId":"246","severity":1,"message":"247","line":390,"column":32,"nodeType":"248","messageId":"249","endLine":390,"endColumn":34},{"ruleId":"246","severity":1,"message":"247","line":402,"column":45,"nodeType":"248","messageId":"249","endLine":402,"endColumn":47},{"ruleId":"246","severity":1,"message":"247","line":420,"column":38,"nodeType":"248","messageId":"249","endLine":420,"endColumn":40},{"ruleId":"246","severity":1,"message":"247","line":460,"column":32,"nodeType":"248","messageId":"249","endLine":460,"endColumn":34},{"ruleId":"240","severity":1,"message":"262","line":602,"column":39,"nodeType":"242","messageId":"243","endLine":602,"endColumn":49},{"ruleId":"240","severity":1,"message":"263","line":603,"column":65,"nodeType":"242","messageId":"243","endLine":603,"endColumn":72},{"ruleId":"264","severity":1,"message":"265","line":630,"column":175,"nodeType":"266","messageId":"267","endLine":630,"endColumn":176},{"ruleId":"268","severity":1,"message":"269","line":135,"column":5,"nodeType":"270","endLine":135,"endColumn":28},{"ruleId":"268","severity":1,"message":"269","line":136,"column":5,"nodeType":"270","endLine":136,"endColumn":28},{"ruleId":"240","severity":1,"message":"271","line":185,"column":13,"nodeType":"242","messageId":"243","endLine":185,"endColumn":21},{"ruleId":"240","severity":1,"message":"272","line":9,"column":10,"nodeType":"242","messageId":"243","endLine":9,"endColumn":17},{"ruleId":"273","severity":1,"message":"274","line":63,"column":198,"nodeType":"275","endLine":63,"endColumn":228},{"ruleId":"273","severity":1,"message":"274","line":63,"column":229,"nodeType":"275","endLine":63,"endColumn":246},{"ruleId":"240","severity":1,"message":"276","line":70,"column":10,"nodeType":"242","messageId":"243","endLine":70,"endColumn":18},{"ruleId":"240","severity":1,"message":"277","line":75,"column":9,"nodeType":"242","messageId":"243","endLine":75,"endColumn":23},{"ruleId":"240","severity":1,"message":"278","line":46,"column":17,"nodeType":"242","messageId":"243","endLine":46,"endColumn":22},{"ruleId":"246","severity":1,"message":"247","line":47,"column":34,"nodeType":"248","messageId":"249","endLine":47,"endColumn":36},{"ruleId":"246","severity":1,"message":"247","line":134,"column":39,"nodeType":"248","messageId":"249","endLine":134,"endColumn":41},{"ruleId":"246","severity":1,"message":"247","line":145,"column":32,"nodeType":"248","messageId":"249","endLine":145,"endColumn":34},{"ruleId":"246","severity":1,"message":"247","line":157,"column":45,"nodeType":"248","messageId":"249","endLine":157,"endColumn":47},{"ruleId":"246","severity":1,"message":"247","line":175,"column":38,"nodeType":"248","messageId":"249","endLine":175,"endColumn":40},{"ruleId":"246","severity":1,"message":"279","line":243,"column":47,"nodeType":"248","messageId":"280","endLine":243,"endColumn":49},{"ruleId":"240","severity":1,"message":"281","line":257,"column":41,"nodeType":"242","messageId":"243","endLine":257,"endColumn":47},{"ruleId":"240","severity":1,"message":"282","line":10,"column":10,"nodeType":"242","messageId":"243","endLine":10,"endColumn":19},{"ruleId":"240","severity":1,"message":"278","line":51,"column":17,"nodeType":"242","messageId":"243","endLine":51,"endColumn":22},{"ruleId":"246","severity":1,"message":"247","line":75,"column":42,"nodeType":"248","messageId":"249","endLine":75,"endColumn":44},{"ruleId":"246","severity":1,"message":"247","line":90,"column":50,"nodeType":"248","messageId":"249","endLine":90,"endColumn":52},{"ruleId":"246","severity":1,"message":"247","line":208,"column":30,"nodeType":"248","messageId":"249","endLine":208,"endColumn":32},{"ruleId":"246","severity":1,"message":"247","line":229,"column":30,"nodeType":"248","messageId":"249","endLine":229,"endColumn":32},{"ruleId":"246","severity":1,"message":"247","line":249,"column":26,"nodeType":"248","messageId":"249","endLine":249,"endColumn":28},{"ruleId":"246","severity":1,"message":"247","line":270,"column":28,"nodeType":"248","messageId":"249","endLine":270,"endColumn":30},{"ruleId":"246","severity":1,"message":"247","line":291,"column":34,"nodeType":"248","messageId":"249","endLine":291,"endColumn":36},{"ruleId":"246","severity":1,"message":"247","line":306,"column":42,"nodeType":"248","messageId":"249","endLine":306,"endColumn":44},{"ruleId":"283","severity":1,"message":"284","line":397,"column":36,"nodeType":"285","messageId":"286","endLine":397,"endColumn":37},{"ruleId":"287","severity":1,"message":"288","line":75,"column":29,"nodeType":"289","endLine":80,"endColumn":31},{"ruleId":"287","severity":1,"message":"288","line":82,"column":29,"nodeType":"289","endLine":87,"endColumn":31},{"ruleId":"287","severity":1,"message":"288","line":93,"column":79,"nodeType":"289","endLine":98,"endColumn":39},{"ruleId":"240","severity":1,"message":"290","line":4,"column":8,"nodeType":"242","messageId":"243","endLine":4,"endColumn":23},{"ruleId":"240","severity":1,"message":"282","line":6,"column":10,"nodeType":"242","messageId":"243","endLine":6,"endColumn":19},{"ruleId":"246","severity":1,"message":"247","line":27,"column":37,"nodeType":"248","messageId":"249","endLine":27,"endColumn":39},{"ruleId":"246","severity":1,"message":"247","line":152,"column":46,"nodeType":"248","messageId":"249","endLine":152,"endColumn":48},{"ruleId":"264","severity":1,"message":"265","line":232,"column":173,"nodeType":"266","messageId":"267","endLine":232,"endColumn":174},"no-native-reassign",["291"],"no-negated-in-lhs",["292"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["291"],["292"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'tickets' is assigned a value but never used.","'products' is assigned a value but never used.","'_delete' is defined but never used.","'requestOptions' is assigned a value but never used.","'handleResponse' is defined but never used.","'headers' is assigned a value but never used.","'createLogger' is defined but never used.","'updateRegEvent' is defined but never used.","'success' is defined but never used.","'failure' is defined but never used.","'userService' is defined but never used.","'Swal' is defined but never used.","'citycen_id' is assigned a value but never used.","'country' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'regEvent' is assigned a value but never used.","'connect' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'mapState' is defined but never used.","'actionCreators' is assigned a value but never used.","'event' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'ticket' is assigned a value but never used.","'IMAGE_URL' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'iconshirtactive' is defined but never used.","no-global-assign","no-unsafe-negation"]