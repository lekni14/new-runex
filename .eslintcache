[{"D:\\react\\new-runex\\src\\index.js":"1","D:\\react\\new-runex\\src\\App.js":"2","D:\\react\\new-runex\\src\\serviceWorker.js":"3","D:\\react\\new-runex\\src\\utils\\constants.js":"4","D:\\react\\new-runex\\src\\store\\index.js":"5","D:\\react\\new-runex\\src\\components\\RaceRegister.js":"6","D:\\react\\new-runex\\src\\components\\visual\\RaceSummary.js":"7","D:\\react\\new-runex\\src\\store\\history.js":"8","D:\\react\\new-runex\\src\\actions\\index.js":"9","D:\\react\\new-runex\\src\\store\\store.js":"10","D:\\react\\new-runex\\src\\components\\visual\\RaceProfile.js":"11","D:\\react\\new-runex\\src\\components\\race\\Register.js":"12","D:\\react\\new-runex\\src\\components\\visual\\ConditionsModal.js":"13","D:\\react\\new-runex\\src\\utils\\utils.js":"14","D:\\react\\new-runex\\src\\actions\\event.actions.js":"15","D:\\react\\new-runex\\src\\actions\\user.actions.js":"16","D:\\react\\new-runex\\src\\actions\\alert.actions.js":"17","D:\\react\\new-runex\\src\\services\\index.js":"18","D:\\react\\new-runex\\src\\components\\race\\Content.js":"19","D:\\react\\new-runex\\src\\reducers\\index.js":"20","D:\\react\\new-runex\\src\\services\\activity.service.js":"21","D:\\react\\new-runex\\src\\components\\race\\Confirm.js":"22","D:\\react\\new-runex\\src\\components\\race\\Race.js":"23","D:\\react\\new-runex\\src\\services\\regevent.service.js":"24","D:\\react\\new-runex\\src\\components\\race\\Address.js":"25","D:\\react\\new-runex\\src\\services\\event.service.js":"26","D:\\react\\new-runex\\src\\services\\user.service.js":"27","D:\\react\\new-runex\\src\\reducers\\eventer.reducer.js":"28","D:\\react\\new-runex\\src\\reducers\\alert.reducer.js":"29","D:\\react\\new-runex\\src\\reducers\\users.reducer.js":"30","D:\\react\\new-runex\\src\\components\\race\\ConfirmPayment.js":"31","D:\\react\\new-runex\\src\\utils\\auth-header.js":"32","D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\index.js":"33","D:\\react\\new-runex\\src\\reducers\\registration.reducer.js":"34","D:\\react\\new-runex\\src\\reducers\\authentication.reducer.js":"35","D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\CheckoutInternetBanking.js":"36","D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\CheckoutCreditCard.js":"37","D:\\react\\new-runex\\src\\components\\visual\\RaceEditProfile.js":"38","D:\\react\\new-runex\\src\\components\\visual\\index.js":"39","D:\\react\\new-runex\\src\\components\\visual\\AddOtherPerson.js":"40"},{"size":944,"mtime":1609743194915,"results":"41","hashOfConfig":"42"},{"size":10508,"mtime":1610342439816,"results":"43","hashOfConfig":"42"},{"size":5058,"mtime":1609738911161,"results":"44","hashOfConfig":"42"},{"size":2949,"mtime":1609738911303,"results":"45","hashOfConfig":"42"},{"size":52,"mtime":1609738911226,"results":"46","hashOfConfig":"42"},{"size":1892,"mtime":1609948204271,"results":"47","hashOfConfig":"42"},{"size":14825,"mtime":1610345697594,"results":"48","hashOfConfig":"42"},{"size":97,"mtime":1609738911225,"results":"49","hashOfConfig":"42"},{"size":98,"mtime":1609738909690,"results":"50","hashOfConfig":"42"},{"size":352,"mtime":1609738911226,"results":"51","hashOfConfig":"42"},{"size":60423,"mtime":1610345148510,"results":"52","hashOfConfig":"42"},{"size":7263,"mtime":1609738910048,"results":"53","hashOfConfig":"42"},{"size":2812,"mtime":1610338864658,"results":"54","hashOfConfig":"42"},{"size":4013,"mtime":1609738911321,"results":"55","hashOfConfig":"42"},{"size":5094,"mtime":1609738909688,"results":"56","hashOfConfig":"42"},{"size":7108,"mtime":1609738909700,"results":"57","hashOfConfig":"42"},{"size":434,"mtime":1609738909627,"results":"58","hashOfConfig":"42"},{"size":162,"mtime":1609738911194,"results":"59","hashOfConfig":"42"},{"size":2905,"mtime":1609738909989,"results":"60","hashOfConfig":"42"},{"size":426,"mtime":1609738911159,"results":"61","hashOfConfig":"42"},{"size":1497,"mtime":1609738911162,"results":"62","hashOfConfig":"42"},{"size":49435,"mtime":1609738909761,"results":"63","hashOfConfig":"42"},{"size":27397,"mtime":1609738909999,"results":"64","hashOfConfig":"42"},{"size":6262,"mtime":1609738911196,"results":"65","hashOfConfig":"42"},{"size":41631,"mtime":1609738909737,"results":"66","hashOfConfig":"42"},{"size":10720,"mtime":1609919769140,"results":"67","hashOfConfig":"42"},{"size":7322,"mtime":1609738911222,"results":"68","hashOfConfig":"42"},{"size":962,"mtime":1609738911158,"results":"69","hashOfConfig":"42"},{"size":606,"mtime":1609738911141,"results":"70","hashOfConfig":"42"},{"size":1466,"mtime":1609738911160,"results":"71","hashOfConfig":"42"},{"size":5297,"mtime":1609738909762,"results":"72","hashOfConfig":"42"},{"size":762,"mtime":1609738911258,"results":"73","hashOfConfig":"42"},{"size":111,"mtime":1609738909703,"results":"74","hashOfConfig":"42"},{"size":370,"mtime":1609738911160,"results":"75","hashOfConfig":"42"},{"size":2071,"mtime":1609738911142,"results":"76","hashOfConfig":"42"},{"size":2278,"mtime":1609738909703,"results":"77","hashOfConfig":"42"},{"size":2033,"mtime":1609738909702,"results":"78","hashOfConfig":"42"},{"size":65631,"mtime":1610260066513,"results":"79","hashOfConfig":"42"},{"size":33,"mtime":1609738910226,"results":"80","hashOfConfig":"42"},{"size":55414,"mtime":1610347766374,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"y6q95s",{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"84"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"84"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"84"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"84"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\react\\new-runex\\src\\index.js",[],["175","176"],"D:\\react\\new-runex\\src\\App.js",["177"],"D:\\react\\new-runex\\src\\serviceWorker.js",[],"D:\\react\\new-runex\\src\\utils\\constants.js",[],"D:\\react\\new-runex\\src\\store\\index.js",[],"D:\\react\\new-runex\\src\\components\\RaceRegister.js",["178"],"import React, { Component } from 'react'\r\nimport { eventService } from '../services'\r\n\r\n\r\nexport default class RaceRegister extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            event: {},\r\n            tickets: [],\r\n            products: [],\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.getEvent()\r\n    }\r\n    getEvent() {\r\n        const { slug } = this.props.match.params\r\n        console.log(slug)\r\n        // const { eventID } = this.props.route.match.params\r\n\r\n        eventService.getDetail(slug).then(res => {\r\n            console.log(res)\r\n            if (res.status === 200) {\r\n                const { event, tickets } = res.data\r\n                    \r\n                this.setState({\r\n                    event: event\r\n                })\r\n                this.setState({\r\n                    tickets: tickets\r\n                })\r\n               \r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        const { event, tickets, products } = this.state \r\n        console.log(tickets)\r\n        // if(event.event.category.name === 'Run'){\r\n        //     history.push('/raceregister/'+eventID)\r\n        // }else{\r\n        //     history.push('/register/'+eventID)\r\n        // }\r\n        return (\r\n            <Register event={event} tickets={tickets} products={products} />\r\n        )\r\n    }\r\n}\r\nconst Race = React.lazy(() => import('./race/Register'));\r\nconst Visual = React.lazy(() => import('./visual/RaceProfile'));\r\nfunction Register(props) {\r\n    const {event, tickets, products} = props\r\n    // const {category} = (props.event)?props.event.category:null;\r\n    console.log(event)\r\n    // if (event.category!==\"Virtual Run\") {\r\n    //     return <Race event={props.event} tickets={props.tickets} products={props.products} />;\r\n    // }\r\n    return <Visual event={event} tickets={tickets} products={products}/>;\r\n}","D:\\react\\new-runex\\src\\components\\visual\\RaceSummary.js",["179","180","181","182","183","184","185","186","187"],"D:\\react\\new-runex\\src\\store\\history.js",[],"D:\\react\\new-runex\\src\\actions\\index.js",[],"D:\\react\\new-runex\\src\\store\\store.js",["188"],"import { createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from '../reducers'\r\n\r\n//const loggerMiddleware = createLogger()\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(\r\n    thunkMiddleware\r\n  )\r\n)\r\n\r\nexport default store\r\n","D:\\react\\new-runex\\src\\components\\visual\\RaceProfile.js",["189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209"],"D:\\react\\new-runex\\src\\components\\race\\Register.js",["210","211","212"],"import React from 'react'\r\nimport Content from '../race/Content'\r\nimport { eventService } from '../../services'\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\n\r\n// import ReactWizard from 'react-bootstrap-wizard';\r\n// import { Container, Row, Col } from 'reactstrap';\r\nimport { Navbar, Nav, Container} from 'react-bootstrap'\r\n\r\n// const StepsName = [\r\n//   { Name: \"Address\", isActive: true, status:'active' },\r\n//   { Name: \"Race detail\", isActive: false, status:'wait' },\r\n//   { Name: \"Confirm\", isActive: false, status:'wait' }\r\n// ]\r\nimport { history } from '../../store'\r\n\r\nclass Steps extends React.Component {\r\n\r\n  onClickTap=(data)=>{\r\n    this.setState({activeTab:data})\r\n    this.props.changeTab(data)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Navbar bg=\"light\" variant=\"light\" expand=\"md\" style={{ minHeight: '80' }} className=\"border-1 navbar-step py-0\">\r\n        <Container>\r\n          <Nav className=\"mr-auto nav-step\">\r\n            {/*  */}\r\n            {this.props.stepName.map(function (n, i) {\r\n              return (\r\n              <Tab collapse={this.props.collapse} onOpenCollapse={this.props.onOpenCollapse} data={n} key={i} /> \r\n              );\r\n            }.bind(this))}\r\n          </Nav>\r\n          <Navbar.Collapse className=\"justify-content-end\">\r\n            <Navbar.Text>\r\n            {this.props.stepName.map(function (n, i) {\r\n              return (\r\n                n.status === 'active' ?  (i+1)+'/3' : ''\r\n                )\r\n            })}\r\n              </Navbar.Text>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nclass Tab extends React.Component {\r\n\r\n  // constructor(props){\r\n  //   super(props)\r\n  // }\r\n\r\n  onChangeTab=()=>{\r\n    this.props.handleClickChange(this.props.data)\r\n  }\r\n  onOpenCollapse=()=>{\r\n    this.props.onOpenCollapse()\r\n    // this.props.handleClickChange(this.props.data)\r\n  }\r\n\r\n  render() {\r\n    var hidden = this.props.data.Name==='Confirm' ? \"float-right mt-1 show-mobile d-none\" : \"float-right mt-1 d-none\"\r\n    return (\r\n      // <Nav.Link onClick={this.onChangeTab.bind()} className={this.props.data.status==='wait'?'disabled':''}>\r\n      <Nav.Link className={this.props.data.status==='wait'?'disabled':this.props.data.status}  onClick={this.onOpenCollapse.bind()}>\r\n        <IconRunnung color={this.props.data.status}></IconRunnung>\r\n      {this.props.data.Name}<Icon  className={hidden}>{this.props.collapse===true?'keyboard_arrow_up':'keyboard_arrow_down'}</Icon>\r\n    </Nav.Link>\r\n    );\r\n  }\r\n}\r\n\r\nfunction IconRunnung(props) {\r\n  console.log(props)\r\n  const color = props.color==='active' ? '#FA6400':props.color==='finish' ?'#5EB503':'rgba(0,0,0,0.5)'\r\n  \r\n  return (\r\n    <svg className=\"umbrella\" xmlns=\"http://www.w3.org/2000/svg\" style={{ width: '32', margin :'0 5px 0 0' }}  width=\"32\" height=\"32\" viewBox=\"0 0 487.811 487.81\" aria-labelledby=\"title\">\r\n      <title id=\"title\">Umbrella</title>\r\n      <g id=\"_x33_6_24_\" fill={color}>\r\n        <g>\r\n          <path d=\"M150.463,109.521h150.512c3.955,0,7.16-3.206,7.16-7.161c0-3.955-3.205-7.161-7.16-7.161H150.463\r\n            c-3.955,0-7.161,3.206-7.161,7.161C143.302,106.315,146.508,109.521,150.463,109.521z\"/>\r\n          <path d=\"M15.853,179.537h150.511c3.955,0,7.161-3.206,7.161-7.161s-3.206-7.16-7.161-7.16H15.853\r\n            c-3.955,0-7.161,3.205-7.161,7.16S11.898,179.537,15.853,179.537z\"/>\r\n          <path d=\"M56.258,253.214c0,3.955,3.206,7.162,7.161,7.162H213.93c3.955,0,7.161-3.207,7.161-7.162s-3.206-7.16-7.161-7.16H63.419\r\n            C59.464,246.054,56.258,249.259,56.258,253.214z\"/>\r\n          <path d=\"M142.396,336.44H7.161C3.206,336.44,0,339.645,0,343.6s3.206,7.161,7.161,7.161h135.235c3.955,0,7.161-3.206,7.161-7.161\r\n            S146.351,336.44,142.396,336.44z\"/>\r\n          <path d=\"M385.729,154.418c21.6,0,39.111-17.513,39.111-39.114s-17.512-39.113-39.111-39.113\r\n            c-21.605,0-39.119,17.513-39.119,39.113C346.609,136.905,364.123,154.418,385.729,154.418z\"/>\r\n          <path d=\"M450.066,143.155c-22.459,31.459-52.533,35.102-84.895,15.89c-2.203-1.306-11.977-6.691-14.141-7.977\r\n            c-52.061-30.906-104.061-18.786-138.934,30.05c-14.819,20.771,19.455,40.459,34.108,19.93\r\n            c18.018-25.232,40.929-32.533,65.986-24.541c-12.83,22.27-24.047,44.405-39.875,75.853\r\n            c-15.832,31.448-50.787,56.562-84.374,36.92c-24.235-14.165-46.09,20.651-21.928,34.772\r\n            c45.854,26.799,99.619,10.343,127.066-24.493c0.952,0.509,1.958,0.968,3.062,1.354c22.422,7.812,51.814,28.61,60.77,35.981\r\n            c8.953,7.371,24.336,44.921,33.471,63.788c11.082,22.893,46.871,6.219,35.748-16.771c-10.355-21.406-27.736-64.129-41.293-74.938\r\n            c-10.875-8.669-31.988-24.803-49.895-33.956c12.115-23.466,24.729-46.679,38.008-69.491\r\n            c42.328,12.969,82.561-2.308,111.215-42.446C498.996,142.312,464.73,122.624,450.066,143.155z\"/>\r\n        </g>\r\n      </g>\r\n    </svg>\r\n  )\r\n}\r\n\r\nclass Regiter extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      activeTab: {},\r\n      nextTab: {},\r\n      backTab: {},\r\n      event:{},\r\n      is_collapse_open: true,\r\n      StepsName: [\r\n        { Name: \"Address\", isActive: false, status:'wait' },\r\n        { Name: \"Race detail\", isActive: false, status:'wait' },\r\n        { Name: \"Confirm\", isActive: false, status:'wait' }\r\n      ]\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    // this.getEvent()\r\n    this.initailPage()\r\n    console.log(this.props)\r\n    this.setState({\r\n        event: this.props.event\r\n    })\r\n    this.state.StepsName[0]['isActive'] = true;\r\n    this.state.StepsName[0]['status'] = 'active';\r\n  }\r\n\r\n  initailPage = async () => {\r\n    await this.checkUserRegisterEvent()\r\n  }\r\n\r\n  \r\n\r\n  checkUserRegisterEvent = () => {\r\n    console.log(this.state.event)\r\n    const { slug } = this.state.event\r\n\r\n    eventService.checkUserRegisteredEvent(slug).then(res => {\r\n      console.log(res)\r\n      if (res.code === 200) {\r\n        if (res.data.data) {\r\n          history.push('/my-event')\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  handleClickChange=(step)=> {\r\n    const { StepsName } = this.state\r\n    var tmp = StepsName\r\n    tmp.forEach(function(element, index) {\r\n      if (index === step){\r\n        element.status = 'active'\r\n      }else if (index < step){\r\n        element.status = 'finish'\r\n      }else{\r\n        element.status = 'wait'\r\n      }\r\n    })\r\n    this.setState({StepsName:tmp})\r\n  }\r\n\r\n  onOpenCollapse=()=>{\r\n    //console.log(this.state.is_collapse_open)\r\n    if (this.state.is_collapse_open===true){\r\n      this.setState({is_collapse_open:false})\r\n    }\r\n    else{\r\n      this.setState({is_collapse_open:true})\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { regEvent } = this.props\r\n    console.log(this.state.event)\r\n    return (\r\n      <div>\r\n        <Steps collapse={this.state.is_collapse_open} onOpenCollapse={this.onOpenCollapse} stepName={this.state.StepsName}/> {/*changeTab={this.handleClickChange}*/} \r\n        <Container className=\"mt-5\" >\r\n        <Content collapse={this.state.is_collapse_open} stepName={this.state.StepsName} onTabChange={this.handleClickChange} event={this.props.event} tickets={this.props.tickets} products={this.props.products}/>\r\n        </Container>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Regiter\r\n","D:\\react\\new-runex\\src\\components\\visual\\ConditionsModal.js",[],"D:\\react\\new-runex\\src\\utils\\utils.js",[],"D:\\react\\new-runex\\src\\actions\\event.actions.js",["213","214","215"],"import { eventConstants } from '../utils/constants'\r\nimport { eventService } from '../services'\r\nimport { history } from '../store'\r\nimport Swal from 'sweetalert2'\r\n\r\nexport const eventActions = {\r\n  selectedProducts,\r\n  selectedTicket,\r\n  selectedAddress,\r\n  selectedEvent,\r\n  regEvent,\r\n  regEventByPaypal\r\n}\r\n\r\nfunction selectedProducts (products) {\r\n  return { type: eventConstants.SELECT_PRODUCT_REQUEST, products }\r\n}\r\n\r\nfunction selectedTicket (tickets) {\r\n  return { type: eventConstants.SELECT_TICKET_REQUEST, tickets }\r\n}\r\n\r\nfunction selectedAddress (address) {\r\n  return { type: eventConstants.SELECT_ADDRESS_REQUEST, address }\r\n}\r\n\r\nfunction selectedEvent (events) {\r\n  return { type: eventConstants.SELECT_EVENT_REQUEST, events }\r\n}\r\n\r\nfunction regEvent (data) {\r\n  return dispatch => {\r\n    dispatch(request(data))\r\n    Swal.fire({\r\n      title: 'กำลังส่งข้อมูล',\r\n      showConfirmButton: false,\r\n      onBeforeOpen: () => {\r\n        Swal.showLoading()\r\n        eventService.regEvent(data)\r\n          .then(response => {\r\n            Swal.close()\r\n            if (response.status === 200) {\r\n              if (data.image !== '') {\r\n                const params = {\r\n                  amount: data.total_price,\r\n                  image: data.image,\r\n                }\r\n                dispatch(sendSlip(response.data.data.id, params))\r\n              }\r\n              history.push('/payment-success')\r\n              sessionStorage.removeItem('user_tmp')\r\n              dispatch(success(response.data.data))\r\n            } else {\r\n              dispatch(failure())\r\n            }\r\n          }, error => {\r\n            Swal.close()\r\n            dispatch(failure(error.toString))\r\n            dispatch(error(error.toString()))\r\n          })\r\n      }\r\n    })\r\n  }\r\n\r\n  function request (data) { return { type: eventConstants.REG_EVENT_REQUEST, data } }\r\n  function success (data) { return { type: eventConstants.REG_EVENT_SUCCESS, data } }\r\n  function failure (error) { return { type: eventConstants.REG_EVENT_FAIL, error } }\r\n}\r\n\r\nfunction updateRegEvent (data) {\r\n  return dispatch => {\r\n    dispatch(request(data))\r\n    eventService.regEvent(data)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          if (data.image !== '') {\r\n            const params = {\r\n              amount: data.total_price,\r\n              image: data.image,\r\n            }\r\n            dispatch(sendSlip(response.data.data.id, params))\r\n          }\r\n          history.push('/payment-success')\r\n          sessionStorage.removeItem('user_tmp')\r\n          dispatch(success(response.data.data))\r\n        } else {\r\n          dispatch(failure(response.data.data))\r\n        }\r\n      }, error => {\r\n        dispatch(failure(error.toString))\r\n        dispatch(error(error.toString()))\r\n      })\r\n  }\r\n\r\n  function request (data) { return { type: eventConstants.REG_EVENT_REQUEST, data } }\r\n  function success (data) { return { type: eventConstants.REG_EVENT_SUCCESS, data } }\r\n  function failure (error) { return { type: eventConstants.REG_EVENT_FAIL, error } }\r\n}\r\n\r\nfunction regEventByPaypal (data, params) {\r\n  return dispatch => {\r\n    dispatch(request(data))\r\n    Swal.fire({\r\n      title: 'กำลังส่งข้อมูล',\r\n      showConfirmButton: false,\r\n      onBeforeOpen: () => {\r\n        Swal.showLoading()\r\n        eventService.regEvent(data)\r\n      .then(response => {\r\n        Swal.close()\r\n        if (response.status === 200) {\r\n          if (data.image !== '') {\r\n            // const params = {\r\n            //   amount: data.total_price,\r\n            //   image: data.image,\r\n            // }\r\n            //dispatch(sendSlip(response.data.data.id, params))\r\n\r\n          }\r\n          history.push('/payment-success')\r\n          sessionStorage.removeItem('user_tmp')\r\n          dispatch(success(response.data.data))\r\n        } else {\r\n          dispatch(failure())\r\n        }\r\n      }, error => {\r\n        Swal.close()\r\n        dispatch(failure(error.toString))\r\n        dispatch(error(error.toString()))\r\n      })\r\n      }\r\n    })\r\n  }\r\n\r\n  function request (data) { return { type: eventConstants.REG_EVENT_REQUEST, data } }\r\n  function success (data) { return { type: eventConstants.REG_EVENT_SUCCESS, data } }\r\n  function failure (error) { return { type: eventConstants.REG_EVENT_FAIL, error } }\r\n}\r\n\r\nfunction sendSlip (id, data) {\r\n  return dispatch => {\r\n    dispatch(request(data))\r\n    eventService.sendSlip(id, data)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          //dispatch(success(response.data.data))\r\n        } else {\r\n          //dispatch(failure(response.data.data))\r\n        }\r\n      }, error => {\r\n        //dispatch(failure(error.toString))\r\n        //dispatch(error(error.toString()))\r\n      })\r\n  }\r\n\r\n  function request () { return { type: eventConstants.PAYMENT_UPLOAD_SLIP_REQUEST } }\r\n  function success (data) { return { type: eventConstants.PAYMENT_UPLOAD_SLIP_SUCCESS, data } }\r\n  function failure (error) { return { type: eventConstants.PAYMENT_UPLOAD_SLIP_FAIL, error } }\r\n}","D:\\react\\new-runex\\src\\actions\\user.actions.js",[],"D:\\react\\new-runex\\src\\actions\\alert.actions.js",[],"D:\\react\\new-runex\\src\\services\\index.js",[],"D:\\react\\new-runex\\src\\components\\race\\Content.js",["216","217","218","219","220"],"import React from 'react'\r\n\r\n// import Address from './Address'\r\n// import Race from './Race'\r\nimport Address from '../race/Address'\r\nimport Race from '../race/Race'\r\nimport {Confirm} from '../race/Confirm'\r\nimport { eventActions } from '../../actions'\r\nimport { connect } from 'react-redux';\r\n// import { Confirm } from '.'\r\n\r\nclass Content extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gender: 'Select gender',\r\n            distant: 'Select distant',\r\n            current:0,\r\n            products:[],\r\n            tickets:[],\r\n            address:{}\r\n        };\r\n    }\r\n    onClickTap = (index) => {      \r\n        this.setState({ current: index })\r\n        this.props.onTabChange(index)\r\n        //this.props.changeTab(data)\r\n    }\r\n\r\n    handleAddress=(address)=>{\r\n        this.setState({address:address})\r\n        // this.props.address(address)\r\n    }\r\n\r\n    handleOrder=(products, tickets)=>{\r\n        this.setState({products:products})\r\n        this.setState({tickets:tickets})\r\n        // this.props.products(products)\r\n        // this.props.tickets(tickets)\r\n        const data = {\r\n            events : this.props.event,\r\n            tickets : tickets,\r\n            products : products,\r\n            address : this.state.address\r\n        }\r\n        console.log(data)\r\n        // this.props.events(data)\r\n    }\r\n\r\n    render () {\r\n        const { current, tickets } = this.state\r\n        console.log(this.props)\r\n        return (\r\n            <div>\r\n                {current === 0 ?\r\n                    <Address handleClickChange={this.onClickTap} event={this.props.event} tickets={this.props.tickets} products={this.props.products} handleAddress={this.handleAddress}></Address>\r\n                    : null}\r\n                {current === 1 ?\r\n                    <Race handleClickChange={this.onClickTap} event={this.props.event} tickets={this.props.tickets} products={this.props.products} handleOrder={this.handleOrder}></Race>\r\n                    : null\r\n                }\r\n                {\r\n                    current === 2 ? <Confirm handleClickChange={this.onClickTap} collapse={this.props.collapse} event={this.props.event} tickets={this.props.tickets} products={this.props.products} products={this.state.products} tickets={tickets}></Confirm> : null\r\n                }\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapState (state) {\r\n    const { address, product, ticket, events } = state.eventer;\r\n    return { address, product, ticket, events };\r\n  }\r\n  \r\n  const actionCreators = {\r\n    address: eventActions.selectedAddress,\r\n    product: eventActions.selectedProducts,\r\n    ticket: eventActions.selectedTicket,\r\n    events: eventActions.selectedEvent,\r\n  };\r\n  export default Content\r\n//   const connectedContent = connect(mapState, actionCreators)(Content);\r\n//   export { connectedContent as Content }","D:\\react\\new-runex\\src\\reducers\\index.js",[],"D:\\react\\new-runex\\src\\services\\activity.service.js",[],"D:\\react\\new-runex\\src\\components\\race\\Confirm.js",["221"],"import React from 'react'\r\nimport { Row, Col, Media, Card, Button, Form, InputGroup, FormControl, Collapse } from 'react-bootstrap'\r\n// import iconrunning from '../../images/icon-running.svg'\r\nimport methodsPayment from '../../images/free-ecommerce-icon-set-bshk-13.jpg'\r\nimport iconrunningwhite from '../../images/icon-running-white.svg'\r\nimport QR_Code from '../../images/QR_Code.png'\r\nimport logoBank1 from '../../images/b1-logo.png'\r\nimport logoBank2 from '../../images/b2-logo.png'\r\nimport ConfirmPayment from './ConfirmPayment'\r\nimport { IMAGE_URL, regStatusConstants } from '../../utils/constants'\r\nimport { eventActions } from '../../actions'\r\nimport { userActions } from '../../actions'\r\nimport { connect } from 'react-redux';\r\nimport { utils } from '../../utils/utils'\r\nimport { eventService, regEventService } from '../../services'\r\n// import { PayPalButton } from \"react-paypal-button-v2\";\r\n// import moment from 'moment'\r\nimport Swal from 'sweetalert2'\r\nimport { CheckoutCreditCard } from '../omise-prebuilt-form'\r\n\r\nclass Confirm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: null,\r\n            selectedOption: \"3\",\r\n            formshow: \"1\",\r\n            code: '',\r\n            promoCode: 0,\r\n            promoText: '',\r\n            coupon: undefined,\r\n            user: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')) : {}\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\r\n            this.setState({ user: JSON.parse(sessionStorage.getItem('user_tmp')) })\r\n        }\r\n    }\r\n\r\n    onChangeTab = (step) => {\r\n        this.props.handleClickChange(step)\r\n    }\r\n    handleOptionChange = (changeEvent) => {\r\n        this.setState({\r\n            selectedOption: changeEvent.target.value\r\n        })\r\n    }\r\n    onClickBack = () => {\r\n        this.props.handleClickChange(1)\r\n    }\r\n\r\n    onClickChangeAddress = () => {\r\n        this.props.handleClickChange(0)\r\n    }\r\n\r\n    onClickChangeTicket = () => {\r\n        this.props.handleClickChange(1)\r\n    }\r\n\r\n    onClickConfirm = async (e) => {\r\n        if (e !== undefined && e !== null) {\r\n            e.preventDefault()\r\n        }\r\n\r\n        var phone = ''\r\n        if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\r\n            this.updateUser(JSON.stringify(sessionStorage.getItem('user_tmp')))\r\n            if (JSON.stringify(sessionStorage.getItem('user_tmp').phone !== null)) {\r\n                phone = JSON.stringify(sessionStorage.getItem('user_tmp')).phone\r\n            }\r\n        } else {\r\n            phone = JSON.parse(utils.getUser()).phone\r\n        }\r\n\r\n\r\n        const { events } = this.props\r\n\r\n        const total = this.calculateTotal()\r\n        let status = ''\r\n        if (!status) {\r\n            status = regStatusConstants.PAYMENT_WAITING\r\n        }\r\n        if (this.state.file !== null) {\r\n            status = regStatusConstants.PAYMENT_WAITING_APPROVE\r\n        }\r\n\r\n        let paymentType = ''\r\n        if (events.tickets[0].ticket.price === 0) {\r\n            status = regStatusConstants.PAYMENT_SUCCESS\r\n            paymentType = regStatusConstants.PAYMENT_FREE\r\n        } else {\r\n            if (this.state.selectedOption === \"1\") {\r\n                paymentType = regStatusConstants.PAYMENT_TRANSFER\r\n            } else if (this.state.selectedOption === \"2\") {\r\n                paymentType = regStatusConstants.PAYMENT_QRCODE\r\n            } else if (this.state.selectedOption === \"3\") {\r\n                paymentType = regStatusConstants.PAYMENT_CREDIT_CARD\r\n            }\r\n        }\r\n\r\n        var discount = this.state.promoCode\r\n        if (discount < 0) {\r\n            discount = 0\r\n        }\r\n\r\n        const params = {\r\n            event: events.events.event,\r\n            event_id: events.events.event.id,\r\n            product: events.products,\r\n            tickets: events.tickets,\r\n            status: status,\r\n            payment_type: paymentType,\r\n            total_price: total,\r\n            promo_code: this.state.promoText,\r\n            discount_price: discount,\r\n            coupon: this.state.coupon,\r\n            reg_date: utils.dateNow(),\r\n            shiping_address: events.address,\r\n            image: this.state.file ? await eventService.uploadImage(this.state.file).then(res => res.data.url) : '',\r\n            phone:phone\r\n        }\r\n        //console.log(params)\r\n        this.props.regEvent(params)\r\n    }\r\n\r\n    onClickConfirmPaypal = async (resPayapl) => {\r\n        // e.preventDefault()\r\n        var phone = ''\r\n        if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\r\n            this.updateUser(JSON.stringify(sessionStorage.getItem('user_tmp')))\r\n            if (JSON.stringify(sessionStorage.getItem('user_tmp').phone !== null)) {\r\n                phone = JSON.stringify(sessionStorage.getItem('user_tmp')).phone\r\n            }\r\n        } else {\r\n            phone = JSON.parse(utils.getUser()).phone\r\n        }\r\n\r\n\r\n        const total = resPayapl.amount\r\n        var discount = this.state.promoCode\r\n        if (discount < 0) {\r\n            discount = 0\r\n        }\r\n\r\n        const { events } = this.props\r\n        const params = {\r\n            event_id: events.events.event.id,\r\n            product: events.products,\r\n            tickets: events.tickets,\r\n            status: regStatusConstants.PAYMENT_SUCCESS,\r\n            payment_type: regStatusConstants.PAYMENT_CREDIT_CARD,\r\n            total_price: total,\r\n            promo_code: this.state.promoText,\r\n            discount_price: discount,\r\n            coupon: this.state.coupon,\r\n            reg_date: utils.dateNow(),\r\n            shiping_address: events.address,\r\n            order_id: resPayapl.order_id,\r\n            image: '',\r\n            phone: phone\r\n        }\r\n\r\n        //console.log('Param onClickConfirmPaypal ::: ', params)\r\n        this.props.regEventByPaypal(params, resPayapl)\r\n    }\r\n\r\n    createCreditCardCharge = async (amount, token) => {\r\n        try {\r\n            // e.preventDefault()\r\n            var phone = ''\r\n            if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\r\n                this.updateUser(JSON.stringify(sessionStorage.getItem('user_tmp')))\r\n                if (JSON.stringify(sessionStorage.getItem('user_tmp').phone !== null)) {\r\n                    phone = JSON.stringify(sessionStorage.getItem('user_tmp')).phone\r\n                }\r\n            } else {\r\n                phone = JSON.parse(utils.getUser()).phone\r\n            }\r\n\r\n            const total = amount\r\n            var discount = this.state.promoCode\r\n            if (discount < 0) {\r\n                discount = 0\r\n            }\r\n\r\n            const { events } = this.props\r\n            var bodyFormData = new FormData()\r\n\r\n            bodyFormData.set('token', token)\r\n            bodyFormData.set('price', total)\r\n            bodyFormData.set('event_id', events.events.event.id)\r\n            regEventService.chargeReg(bodyFormData).then(res => {\r\n                if (res.status === 200) {\r\n                    const params = {\r\n                        event_id: events.events.event.id,\r\n                        product: events.products,\r\n                        tickets: events.tickets,\r\n                        status: regStatusConstants.PAYMENT_SUCCESS,\r\n                        payment_type: regStatusConstants.PAYMENT_CREDIT_CARD,\r\n                        total_price: total / 100,\r\n                        promo_code: this.state.promoText,\r\n                        discount_price: discount,\r\n                        coupon: this.state.coupon,\r\n                        reg_date: utils.dateNow(),\r\n                        shiping_address: events.address,\r\n                        order_id: res.data.data.ID,\r\n                        image: '',\r\n                        phone: phone\r\n                    }\r\n                    this.props.regEventByPaypal(params)\r\n                } else {\r\n                    Swal.fire({\r\n                        type: 'warning',\r\n                        title: 'ชำระเงินไม่สำเร็จ',\r\n                        showConfirmButton: false,\r\n                        timer: 3000\r\n                    })\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    createInternetBankingCharge = async (amount, token) => {\r\n        try {\r\n            // e.preventDefault()\r\n            var phone = ''\r\n            if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\r\n                this.updateUser(JSON.stringify(sessionStorage.getItem('user_tmp')))\r\n                if (JSON.stringify(sessionStorage.getItem('user_tmp').phone !== null)) {\r\n                    phone = JSON.stringify(sessionStorage.getItem('user_tmp')).phone\r\n                }\r\n            }else {\r\n                phone = JSON.parse(utils.getUser()).phone\r\n            }\r\n\r\n            const total = amount\r\n            var discount = this.state.promoCode\r\n            if (discount < 0) {\r\n                discount = 0\r\n            }\r\n\r\n            const { events } = this.props\r\n            var bodyFormData = new FormData()\r\n\r\n            bodyFormData.set('token', token)\r\n            bodyFormData.set('price', total)\r\n            bodyFormData.set('event_id', events.events.event.id)\r\n            regEventService.chargeReg(bodyFormData).then(res => {\r\n                if (res.status === 200) {\r\n                    const params = {\r\n                        event_id: events.events.event.id,\r\n                        product: events.products,\r\n                        tickets: events.tickets,\r\n                        status: regStatusConstants.PAYMENT_SUCCESS,\r\n                        payment_type: regStatusConstants.PAYMENT_ONLINE_BANKING,\r\n                        total_price: total / 100,\r\n                        promo_code: this.state.promoText,\r\n                        discount_price: discount,\r\n                        coupon: this.state.coupon,\r\n                        reg_date: utils.dateNow(),\r\n                        shiping_address: events.address,\r\n                        order_id: token,\r\n                        image: '',\r\n                        phone: phone\r\n                    }\r\n                    //console.log('Param onClickConfirmPaypal ::: ', params)\r\n                    this.props.regEventByPaypal(params)\r\n                } else {\r\n                    Swal.fire({\r\n                        type: 'warning',\r\n                        title: 'ชำระเงินไม่สำเร็จ',\r\n                        showConfirmButton: false,\r\n                        timer: 3000\r\n                    })\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    onClickSendCode = () => {\r\n        const { promoText } = this.state\r\n        if (promoText.length > 4) {\r\n            //this.setState({promoCode:100})\r\n            regEventService.getPromoCodeInfo(promoText)\r\n                .then(res => {\r\n                    //console.log(res)\r\n                    if (res.data.code === 200) {\r\n\r\n                        this.setState({ coupon: res.data.data })\r\n                        this.setState({ promoCode: res.data.data.discount })\r\n                    } else {\r\n                        this.setState({ promoCode: -1 })\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ promoCode: -1 })\r\n                })\r\n        } else {\r\n            Swal.fire({\r\n                type: 'warning',\r\n                title: 'promo code ไม่ถูกต้อง',\r\n                showConfirmButton: false,\r\n                timer: 2000\r\n            })\r\n        }\r\n    }\r\n\r\n    onClickClearCode = () => {\r\n        this.setState({ promoText: '' })\r\n        this.setState({ promoCode: 0 })\r\n        this.setState({ coupon: undefined })\r\n    }\r\n\r\n    updateUser = (user) => {\r\n        this.props.updateProfile(JSON.parse(user))\r\n    }\r\n\r\n    genarateAddon = () => {\r\n        var arr = []\r\n        const { events } = this.props\r\n        if (events.products !== undefined && events.products !== null) {\r\n            events.products.map((item) => (\r\n                arr.push(\r\n                    <Media key={item.product.id}>\r\n                        <img\r\n                            width={64}\r\n                            height={28}\r\n                            className=\"mr-3\"\r\n                            src={item.product.image.length > 0 ? IMAGE_URL + item.product.image[0] : ''}\r\n                            alt=\"\"\r\n                        />\r\n                        <Media.Body>\r\n                            <p className=\"\">{item.product.name}</p>\r\n                            <h6 className=\"\"><small>Price :</small>{\r\n                                item.price + ' ' + (item.product.currency !== undefined ? item.product.currency : 'THB')\r\n                            }</h6>\r\n                        </Media.Body>\r\n                    </Media>\r\n                )\r\n            ))\r\n        }\r\n        return arr\r\n    }\r\n\r\n    genarateTickets = () => {\r\n        var arr = []\r\n        const { events } = this.props\r\n        if (events.tickets !== undefined && events.tickets !== null) {\r\n            events.tickets.map((item, index) => (\r\n                index === 0 ? arr.push(\r\n                    <div key={index}>\r\n                        <h6 className=\"\"><small>Distance : </small>{item.ticket.title + ' ' + item.ticket.distance + ' km.'}</h6>\r\n                        <h6 className=\"\" style={{ display: item.type === '' ? \"none\" : \"block\" }}><small>{item.product.name} size : </small>{item.type}</h6>\r\n                    </div>\r\n                ) : arr.push(\r\n                    <div key={index} style={{ display: item.type === '' ? \"none\" : \"block\" }}>\r\n                        <h6 className=\"\" style={{ display: item.type === '' ? \"none\" : \"block\" }}><small>{item.product.name} size : </small>{item.type}</h6>\r\n                    </div>\r\n                )\r\n\r\n            ))\r\n\r\n        }\r\n        return arr\r\n    }\r\n\r\n    genarateSummary = () => {\r\n        var arr = []\r\n        const { events } = this.props\r\n        const { promoCode } = this.state\r\n        var total = 0\r\n        var currency = 'BTH'\r\n        if (events.tickets !== undefined && events.tickets !== null) {\r\n            if (events.tickets.length > 0) {\r\n                total += events.tickets[0].ticket.price\r\n                if (events.tickets[0].ticket.unit !== undefined) {\r\n                    currency = events.tickets[0].ticket.unit\r\n                }\r\n                arr.push(\r\n                    <div className=\"clearfix\" key={events.tickets[0].ticket.id}>\r\n                        <p className=\"float-left\">{events.tickets[0].ticket.title}</p>\r\n                        <p className=\"float-right\">{events.tickets[0].ticket.price + ' ' +\r\n                            (events.tickets[0].ticket.unit !== undefined ? events.tickets[0].ticket.unit : 'THB')}</p>\r\n                    </div>\r\n\r\n                )\r\n            }\r\n        }\r\n        if (events.products !== undefined && events.products !== null) {\r\n            events.products.map((item) => (\r\n                total += item.price,\r\n                arr.push(\r\n                    <div className=\"clearfix\" key={item.product.id}>\r\n                        <p className=\"float-left\">{item.product.name}</p>\r\n                        <p className=\"float-right\">{item.price + ' ' + currency}</p>\r\n                    </div>\r\n\r\n                )\r\n            ))\r\n\r\n        }\r\n        if (promoCode > 0) {\r\n            total -= promoCode\r\n            arr.push(\r\n                <div className=\"clearfix\" key={989}>\r\n                    <p className=\"float-left\">ส่วนลด</p>\r\n                    <p style={{ color: '#FA6400', marginLeft: 5, cursor: 'pointer' }} className=\"float-left\" onClick={this.onClickClearCode}>ลบ</p>\r\n                    <p className=\"float-right\">-{promoCode + ' ' + currency}</p>\r\n                </div>\r\n            )\r\n        }\r\n        if (this.state.selectedOption === '3') {\r\n            arr.push(\r\n                <div className=\"clearfix\" key={989}>\r\n                    <p className=\"float-left\"><span style={{ color: 'red' }}>charge 5%</span></p>\r\n                    <p className=\"float-right\">{this.calculateTotal() - this.calculateTotal() / 1.05 + ' ' + currency}</p>\r\n                </div>\r\n            )\r\n        }\r\n        arr.push(\r\n            <div className=\"clearfix\" key={99}>\r\n                <p className=\"float-left\">Total</p>\r\n                <p className=\"float-right\">{this.calculateTotal() + ' ' + currency}</p>\r\n            </div>\r\n        )\r\n        return arr\r\n    }\r\n\r\n    calculateTotal () {\r\n        const { events } = this.props\r\n        var total = 0\r\n        if (events.tickets !== undefined && events.tickets !== null) {\r\n            if (events.tickets.length > 0) {\r\n                total += events.tickets[0].ticket.price\r\n            }\r\n        }\r\n        if (events.products !== undefined && events.products !== null) {\r\n            events.products.map((item) => (\r\n                total += item.price\r\n            ))\r\n        }\r\n        if (this.state.promoCode > 0) {\r\n            total -= this.state.promoCode\r\n        }\r\n        if (this.state.selectedOption === '3') {\r\n            total *= 1.05\r\n        }\r\n        return total\r\n    }\r\n\r\n    attachFileSlip = (file) => {\r\n        this.setState({ file: file }, () => {\r\n            this.onClickConfirm()\r\n        })\r\n    }\r\n\r\n    render () {\r\n        const { user } = this.state\r\n        const { events } = this.props\r\n        return (\r\n            <Card>\r\n                {events ?\r\n                    <Card.Body>\r\n                        <Row>\r\n                            <Col sm={6} md={12} lg={5}>\r\n                                <Collapse in={this.props.collapse}>\r\n                                    <Card>\r\n                                        <Card.Body className=\"mb-3 border-bottom\">\r\n                                            <h4>Confirm information</h4>\r\n                                            <div className=\"clearfix\">\r\n                                                <h6 style={{ marginTop: 10 }} className=\"float-left\">Address</h6>\r\n                                                <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeAddress}>Change</Button>\r\n                                            </div>\r\n                                            <p>{user.fullname}</p>\r\n                                            <p>{events.address ? (events.address.address + ' ' + events.address.city + ', ' + events.address.district + ', ' + events.address.province + ' ' + events.address.zipcode) : ''}</p>\r\n                                        </Card.Body>\r\n                                        <Card.Body className=\"mb-3 border-bottom\">\r\n                                            <div className=\"clearfix\">\r\n                                                <h6 style={{ marginTop: 10 }} className=\"float-left\">Detail</h6>\r\n                                                <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeTicket}>Change</Button>\r\n                                            </div>\r\n                                            <Media>\r\n                                                <img\r\n                                                    width={64}\r\n                                                    height={32}\r\n                                                    className=\"mr-3\"\r\n                                                    src={events.events.event ? IMAGE_URL + events.events.event.cover : ''}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                                <Media.Body>\r\n                                                    <p className=\"\">{events.events.event ? events.events.event.name : ''}</p>\r\n                                                    {this.genarateTickets()}\r\n                                                </Media.Body>\r\n                                            </Media>\r\n                                        </Card.Body>\r\n                                        <Card.Body className=\"mb-3 border-bottom\" style={{ display: events.products ? ((events.products !== null || events.products.length === 0) ? \"none\" : \"block\") : 'none' }}>\r\n                                            <div className=\"clearfix\">\r\n                                                <h6 style={{ marginTop: 10 }} className=\"float-left\">Add on</h6>\r\n                                                <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeTicket}>Change</Button>\r\n                                            </div>\r\n                                            {this.genarateAddon()}\r\n\r\n                                        </Card.Body>\r\n                                        <Card.Body className=\"mb-3 border-bottom\" style={{ display: events.tickets ? (events.tickets[0].ticket.price === 0 ? \"none\" : \"block\") : 'block' }}>\r\n                                            <div className=\"clearfix\">\r\n                                                <h6>Promo Code</h6>\r\n                                            </div>\r\n                                            <InputGroup className=\"mb-3\">\r\n                                                <FormControl\r\n                                                    placeholder=\"code\"\r\n                                                    aria-label=\"code\"\r\n                                                    aria-describedby=\"basic-addon2\"\r\n                                                    value={this.state.promoText}\r\n                                                    onChange={e => this.setState({ promoText: e.target.value })}\r\n                                                    hidden={this.state.promoCode > 0}\r\n                                                />\r\n                                                <InputGroup.Append hidden={this.state.promoCode > 0}>\r\n                                                    <Button variant=\"warning\" onClick={this.onClickSendCode}>Send</Button>\r\n                                                </InputGroup.Append>\r\n                                            </InputGroup>\r\n                                            <div hidden={this.state.promoCode <= 0}>\r\n                                                <p className=\"float-left\" >ใช้โค๊ด</p>\r\n                                                <p className=\"float-left\" style={{ color: '#FA6400', marginLeft: 5, marginRight: 5 }}>{this.state.promoText}</p>\r\n                                                <p className=\"float-left\" > คุณได้ส่วนลด </p>\r\n                                                <p className=\"float-left\" style={{ color: '#FA6400', marginLeft: 5, marginRight: 5 }}>{this.state.promoCode}</p>\r\n                                                <p className=\"float-left\" > บาท </p>\r\n                                            </div>\r\n\r\n                                            <div hidden={this.state.promoCode >= 0}>\r\n                                                <p className=\"float-left\" style={{ color: '#FA6400' }}>Code นี้ไม่สามารถใช้ได้</p>\r\n                                            </div>\r\n                                        </Card.Body>\r\n                                        <Card.Body className=\"mb-3\">\r\n                                            <div className=\"clearfix\">\r\n                                                <h6>Summary</h6>\r\n                                            </div>\r\n                                            {this.genarateSummary()}\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </Collapse>\r\n                                {/* <Card className=\"d-none d-lg-block d-xl-block\">\r\n                                    <Card.Body className=\"mb-3 border-bottom\">\r\n                                        <h4>Confirm information</h4>\r\n                                        <div className=\"clearfix\">\r\n                                            <h6 style={{ marginTop: 10 }} className=\"float-left\">Address</h6>\r\n                                            <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeAddress}>Change</Button>\r\n                                        </div>\r\n                                        <p>{user.fullname}</p>\r\n                                        <p>{events.address ? (events.address.address + ' ' + events.address.city + ', ' + events.address.district + ', ' + events.address.province + ' ' + events.address.zipcode) : ''}</p>\r\n                                    </Card.Body>\r\n                                    <Card.Body className=\"mb-3 border-bottom\">\r\n                                        <div className=\"clearfix\">\r\n                                            <h6 style={{ marginTop: 10 }} className=\"float-left\">Detail</h6>\r\n                                            <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeTicket}>Change</Button>\r\n                                        </div>\r\n                                        <Media>\r\n                                            <img\r\n                                                width={64}\r\n                                                height={64}\r\n                                                className=\"mr-3\"\r\n                                                src={events.events.event ? IMAGE_URL + events.events.event.cover : ''}\r\n                                                alt=\"\"\r\n                                            />\r\n                                            <Media.Body>\r\n                                                <p className=\"\">{events.events.event ? events.events.event.name : ''}</p>\r\n                                                {this.genarateTickets()}\r\n                                            </Media.Body>\r\n                                        </Media>\r\n                                    </Card.Body>\r\n                                    <Card.Body className=\"mb-3 border-bottom\">\r\n                                        <div className=\"clearfix\">\r\n                                            <h6 style={{ marginTop: 10 }} className=\"float-left\">Add on</h6>\r\n                                            <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeTicket}>Change</Button>\r\n                                        </div>\r\n                                        {this.genarateAddon()}\r\n\r\n                                    </Card.Body>\r\n                                    <Card.Body className=\"mb-3 border-bottom\">\r\n                                        <div className=\"clearfix\">\r\n                                            <h6>Promo Code</h6>\r\n                                        </div>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <FormControl\r\n                                                placeholder=\"code\"\r\n                                                aria-label=\"code\"\r\n                                                aria-describedby=\"basic-addon2\"\r\n                                                value={this.state.promoText}\r\n                                                onChange={e=>this.setState({promoText:e.target.value})}\r\n                                                hidden={this.state.promoCode > 0}\r\n                                            />\r\n                                            <InputGroup.Append hidden={this.state.promoCode > 0}>\r\n                                                <Button variant=\"warning\" onClick={this.onClickSendCode}>Send</Button>\r\n                                            </InputGroup.Append>\r\n                                        </InputGroup>\r\n                                        <div hidden={this.state.promoCode <= 0}>\r\n                                            <p className=\"float-left\" >ใช้โค๊ด</p>\r\n                                            <p className=\"float-left\" style={{color:'#FA6400',marginLeft:5, marginRight:5}}>{this.state.promoText}</p>\r\n                                            <p className=\"float-left\" > คุณได้ส่วนลด </p>\r\n                                            <p className=\"float-left\" style={{color:'#FA6400',marginLeft:5, marginRight:5}}>{this.state.promoCode}</p>\r\n                                            <p className=\"float-left\" > บาท </p>\r\n                                            </div>\r\n\r\n                                            <div hidden={this.state.promoCode >= 0}>\r\n                                            <p className=\"float-left\" style={{color:'#FA6400'}}>Code นี้ไม่สามารถใช้ได้</p>\r\n                                            </div>\r\n                                    </Card.Body>\r\n                                    <Card.Body className=\"mb-3\">\r\n                                        <div className=\"clearfix\">\r\n                                            <h6>Summary</h6>\r\n                                        </div>\r\n                                        {this.genarateSummary()}\r\n                                    </Card.Body>\r\n                                </Card> */}\r\n                            </Col>\r\n                            <Col sm={6} lg={7} md={12} >\r\n                                <h5 style={{ display: events.tickets ? (events.tickets[0].ticket.price === 0 ? \"none\" : \"block\") : 'block' }}>Select Payment Method</h5>\r\n\r\n                                <Form className=\"mb-5\" style={{ display: events.tickets ? (events.tickets[0].ticket.price === 0 ? \"none\" : \"block\") : 'block' }}>\r\n                                    <Form.Check\r\n                                        custom\r\n                                        type=\"radio\"\r\n                                        id=\"custom-radio-2\"\r\n                                        value=\"1\"\r\n                                        label=\"ชำระเงินโอนผ่านบัญชีธนาคาร\"\r\n                                        name=\"pay\"\r\n                                        checked={this.state.selectedOption === \"1\"}\r\n                                        onChange={this.handleOptionChange}\r\n                                    />\r\n                                    <Card style={{ display: this.state.selectedOption === '1' ? \"block\" : \"none\" }}>\r\n                                        <Card.Body>\r\n                                            <h5>ข้อมูลบัญชีธนาคารสำหรับโอนเงิน</h5>\r\n                                            <div className=\"clearfix\">\r\n                                                <p className=\"float-left\">ธนาคาร:</p>\r\n                                                <h6 className=\"float-right\" >ธนาคารกสิกรไทย</h6>\r\n                                            </div>\r\n                                            <div className=\"clearfix\">\r\n                                                <p className=\"float-left\">หมายเลขบัญชี:</p>\r\n                                                <h6 className=\"float-right\" >674-2-04828-2</h6>\r\n                                            </div>\r\n                                            <div className=\"clearfix border-bottom pb-3 mb-2\">\r\n                                                <p className=\"float-left\">ชื่อบัญชี:</p>\r\n                                                <h6 className=\"float-right\" >บจก. ธิงค เทคโนโลยี</h6>\r\n                                            </div>\r\n                                            <h6 className=\"\" >เงื่อนไขการยืนยันการสมัคร</h6>\r\n                                            <p className=\"border-bottom pb-3\">หลังจากทำการโอน กรุณาเก็บสลิปหลักฐานการโอนเพื่อใช้ในการแนบหลักฐานยืนยันการสมัครในขั้นตอนต่อไป</p>\r\n                                            <h6 className=\"mb-1\">เงื่อนไขการยืนยันการสมัคร</h6>\r\n                                            <p className=\"border-bottom pb-3\"> หลังจากทำการโอน กรุณาเก็บสลิปหลักฐานการโอนเพื่อใช้ในการแนบหลักฐานยืนยันการสมัครในขั้นตอนต่อไป</p>\r\n                                            <div className=\"clearfix\">\r\n                                                <div className=\"float-left\">\r\n                                                    <h5>แนบหลักฐานการโอนเงิน</h5>\r\n                                                    <p className=\"text-custom\">ยังไม่ได้ยืนยันหลักฐานยืนยันการสมัคร</p>\r\n                                                </div>\r\n                                                <ConfirmPayment uploadSlip={this.attachFileSlip} />\r\n                                                {/* <button type=\"button\" className=\"btn btn-outline-warning float-right rounded-pill\"><img width=\"25\" height=\"20\" class=\"mr-1\" src={iconupload} alt=\"runex\" />อัปโหลดสลิป</button> */}\r\n                                            </div>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n\r\n                                    <div style={{ display: this.state.selectedOption === '1' ? \"block\" : \"none\" }}>\r\n                                        {/* <PayPalButton\r\n                                            amount=\"0.01\"\r\n                                            onSuccess={(details, data) => {\r\n                                                alert(\"Transaction completed by \" + details.payer.name.given_name);\r\n\r\n                                                // OPTIONAL: Call your server to save the transaction\r\n                                                return fetch(\"/paypal-transaction-complete\", {\r\n                                                    method: \"post\",\r\n                                                    body: JSON.stringify({\r\n                                                        orderID: data.orderID\r\n                                                    })\r\n                                                });\r\n                                            }}\r\n                                        /> */}\r\n                                        {/* <Form.Group style={{ display: this.state.selectedOption === '1' ? \"block\" : \"none\" }} controlId=\"formBasicEmail\">\r\n                                            <Form.Label>Credit card number</Form.Label>\r\n                                            <Form.Control type=\"text\" placeholder=\"\" />\r\n                                        </Form.Group>\r\n                                        <Form.Group controlId=\"formBasicEmail\" style={{ display: this.state.selectedOption === '1' ? \"block\" : \"none\" }}>\r\n                                            <Row>\r\n                                                <Col xs={5}>\r\n                                                    <Form.Label>Security code</Form.Label>\r\n                                                    <Form.Control type=\"text\" placeholder=\"\" />\r\n                                                </Col>\r\n                                                <Col xs={7}>\r\n                                                    <Form.Label>Expiration date</Form.Label>\r\n                                                    <Form.Control type=\"text\" placeholder=\"MM/YY\" />\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Form.Group> */}\r\n                                    </div>\r\n                                    <Form.Check\r\n                                        custom\r\n                                        type=\"radio\"\r\n                                        value=\"2\"\r\n                                        id=\"custom-radio-2\"\r\n                                        label=\"ชำระเงินด้วย QR Code\"\r\n                                        checked={this.state.selectedOption === \"2\"}\r\n                                        onChange={this.handleOptionChange}\r\n                                        name=\"pay\"\r\n                                    />\r\n                                    <Card style={{ display: this.state.selectedOption === '2' ? \"block\" : \"none\" }}>\r\n                                        <Card.Body>\r\n                                            <Row>\r\n                                                <Col md={6} className=\"p-0\">\r\n                                                    <img\r\n                                                        // width={100%}\r\n                                                        className=\"mr-3 img-fluid\"\r\n                                                        src={QR_Code}\r\n                                                        alt=\"\"\r\n                                                    />\r\n                                                </Col>\r\n                                                <Col md={6}>\r\n                                                    <h5>ขั้นตอนการชำระเงินด้วย QR Code</h5>\r\n                                                    <ul className=\"list-unstyled\">\r\n                                                        <li>1. เปิด App ธนาคาร</li>\r\n                                                        <li>2. เลือกช่องทางการชำระเงิน</li>\r\n                                                        <li>3. สแกน QR Code ด้านซ้ายเพื่อชำระเงิน</li>\r\n                                                    </ul>\r\n                                                    <h6 className=\"mb-1\">ธนาคารที่ร่วมรายการ</h6>\r\n                                                    <img\r\n                                                        width={100}\r\n                                                        className=\"mr-3\"\r\n                                                        src={logoBank1}\r\n                                                        alt=\"\"\r\n                                                    />\r\n                                                    <img\r\n                                                        width={100}\r\n                                                        className=\"mr-3\"\r\n                                                        src={logoBank2}\r\n                                                        alt=\"\"\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <Card >\r\n                                                        <Card.Body>\r\n                                                            <h5>ข้อมูลบัญชีธนาคารสำหรับโอนเงิน</h5>\r\n                                                            <div className=\"clearfix\">\r\n                                                                <p className=\"float-left\">Prompt Pay:</p>\r\n                                                                <h6 className=\"float-right\" >0-4055-48000-64-7</h6>\r\n                                                            </div>\r\n                                                            <div className=\"clearfix border-bottom pb-3 mb-2\">\r\n                                                                <p className=\"float-left\">ชื่อบัญชี:</p>\r\n                                                                <h6 className=\"float-right\" >บริษัท ธิงค เทคโนโลยี จำกัด</h6>\r\n                                                            </div>\r\n                                                            <h6 className=\"mb-1\">เงื่อนไขการยืนยันการสมัคร</h6>\r\n                                                            <p> หลังจากทำการโอน กรุณาเก็บสลิปหลักฐานการโอนเพื่อใช้ในการแนบหลักฐานยืนยันการสมัครในขั้นตอนต่อไป</p>\r\n                                                            <div className=\"clearfix\">\r\n                                                                <div className=\"float-left\">\r\n                                                                    <h5>แนบหลักฐานการโอนเงิน</h5>\r\n                                                                    <p className=\"text-custom\">ยังไม่ได้ยืนยันหลักฐานยืนยันการสมัคร</p>\r\n                                                                </div>\r\n                                                                <ConfirmPayment uploadSlip={this.attachFileSlip} />\r\n                                                                {/* <button type=\"button\" className=\"btn btn-outline-warning float-right rounded-pill\"><img width=\"25\" height=\"20\" class=\"mr-1\" src={iconupload} alt=\"runex\" />อัปโหลดสลิป</button> */}\r\n                                                            </div>\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n\r\n                                    <Form.Check\r\n                                        custom\r\n                                        type=\"radio\"\r\n                                        id=\"custom-radio-0\"\r\n                                        name=\"pay\"\r\n                                        value=\"3\"\r\n                                        checked={this.state.selectedOption === \"3\"}\r\n                                        onChange={this.handleOptionChange}\r\n                                        label={<span style={{ color: 'red' }}><img width={168} className=\"mr-3\" src={methodsPayment} alt=\"\" />*Charge 5%</span>}\r\n                                    // label={`บัตรเครดิต ${<span style={{color:'red'}}>(*Charge 5%)</span>}`}\r\n                                    // label={`Paypal ${<span style={{color:'red'}}>(*Charge 5%)</span>}`}\r\n                                    />\r\n                                    {/* {console.log('Total Price :::: ', this.calculateTotal().toFixed(2))} */}\r\n                                    {\r\n                                        this.state.selectedOption === '3' ?\r\n                                            <Card>\r\n                                                <Card.Body>\r\n                                                    <Row>\r\n                                                        <Col md={6}>\r\n                                                            <CheckoutCreditCard\r\n                                                                cart={events}\r\n                                                                createCreditCardCharge={this.createCreditCardCharge}\r\n                                                                amount={this.calculateTotal()}\r\n                                                            />\r\n                                                        </Col>\r\n                                                        {/* <Col md={6}>\r\n                                                            <CheckoutInternetBanking\r\n                                                                cart={events}\r\n                                                                createInternetBankingCharge={this.createInternetBankingCharge}\r\n                                                                amount={this.calculateTotal()}\r\n                                                            />\r\n                                                        </Col> */}\r\n                                                    </Row>\r\n                                                </Card.Body>\r\n                                            </Card>\r\n\r\n\r\n                                            // <PayPalButton\r\n                                            //     amount={(this.calculateTotal() * 1.05).toFixed(2)}\r\n                                            //     // amount=\"1.05\"\r\n                                            //     onSuccess={(details, data) => {\r\n                                            //         const params = {\r\n                                            //             amount: parseFloat(details.purchase_units[0].amount.value),\r\n                                            //             date_tranfer: moment(details.create_time).format('DD-MM-YYYY'),\r\n                                            //             time_tranfer: moment(details.create_time).format('HH:mm'),\r\n                                            //             order_id: data.orderID\r\n                                            //         }\r\n                                            //         // console.log('Params :::: ', params)\r\n                                            //         this.onClickConfirmPaypal.bind(params)\r\n\r\n                                            //     }}\r\n                                            //     options={{\r\n                                            //         clientId: \"AUZrJfK9XQUlcyCPmm0H_Qe7i_3aFhv9rizPpkr4am5gtdpJbNO8zX8t7I0S1XT5eh0-JVi-i9zmCIX8\",\r\n                                            //         // clientId: \"sb\", //for testing.\r\n                                            //         currency: \"THB\"\r\n                                            //     }}\r\n                                            // />\r\n\r\n\r\n\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </Form>\r\n                                <Button className=\"float-right btn-custom rounded-pill px-4 ml-2 mt-5\" onClick={this.onClickConfirm.bind()}>\r\n\r\n                                    <img\r\n                                        width={25}\r\n                                        height={20}\r\n                                        className=\"mr-1\"\r\n                                        src={iconrunningwhite}\r\n                                        alt=\"runex\"\r\n                                    />Confirm\r\n                                </Button>\r\n                                <Button variant=\"outline-secondary\" className=\"float-right rounded-pill px-4 mt-5\" onClick={this.onClickBack.bind()}>Back</Button>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Card.Body>\r\n                    : ''}\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapState (state) {\r\n    const { events } = state.eventer;\r\n    return { events };\r\n}\r\n\r\nconst actionCreators = {\r\n    addAddress: userActions.addAddress,\r\n    updateProfile: userActions.updateProfile,\r\n    regEvent: eventActions.regEvent,\r\n    regEventByPaypal: eventActions.regEventByPaypal,\r\n    product: eventActions.selectedProducts,\r\n    ticket: eventActions.selectedTicket,\r\n};\r\n\r\nconst connectedContent = connect(mapState, actionCreators)(Confirm);\r\nexport { connectedContent as Confirm }","D:\\react\\new-runex\\src\\components\\race\\Race.js",["222","223","224","225","226","227","228","229"],"import React from 'react'\r\nimport { Row, Col, Media, Card, Button, Form, FormLabel } from 'react-bootstrap'\r\nimport iconshirt from '../../images/icon-shirt.svg'\r\nimport iconshirtactive from '../../images/icon-tshirt-active.svg'\r\nimport iconmedal from '../../images/icon-medal.svg'\r\nimport iconrun from '../../images/icon-running.svg'\r\n// import iconrunning from '../../images/icon-running.svg'\r\nimport { utils } from '../../utils/utils'\r\nimport iconrunningwhite from '../../images/icon-running-white.svg'\r\nimport { IMAGE_URL } from '../../utils/constants'\r\nimport Swal from 'sweetalert2'\r\n\r\nclass Race extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            select_ticket: 'Select Distance',\r\n            select_distance: 'Select Distance',\r\n            productSize: -1,\r\n            productOnTicketSize: -1,\r\n            products: [],\r\n            productTickets: [],\r\n            size: undefined,\r\n            priceShow: 0,\r\n            selectTicket: undefined,\r\n            reload: false,\r\n            ticket: {}\r\n        };\r\n    }\r\n\r\n    // componentWillReceiveProps(nextProp){\r\n    //     const { event } = this.props\r\n    //     if (event.event !== undefined && event.every !== null) {\r\n    //         if(event.event.ticket.length > 0){\r\n    //             this.setState({ticket:event.event.ticket[0]})\r\n    //             console.log(event.event.ticket[0])\r\n    //         }\r\n    //     }\r\n    // }\r\n    onChangeTab = (step) => {\r\n        this.props.handleOrder(this.state.products, this.state.productTickets)\r\n        this.props.handleClickChange(step)\r\n    }\r\n\r\n    onChangeTicket = (e) => {\r\n        const { event, tickets } = this.props\r\n        tickets.map((item, index)=>{\r\n            if(item.id === e.target.value){\r\n                //console.log(e.target.value)\r\n                this.setState({ticket:item})\r\n                //this.setState({select_ticket:e.target.value})\r\n                this.setState({selectTicket: undefined})\r\n                //console.log(item)\r\n            }\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    onSelectedSize = (size, product, tick) => {\r\n        // const { reload } = this.state\r\n        // const data = {\r\n        //     product: product,\r\n        //     type: size.name,\r\n        //     remark: size.remark,\r\n        //     ticket: this.state.ticket\r\n        // }\r\n        // this.setState({ selectTicket: data }, () => {\r\n        //     //console.log(this.state.selectTicket)\r\n        // })\r\n        // this.setState({ reload: !reload })\r\n        const { productTickets, reload } = this.state\r\n        var arr = productTickets\r\n        var currentIndex = this.checkTicketIndex(product)\r\n        if (currentIndex !== -1) {\r\n            arr.splice(currentIndex, 1)\r\n            const item = {\r\n                product: product,\r\n                type: size.name,\r\n                price: size.price,\r\n                ticket: this.state.ticket\r\n            }\r\n            arr.push(item)\r\n        } else {\r\n            //products.splice(currentIndex, 1)\r\n            const item = {\r\n                product: product,\r\n                type: size.name,\r\n                price: size.price,\r\n                ticket: this.state.ticket\r\n            }\r\n            arr.push(item)\r\n        }\r\n        this.setState({ productTickets: arr })\r\n        this.setState({ reload: !reload })\r\n    }\r\n\r\n    onSelectedProduct = (isDeselect, item, type) => {\r\n        const { products, reload } = this.state\r\n        var arr = products\r\n        var currentIndex = this.checkProductIndex(item)\r\n        if (isDeselect) {\r\n            if (currentIndex !== -1) {\r\n                arr.splice(currentIndex, 1)\r\n            }\r\n        } else {\r\n            if (currentIndex !== -1) {\r\n                arr.splice(currentIndex, 1)\r\n                const product = {\r\n                    id: item.id,\r\n                    type: type.name,\r\n                    price: type.price,\r\n                    product: item\r\n                }\r\n                arr.push(product)\r\n            } else {\r\n                //products.splice(currentIndex, 1)\r\n                const product = {\r\n                    id: item.id,\r\n                    type: type.name,\r\n                    price: type.price,\r\n                    product: item\r\n                }\r\n                arr.push(product)\r\n            }\r\n        }\r\n        this.setState({ products: arr })\r\n        this.setState({ reload: !reload })\r\n    }\r\n\r\n    checkProductIndex = (item) => {\r\n        const { products } = this.state\r\n        var check = -1\r\n        products.map((element, index) => {\r\n            if (element.id === item.id) {\r\n                check = index\r\n            }\r\n        })\r\n        return check\r\n    }\r\n\r\n    checkProductAndSize = (item, type) => {\r\n        const { products } = this.state\r\n        var check = false\r\n        products.map((element) => {\r\n            if (element.id === item.id && element.type === type.name) {\r\n                check = true\r\n            }\r\n\r\n        })\r\n        return check\r\n    }\r\n\r\n    checkTicketIndex = (product, type) => {\r\n        const { productTickets } = this.state\r\n        var check = -1\r\n        productTickets.map((element, index) => {\r\n            if (element.product.id === product.id) {\r\n                check = index\r\n            }\r\n        })\r\n        return check\r\n        // if (selectTicket === undefined) {\r\n        //     return false\r\n        // }\r\n        // if (product.id === selectTicket.product.id && selectTicket.type === type.name) {\r\n        //     check = true\r\n        // }\r\n        // return check\r\n    }\r\n\r\n    checkProductTicket = (product, type) => {\r\n        const { productTickets } = this.state\r\n        var check = false\r\n        productTickets.map((element) => {\r\n            if (product.id === element.product.id && element.type === type.name) {\r\n                check = true\r\n            }\r\n\r\n        })\r\n        return check\r\n    }\r\n\r\n    onClickNext = () => {\r\n        const { productTickets, ticket } = this.state\r\n        if (ticket.id === undefined || ticket.id === null){\r\n            Swal.fire(\r\n                '',\r\n                'Please select distance.',\r\n                'warning'\r\n            )\r\n        }else if (ticket.product != null && productTickets.length === 0) {\r\n            Swal.fire(\r\n                '',\r\n                'Please select shirt size.',\r\n                'warning'\r\n            )\r\n        } else {\r\n            var check = 0\r\n            if (this.props.products !== null){\r\n                this.props.products.map((item) => (\r\n                    item.show ? check += 1 : check += 0\r\n                ))\r\n                if (productTickets.length === check) {\r\n                    this.props.handleClickChange(2)\r\n                    this.props.handleOrder(this.state.products, productTickets)\r\n                    \r\n                }else{\r\n                    Swal.fire(\r\n                        '',\r\n                        'Please select product on ticket.',\r\n                        'warning'\r\n                    )\r\n                }\r\n            }else if(ticket.price === 0){\r\n                var arr = productTickets\r\n                const item = {\r\n                    product: {},\r\n                    type: '',\r\n                    price: 0.00,\r\n                    ticket: ticket\r\n                }\r\n                arr.push(item)\r\n                this.setState({ productTickets: arr},()=>{\r\n                    this.props.handleClickChange(2)\r\n                    this.props.handleOrder(this.state.products, productTickets)\r\n                })\r\n            }\r\n            //this.onChangeTab.bind(this, this.props.nextTab)\r\n        }\r\n    }\r\n\r\n    onClickBack = () => {\r\n        this.props.handleClickChange(0)\r\n        //this.props.handleClickChange({ Name: \"Race detail\", isActive: false })\r\n    }\r\n\r\n    checkIsAddOn=(event)=>{\r\n        if(event.event !== null){\r\n            if (event.event.product === null || event.event.product.length === 0) {\r\n                return true\r\n            }else{\r\n                event.event.product.map((item)=>{\r\n                    if (item.status === 'sold'){\r\n                        return false\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n        return true\r\n    }\r\n\r\n    showPrice () {\r\n        console.log(this.props)\r\n        const { event } = this.props\r\n        const { products, selectTicket, ticket } = this.state\r\n        var total = 0\r\n        if (event.event !== undefined || event.event !== null) {\r\n            if (selectTicket === undefined) {\r\n                if (this.props.tickets.length > 0) {\r\n                    total = this.props.tickets[0].price\r\n                    products.map((element) => (\r\n                        total += element.price\r\n                    ))\r\n                }\r\n            } else {\r\n                total = selectTicket.ticket.price\r\n                products.map((element) => (\r\n                    total += element.price\r\n                ))\r\n            }\r\n\r\n        }\r\n        // if (total === 0) {\r\n        //     return 'ฟรี'\r\n        // }\r\n        return total\r\n    }\r\n\r\n    displayFinishedAward = (id) => {\r\n        var datas = []\r\n        if (id === '5ef2185f2fbe178b33190df0') {\r\n            datas.push(\r\n                <Media style={{marginTop:8}}>\r\n                    <img\r\n                        width={28}\r\n                        height={28}\r\n                        className=\"mr-1\"\r\n                        src={iconshirt}\r\n                        alt=\"runex\"\r\n                    />\r\n                    <Media.Body>\r\n                        <h6 className=\"mb-1 pt-1\">Finisher’s T Shirt</h6>\r\n                    </Media.Body>\r\n                </Media>\r\n            )\r\n            datas.push(\r\n                <Media style={{marginTop:8}}>\r\n                    <img\r\n                        width={28}\r\n                        height={28}\r\n                        className=\"mr-1\"\r\n                        src={iconrun}\r\n                        alt=\"runex\"\r\n                    />\r\n                    <Media.Body>\r\n                        <h6 className=\"mb-1 pt-1\">Top 100 Buf/Top 20 Team Buf</h6>\r\n                    </Media.Body>\r\n                </Media>\r\n            )\r\n            datas.push(\r\n                <Media style={{marginTop:8}}>\r\n                    <img\r\n                        width={28}\r\n                        height={28}\r\n                        className=\"mr-1\"\r\n                        src={iconmedal}\r\n                        alt=\"runex\"\r\n                    />\r\n                    <Media.Body>\r\n                        <h6 className=\"mb-1 pt-1\">Winner’s Trophy</h6>\r\n                    </Media.Body>\r\n                </Media>\r\n            )\r\n        }\r\n        return datas\r\n    }\r\n\r\n    render () {\r\n        const { productOnTicketSize, ticket } = this.state\r\n        const { event, tickets } = this.props\r\n        return (\r\n            <Card>\r\n                <Card.Body>\r\n                    <Row>\r\n                        <Col lg={5} md={12} className=\"component-event-aside\">\r\n                            <Card className=\"mb-5\">\r\n                                <Card.Img variant=\"top\" src={event ? event.cover : ''} />\r\n                                <Card.Body>\r\n                                    <h4 className=\"h4\">{event ? event.name : ''}</h4>\r\n                                    <h1 className=\"mb-0\" onChange={e => this.setState({ showPrice: e.value })}>{this.showPrice() + ' ' + event.ticket[0].currency}</h1>\r\n                                    {/* <p className=\"text-muted mb-4\">(including. postage fee)</p> */}\r\n                                    <Card.Title style={{ display: event.event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>Finisher’s Award</Card.Title>\r\n                                    <Media style={{ marginTop: 8}} hidden={event.event ? (event.is_free === true ? false : false) : false}>\r\n                                        <img\r\n                                            width={28}\r\n                                            height={28}\r\n                                            className=\"mr-1\"\r\n                                            src={iconmedal}\r\n                                            alt=\"runex\"\r\n                                        />\r\n                                        <Media.Body style={{ display: event ? (event.is_free === true ? \"none\" : \"flex\") : 'none' }}>\r\n                                            <h6 className=\"mb-1 pt-1\">Finisher's Medal</h6>\r\n                                        </Media.Body>\r\n\r\n                                    </Media>\r\n                                    { event ? this.displayFinishedAward(event.id) : '' }\r\n                                </Card.Body>\r\n                                <Card.Footer className=\"bg-white mb-3\">\r\n                                    <h6>Hurry! Registration close in</h6>\r\n                                    <ul className=\"list-group list-group-horizontal text-center\">\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>{event ? utils.convertDateApiToString(event.end_reg) : ''}<small className=\"ml-1 text-muted\"></small></h6>\r\n                                        </li>\r\n                                        {/* <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>13<small className=\"ml-1 text-muted\">days</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>7<small className=\"ml-1 text-muted\">hours.</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>45<small className=\"ml-1 text-muted\">mins.</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>15<small className=\"ml-1 text-muted\">secs</small></h6>\r\n                                        </li> */}\r\n                                    </ul>\r\n                                </Card.Footer>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col lg={7} md={12}>\r\n                            <Card.Title>Race detail</Card.Title>\r\n                            <Form className=\"mb-5\">\r\n                                <Form.Group controlId=\"formTicket\">\r\n                                    <Form.Label>Distance<span className=\"text-danger\">*</span></Form.Label>\r\n                                    <select className=\"custom-select\" onChange={this.onChangeTicket.bind()}>\r\n                                        <option value='' key='99'>{this.state.select_ticket}</option>\r\n                                        {tickets ? tickets.map((item, index) => (\r\n                                            <option value={item.id} key={index}>{item.title+' '+item.distance+ ' km.'}</option>\r\n                                        )) : ''}\r\n                                    </select>\r\n                                </Form.Group> \r\n                                {ticket.product ? event.event.product ? event.event.product.map((prod, index) => (\r\n                                        ticket.product.map((item) => (\r\n                                            (item.id === prod.id && item.show) ? (\r\n                                                <Form.Group className=\"mb-5\" key={ticket.id + index}>\r\n                                                    <Form.Label>{prod.name}<span className=\"text-danger\"></span></Form.Label>\r\n                                                    <Form.Label>{prod.detail}<span className=\"text-danger\"></span></Form.Label>\r\n                                                    <Row className=\"pirate\">\r\n                                                        {prod.type ? prod.type.map((type, index) => (\r\n                                                            <Col className=\"col-half-offset\" sm=\"2\" xs=\"2\" key={prod.id + index}>\r\n                                                                <Card style={{cursor: 'pointer', borderColor: this.checkProductTicket(prod, type) ? '#FA6400' : 'rgba(0,0,0,0.19)' }} className=\"text-center\" >\r\n                                                                    <Card.Body className=\"p-2\" style={{ color: this.checkProductTicket(prod, type) ? '#FA6400' : 'rgba(0,0,0,0.75)' }}\r\n                                                                        onClick={this.onSelectedSize.bind(this, type, prod, ticket)}>\r\n\r\n                                                                        <img\r\n                                                                            width={25}\r\n                                                                            height={20}\r\n                                                                            className=\"mr-1\"\r\n                                                                            src={this.checkProductTicket(prod, type) ? iconshirtactive : iconshirt}\r\n                                                                            alt=\"runex\"\r\n                                                                        />\r\n                                                                        <h6 className=\"card-text\">{type.name}<br></br><small>{type.remark}</small></h6>\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </Col>\r\n                                                        )) : ''}\r\n                                                    </Row>\r\n                                                </Form.Group>\r\n                                            ) : ''\r\n                                        ))\r\n                                    )) : '' : ''}\r\n                                <hr />\r\n                                <FormLabel style={{ display: event.event ? (this.checkIsAddOn(event) ? \"none\" : \"block\") : 'none' }}>Add on</FormLabel>\r\n                                {event.event ? event.event.product.map((item, index) => (\r\n                                    item.status === 'sold' ? (<Form.Group className=\"mb-5\" key={index}>\r\n\r\n                                    <Form.Label>{item.name}<span className=\"text-danger\"></span></Form.Label>\r\n                                    <Form.Label>{item.detail}<span className=\"text-danger\"></span></Form.Label>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <img\r\n                                                width={64}\r\n                                                height={64}\r\n                                                className=\"mr-3\"\r\n                                                style={{ marginBottom: 5 }}\r\n                                                src={item.image ? IMAGE_URL + item.image[0].path_url : ''}\r\n                                                alt=\"\"\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"size\">\r\n                                        {item ? item.type.map((type, index) => (\r\n                                            <Col className=\"col-half-offset\" sm=\"2\" md=\"2\" key={item.id + index}>\r\n                                                <Card style={{cursor: 'pointer', borderColor: this.checkProductAndSize(item, type) ? '#FA6400' : 'rgba(0,0,0,0.19)' }}\r\n                                                    className=\"text-center\"\r\n                                                >\r\n                                                    <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)') }}\r\n                                                        onClick={this.onSelectedProduct.bind(this, false, item, type)}>\r\n\r\n                                                        <h6 className=\"card-text\">{type.name}<br></br><small>{type.remark}</small></h6>\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </Col>\r\n                                        )) : ''}\r\n                                        {/* <Col className=\"\" sm=\"12\" md=\"2\"  key={item.id + '99'}>\r\n                                            <Card style={{ borderColor: (this.checkProductIndex(item) === -1) ? '#FA6400' : 'rgba(0,0,0,0.19)', padding: 1 }} \r\n                                            className=\"text-center\" >\r\n                                                <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)'), padding: 1 }}\r\n                                                    onClick={this.onSelectedProduct.bind(this, true, item, null)}>\r\n\r\n                                                    <h6 className=\"card-text\">ไม่ได้เลือก<br></br><small></small></h6>\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        </Col> */}\r\n                                    </Row>\r\n                                    <Row className=\"size\">\r\n                                        <Col className=\"mt-2\" sm=\"2\" xs=\"4\" key={item.id + '99'}>\r\n                                            <Card style={{cursor: 'pointer', borderColor: (this.checkProductIndex(item) === -1) ? '#FA6400' : 'rgba(0,0,0,0.19)', padding: 1 }}\r\n                                                className=\"text-center\" >\r\n                                                <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)'), padding: 1 }}\r\n                                                    onClick={this.onSelectedProduct.bind(this, true, item, null)}>\r\n\r\n                                                    <h6 className=\"card-text\">ไม่ได้เลือก<br></br><small></small></h6>\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </Form.Group>) : ''\r\n                                )) : ''}\r\n                                {/* {event.event ? event.event.product.map((product, index) => (\r\n                                    <Form.Group key={index}>\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <Media>\r\n                                                    <img\r\n                                                        width={64}\r\n                                                        height={64}\r\n                                                        className=\"mr-3\"\r\n                                                        src={product.image ? IMAGE_URL + product.image[0].path_url : ''}\r\n                                                        alt=\"Generic placeholder\"\r\n                                                    />\r\n                                                    <Media.Body>\r\n                                                        <div className=\"clearfix\">\r\n                                                            <h6 className=\"float-left\">{product.name}</h6>\r\n                                                            <h6 className=\"float-right\">Price {product.type[0].price + ' ' + (product.currency !== undefined ? product.currency : 'THB')}</h6>\r\n                                                        </div>\r\n                                                        <ul className=\"list-group list-group-horizontal-lg\" style={{ marginBottom: 8, marginRight: 8 }}>\r\n                                                            {product.type.map((item, index) => (\r\n                                                                <li key={index} className=\"list-group-item rounded-pill mr-1 py-1 mt-1\"\r\n                                                                    style={{ borderColor: (productSize === index ? '#FA6400' : 'rgba(0,0,0,0.19)'), color: (productSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)') }}\r\n                                                                    onClick={this.onSelectedProduct.bind(this, index, product)} >{item.name}</li>\r\n                                                            ))}\r\n                                                            \r\n                                                        </ul>\r\n                                                        <ul className=\"list-group list-group-horizontal-lg mt-1\">\r\n                                                            <li  className=\"list-group-item rounded-pill mr-1 py-1\"\r\n                                                                style={{ borderColor: (productSize === -1 ? '#FA6400' : 'rgba(0,0,0,0.19)'), color: (productSize === -1 ? '#FA6400' : 'rgba(0,0,0,0.75)') }}\r\n                                                                onClick={this.onSelectedProduct.bind(this, -1, product)} >ไม่ได้เลือก</li>\r\n                                                        </ul>\r\n                                                    </Media.Body>\r\n                                                </Media>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Form.Group>\r\n                                )) : ''} */}\r\n                            </Form>\r\n                            <Button className=\"float-right btn-custom rounded-pill px-4 ml-2\" onClick={this.onClickNext}>\r\n                                <img\r\n                                    width={25}\r\n                                    height={20}\r\n                                    className=\"mr-1\"\r\n                                    src={iconrunningwhite}\r\n                                    alt=\"runex\"\r\n                                />Next\r\n                                    </Button>\r\n                            <Button variant=\"outline-secondary\" className=\"float-right rounded-pill px-4\"\r\n                                onClick={this.onClickBack}>Back</Button>\r\n                            {/* <Button variant=\"light\" className=\"float-right border-1 rounded-pill px-4\" \r\n                            onClick={this.props.changeTab.bind(this, { Name: \"Race detail\", isActive: false })}>\r\n                                        Back\r\n                                    </Button> */}\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\nexport default Race","D:\\react\\new-runex\\src\\services\\regevent.service.js",["230"],"import { API_URL } from '../utils/constants'\r\nimport axios from 'axios'\r\nimport { alertActions } from '../actions'\r\nimport { alertConstants } from '../utils/constants'\r\nimport { utils } from '../utils/utils'\r\n\r\nexport const regEventService = {\r\n    regRaceEvent,\r\n    myRegEvents,\r\n    getRegEventDetail,\r\n    getPromoCodeInfo,\r\n    chargeReg,\r\n    getRegEventReport,\r\n    getRegEventReportAll,\r\n    editRegEvent,\r\n    searchPreOrder,\r\n    getAllEventActivity\r\n}\r\n\r\nfunction regRaceEvent (data) {\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n\r\n    return axios({\r\n        headers: headers,\r\n        method: \"POST\",\r\n        url: `${API_URL}/register/addRace`,\r\n        data: data\r\n    }).then(response => {\r\n        //console.log(response)\r\n        return response\r\n    }).catch(error => {\r\n        //console.log(error)\r\n        return { status: error.status, msg: \"Can not add event\" }\r\n    })\r\n\r\n}\r\n\r\nfunction chargeReg(data){\r\n    const headers = {\r\n        'Content-Type': 'multipart/form-data',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"POST\",\r\n        url: `${API_URL}/register/payment`,\r\n        data: data,\r\n    }).then(response => {\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return error\r\n    })\r\n}\r\n\r\nfunction myRegEvents() {\r\n    alertActions.error(alertConstants.LOADING)\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"GET\",\r\n        url: `${API_URL}/register/myRegEvent`\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\r\n    })\r\n}\r\n\r\nfunction getRegEventDetail(regEventID) {\r\n    alertActions.error(alertConstants.LOADING)\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"GET\",\r\n        url: `${API_URL}/register/getRegEvent/${regEventID}`\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\r\n    })\r\n}\r\n\r\nfunction getPromoCodeInfo(code) {\r\n    alertActions.error(alertConstants.LOADING)\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"GET\",\r\n        url: `${API_URL}/coupon/couponInfo/${code}`\r\n    }).then(response => {\r\n        return response\r\n    }).catch(error => {\r\n        return { code: 302, status: error.status, msg: \"code not found\" }\r\n    })\r\n}\r\n\r\nfunction getRegEventReport(data) {\r\n    alertActions.error(alertConstants.LOADING)\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"POST\",\r\n        url: `${API_URL}/register/report`,\r\n        data: data\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\r\n    })\r\n}\r\n\r\nfunction getRegEventReportAll(data) {\r\n    alertActions.error(alertConstants.LOADING)\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"POST\",\r\n        url: `${API_URL}/register/reportAll`,\r\n        data: data\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\r\n    })\r\n}\r\n\r\nfunction editRegEvent(data){\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"PUT\",\r\n        url: `${API_URL}/register/edit/${data.id}`,\r\n        data: data\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"Update register fail\" }\r\n    })\r\n}\r\n\r\nfunction searchPreOrder(data){\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        // headers: headers,\r\n        method: \"POST\",\r\n        url: `https://runex-api.thinkdev.app/api/v2/searchPreOrder`,\r\n        data: data\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        console.log(error)\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"search order fail\" }\r\n    })\r\n}\r\n\r\nfunction getAllEventActivity(data){\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"GET\",\r\n        url: `https://runex-api.thinkdev.app/api/v1/activity/getAllEventActivity/${data}`,\r\n        data: data\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        console.log(error)\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"get Activity fail\" }\r\n    })\r\n}","D:\\react\\new-runex\\src\\components\\race\\Address.js",["231","232","233","234","235","236","237","238","239","240"],"import React from 'react'\r\nimport { Row, Col, Media, Card, Button, Form } from 'react-bootstrap'\r\nimport iconmedal from '../../images/icon-medal.svg'\r\nimport ThaiAddress from \"react-thai-address\";\r\nimport iconshirt from '../../images/icon-shirt.svg'\r\nimport iconrun from '../../images/icon-running.svg'\r\nimport iconrunningwhite from '../../images/icon-running-white.svg'\r\nimport moment from 'moment'\r\nimport { utils } from '../../utils/utils'\r\nimport { IMAGE_URL } from '../../utils/constants'\r\nimport { history } from '../../store'\r\n//import { userService } from '../../services'\r\n\r\nclass Address extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')) : {},\r\n            fullname: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).fullname : '',\r\n            citycen_id: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).citycen_id : '',\r\n            phone: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).phone : '',\r\n            birthdate: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).birthdate : '',\r\n            birthdateApi: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).birthdate : '',\r\n            gender: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).gender : '',\r\n            distant: 'Select distant',\r\n            cities: [],\r\n            tumbons: [],\r\n            address: undefined,\r\n            address_no_tmp: '',\r\n            address_no: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).address[0].address : '',\r\n            province: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).address[0].province : '',\r\n            district: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).address[0].district : '',\r\n            city: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).address[0].city : '',\r\n            postcode: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).address[0].postcode : '',\r\n            validated: false,\r\n            hasAddress: false,\r\n            isVR: true,\r\n            firstname_th: '',\r\n            lastname_th: '',\r\n            firstname: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).firstname : '',\r\n            lastname: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).lastname : '',\r\n            toggleEditAddress: false\r\n        };\r\n    }\r\n    onChangeTab = (address) => {\r\n        this.props.handleAddress(address)\r\n        this.props.handleClickChange(1)\r\n    }\r\n\r\n    componentDidMount () {\r\n        const { event } = this.props\r\n        const { user } = this.state\r\n        if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\r\n            this.setState({ user: JSON.parse(sessionStorage.getItem('user_tmp')) }, () => {\r\n                //this.setState({ fullname: user.fullname })\r\n                if (user.citycen_id !== undefined) {\r\n                    this.setState({ citycen_id: user.citycen_id })\r\n                }\r\n\r\n                this.setState({ gender: user.gender })\r\n                this.setState({ phone: user.phone })\r\n                this.setState({ birthdate: user.birthdate })\r\n                this.setState({ fullname: user.fullname })\r\n                this.setState({ firstname: user.firstname })\r\n                this.setState({ lastname: user.lastname })\r\n                this.setState({ firstname_th: user.firstname_th })\r\n                this.setState({ lastname_th: user.lastname_th })\r\n                if (user.address !== undefined) {\r\n                    if (user.address.length > 0) {\r\n                        this.setState({ address_no: user.address[0].address })\r\n                        this.setState({ address_no_tmp: user.address[0].address })\r\n                        var cities = [];\r\n                        const results = ThaiAddress.search({ province: user.address[0].province });\r\n                        //console.log(results);\r\n                        results.map(item => {\r\n                            if (!cities.includes(item.city)) {\r\n                                //console.log(item.city)\r\n                                cities.push(item.city)\r\n                            }\r\n                        })\r\n                        this.setState({ province: user.address[0].province })\r\n                        this.setState({ cities: cities }, () => {\r\n                            this.setState({ district: user.address[0].district }, () => {\r\n                                var tumbons = [];\r\n                                const results = ThaiAddress.search({\r\n                                    city: this.state.district,\r\n                                    province: this.state.province\r\n                                });\r\n                                //console.log(results);\r\n                                results.map(item => {\r\n                                    if (!tumbons.includes(item.tumbon)) {\r\n                                        //console.log(item.city)\r\n                                        tumbons.push(item.tumbon);\r\n                                    }\r\n                                });\r\n                                this.setState({ tumbons: tumbons });\r\n                                this.setState({ city: user.address[0].city })\r\n                                this.setState({ postcode: user.address[0].zipcode })\r\n                            })\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n        } else {\r\n            if (user.address !== undefined && user.address !== null) {\r\n                if (user.address.length > 0) {\r\n                    const addr = user.address[0]\r\n                    this.setState({ hasAddress: true })\r\n                    this.setState({ address_no: addr.address })\r\n                    this.setState({ address_no_tmp: addr.address })\r\n                    this.setState({ province: addr.province })\r\n                    this.setState({ district: addr.district })\r\n                    this.setState({ city: addr.city })\r\n                    this.setState({ postcode: addr.zipcode })\r\n                }\r\n            }\r\n\r\n            this.setState({ fullname: user.fullname })\r\n            this.setState({ firstname: user.firstname })\r\n            this.setState({ lastname: user.lastname })\r\n            if (user.citycen_id !== undefined) {\r\n                this.setState({ citycen_id: user.citycen_id })\r\n            }\r\n\r\n            this.setState({ gender: user.gender })\r\n            this.setState({ phone: user.phone })\r\n            this.setState({ birthdate: user.birthdate })\r\n\r\n        }\r\n\r\n        //this.getEvent()\r\n    }\r\n\r\n    componentWillReceiveProps (nextProps) {\r\n        if (nextProps.event) {\r\n            const { event } = this.props\r\n            if (event !== undefined && event !== null) {\r\n                if (event !== null && event !== undefined) {\r\n                    if (event.category.id === 'Virtual Run') {\r\n                        this.setState({ isVR: true })\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    saveData = () => {\r\n        var address = {\r\n            address: this.state.address_no,\r\n            province: this.state.province,\r\n            district: this.state.district,\r\n            city: this.state.city,\r\n            zipcode: this.state.postcode\r\n        }\r\n\r\n        var data = this.state.user\r\n        // data.birthdate = utils.convertDateToApi(this.state.birthdateApi)\r\n        data.phone = this.state.phone\r\n        data.firstname_th = this.state.firstname_th\r\n        data.lastname_th = this.state.lastname_th\r\n        // data.gender = this.state.gender\r\n        // data.citycen_id = this.state.citycen_id\r\n        data.address = [address]\r\n        data.firstname = this.state.firstname\r\n        data.lastname = this.state.lastname\r\n        sessionStorage.setItem('user_tmp', JSON.stringify(data))\r\n        this.onChangeTab(address)\r\n        //userService.updateUser(data)\r\n    }\r\n\r\n    onClickNext = () => {\r\n        if (this.state.user.address.length > 0) {\r\n            const addr = this.state.user.address[0]\r\n            addr.address = this.state.address_no\r\n            addr.province = this.state.province\r\n            addr.district = this.state.district\r\n            addr.city = this.state.city\r\n            addr.zipcode = this.state.postcode\r\n\r\n            this.onChangeTab(addr)\r\n        }\r\n    }\r\n\r\n    onClickBack = (event) => {\r\n        if (event.event !== undefined) {\r\n            history.push('/preview/' + (event.event ? event.event.id : ''))\r\n        }\r\n\r\n    }\r\n\r\n    onSelectBirthdate = (e) => {\r\n        //`${this.state.toDateReg}T${this.state.toTimeReg}:00`,\r\n        //console.log(utils.convertDateToApi(e.target.value))\r\n        this.setState({ birthdateApi: utils.convertDateToApi(e.target.value) })\r\n        this.setState({ birthdate: e.target.value })\r\n    }\r\n\r\n    onSelectGender = e => {\r\n        this.setState({ gender: e.target.value })\r\n    }\r\n\r\n    onSelectedprovince = e => {\r\n        this.setState({ province: e.target.value }, () => {\r\n            var cities = [];\r\n            const results = ThaiAddress.search({ province: this.state.province });\r\n            //console.log(results);\r\n            results.map(item => {\r\n                if (!cities.includes(item.city)) {\r\n                    //console.log(item.city)\r\n                    cities.push(item.city)\r\n                }\r\n            })\r\n\r\n            this.setState({ cities: cities });\r\n            this.setState({ tumbons: [] });\r\n            this.setState({ postcode: \"\" });\r\n        });\r\n    };\r\n\r\n    onSelectedDistrict = e => {\r\n        this.setState({ district: e.target.value }, () => {\r\n            var tumbons = [];\r\n            const results = ThaiAddress.search({\r\n                city: this.state.district,\r\n                province: this.state.province\r\n            });\r\n            //console.log(results);\r\n            results.map(item => {\r\n                if (!tumbons.includes(item.tumbon)) {\r\n                    //console.log(item.city)\r\n                    tumbons.push(item.tumbon);\r\n                }\r\n            });\r\n            this.setState({ tumbons: tumbons });\r\n            this.setState({ postcode: \"\" });\r\n            this.setState({ address: undefined });\r\n        });\r\n    };\r\n\r\n    onSelectedTumbon = e => {\r\n        //console.log(e.target.value);\r\n        const results = ThaiAddress.search({\r\n            tumbon: e.target.value,\r\n            city: this.state.district,\r\n            province: this.state.province\r\n        });\r\n        //console.log(results);\r\n        results.map(item => {\r\n            if (\r\n                item.tumbon === e.target.value &&\r\n                item.city === this.state.district &&\r\n                item.province === this.state.province\r\n            ) {\r\n                this.setState({ city: item.tumbon })\r\n                this.setState({ postcode: '' + item.zipcode });\r\n                this.setState({ address: item });\r\n                //console.log(item)\r\n            }\r\n        });\r\n\r\n        //this.setState({ tumbons: tumbons });\r\n    };\r\n\r\n    renderProvinces () {\r\n        ThaiAddress.search({ province: \"\" });\r\n        var arr = [];\r\n        const results = ThaiAddress.provinces;\r\n\r\n        results.map((item) => {\r\n            arr.push(\r\n                <option key={item} value={item}>\r\n                    {item}\r\n                </option>\r\n            );\r\n        });\r\n\r\n        return arr;\r\n    }\r\n\r\n    editAddress = () => {\r\n        const { user } = this.state\r\n\r\n        if (user.address !== undefined) {\r\n            if (user.address.length > 0) {\r\n                this.setState({ address_no: user.address[0].address })\r\n                this.setState({ address_no_tmp: user.address[0].address })\r\n                var cities = [];\r\n                const results = ThaiAddress.search({ province: user.address[0].province });\r\n                //console.log(results);\r\n                results.map(item => {\r\n                    if (!cities.includes(item.city)) {\r\n                        //console.log(item.city)\r\n                        cities.push(item.city)\r\n                    }\r\n                })\r\n                this.setState({ province: user.address[0].province })\r\n                this.setState({ cities: cities }, () => {\r\n                    this.setState({ district: user.address[0].district }, () => {\r\n                        var tumbons = [];\r\n                        const results = ThaiAddress.search({\r\n                            city: this.state.district,\r\n                            province: this.state.province\r\n                        });\r\n                        //console.log(results);\r\n                        results.map(item => {\r\n                            if (!tumbons.includes(item.tumbon)) {\r\n                                //console.log(item.city)\r\n                                tumbons.push(item.tumbon);\r\n                            }\r\n                        });\r\n                        this.setState({ tumbons: tumbons });\r\n                        this.setState({ city: user.address[0].city })\r\n                        this.setState({ postcode: user.address[0].zipcode })\r\n                    })\r\n                });\r\n            }\r\n        }\r\n\r\n        this.setState({ toggleEditAddress: !this.state.toggleEditAddress })\r\n    }\r\n\r\n    onSaveAddress = () => {\r\n        this.setState({ toggleEditAddress: false })\r\n        this.setState({ address_no: this.state.address_no_tmp }, () => {\r\n            const user = this.state.user\r\n            user.address[0].address = this.state.address_no\r\n            user.address[0].province = this.state.province\r\n            user.address[0].district = this.state.district\r\n            user.address[0].city = this.state.city\r\n            user.address[0].zipcode = this.state.postcode\r\n            user.phone = this.state.phone\r\n            sessionStorage.setItem('user', JSON.stringify(user))\r\n        })\r\n    }\r\n\r\n    displayFinishedAward = (id) => {\r\n        var datas = []\r\n        if (id === '5ef2185f2fbe178b33190df0') {\r\n            datas.push(\r\n                <Media style={{ marginTop: 8 }}>\r\n                    <img\r\n                        width={28}\r\n                        height={28}\r\n                        className=\"mr-1\"\r\n                        src={iconshirt}\r\n                        alt=\"runex\"\r\n                    />\r\n                    <Media.Body>\r\n                        <h6 className=\"mb-1 pt-1\">Finisher’s T Shirt</h6>\r\n                    </Media.Body>\r\n                </Media>\r\n            )\r\n            datas.push(\r\n                <Media style={{ marginTop: 8 }}>\r\n                    <img\r\n                        width={28}\r\n                        height={28}\r\n                        className=\"mr-1\"\r\n                        src={iconrun}\r\n                        alt=\"runex\"\r\n                    />\r\n                    <Media.Body>\r\n                        <h6 className=\"mb-1 pt-1\">Top 100 Buf/Top 20 Team Buf</h6>\r\n                    </Media.Body>\r\n                </Media>\r\n            )\r\n            datas.push(\r\n                <Media style={{ marginTop: 8 }}>\r\n                    <img\r\n                        width={28}\r\n                        height={28}\r\n                        className=\"mr-1\"\r\n                        src={iconmedal}\r\n                        alt=\"runex\"\r\n                    />\r\n                    <Media.Body>\r\n                        <h6 className=\"mb-1 pt-1\">Winner’s Trophy</h6>\r\n                    </Media.Body>\r\n                </Media>\r\n            )\r\n        }\r\n        return datas\r\n    }\r\n\r\n    render () {\r\n        const { isVR, validated, birthdate, citycen_id, gender, phone, address_no, province, district, postcode, city, hasAddress } = this.state\r\n        const { event } = this.props\r\n        console.log(event)\r\n        const handleValidate = e => {\r\n            const form = e.currentTarget;\r\n            e.preventDefault();\r\n            if (form.checkValidity() === false) {\r\n                e.stopPropagation();\r\n            } else {\r\n                //\r\n                this.saveData()\r\n            }\r\n            this.setState({ validated: true });\r\n\r\n        };\r\n        return (\r\n            <Card >\r\n                <Card.Body hidden={hasAddress}>\r\n                    <Row>\r\n                        <Col md={5}>\r\n                            <Card className=\"mb-5\">\r\n                                <Card.Img variant=\"top\" src={event ?  event.cover : ''} />\r\n                                <Card.Body>\r\n                                    <h4 className=\"h4\">{event ? event.name : ''}</h4>\r\n                                    <h1 className=\"mb-0\">{event ? event.ticket[0].price + ' ' + event.ticket[0].currency : ''}</h1>\r\n                                    <p className=\"text-muted mb-4\" style={{ display: event.event ? (event.event.is_free === true ? \"none\" : \"block\") : 'none' }}>(including. postage fee)</p>\r\n                                    <Card.Title style={{ display: event.event ? (event.event.is_free === true ? \"none\" : \"block\") : 'none' }}>Finisher’s Award</Card.Title>\r\n\r\n                                    <Media style={{ marginTop: 8 }} hidden={event.event ? (event.event.is_free === true ? false : false) : false}>\r\n                                        <img\r\n                                            width={28}\r\n                                            height={28}\r\n                                            className=\"mr-1\"\r\n                                            src={iconmedal}\r\n                                            alt=\"runex\"\r\n                                        />\r\n                                        <Media.Body style={{ display: event.event ? (event.event.is_free === true ? \"none\" : \"flex\") : 'none' }}>\r\n                                            <h6 className=\"mb-1 pt-1\">Finisher's Medal</h6>\r\n                                        </Media.Body>\r\n\r\n                                    </Media>\r\n                                    {event.event ? this.displayFinishedAward(event.event.id) : ''}\r\n\r\n                                </Card.Body>\r\n                                <Card.Footer className=\"bg-white mb-3\">\r\n                                    <h6>Hurry! Registration close in</h6>\r\n                                    <ul className=\"list-group list-group-horizontal-md text-center\">\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>{event.event ? utils.convertDateApiToString(event.event.end_reg) : ''}<small className=\"ml-1 text-muted\"></small></h6>\r\n                                        </li>\r\n                                        {/* <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>13<small className=\"ml-1 text-muted\">days</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>7<small className=\"ml-1 text-muted\">hours.</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>45<small className=\"ml-1 text-muted\">mins.</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>15<small className=\"ml-1 text-muted\">secs</small></h6>\r\n                                        </li> */}\r\n                                    </ul>\r\n                                </Card.Footer>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col md={7}>\r\n                            <Card.Title>Address</Card.Title>\r\n                            <Form noValidate  className=\"mb-5\" validated={validated} onSubmit={handleValidate}>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} controlId=\"validationCustom01\">\r\n                                        <Form.Label>First name(EN)<span className=\"text-danger\">*</span></Form.Label>\r\n                                        <Form.Control\r\n                                            required\r\n                                            type=\"text\"\r\n                                            value={this.state.firstname}\r\n                                            placeholder=\"First name\"\r\n                                            onChange={e => this.setState({ firstname: e.target.value })}\r\n                                        />\r\n                                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} controlId=\"validationCustom02\">\r\n                                        <Form.Label>Last name(EN)<span className=\"text-danger\">*</span></Form.Label>\r\n                                        <Form.Control\r\n                                            required\r\n                                            type=\"text\"\r\n                                            value={this.state.lastname}\r\n                                            placeholder=\"Last name\"\r\n                                            onChange={e => this.setState({ lastname: e.target.value })}\r\n                                        />\r\n                                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                    </Form.Group>\r\n\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} controlId=\"validationCustom01\">\r\n                                        <Form.Label>ชื่อ(ไทย)<span className=\"text-danger\">*</span></Form.Label>\r\n                                        <Form.Control\r\n                                            required\r\n                                            type=\"text\"\r\n                                            placeholder=\"ชื่อ\"\r\n                                            value={this.state.firstname_th}\r\n                                            onChange={e => this.setState({ firstname_th: e.target.value })}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} controlId=\"validationCustom02\">\r\n                                        <Form.Label>นามสกุล(ไทย)<span className=\"text-danger\">*</span></Form.Label>\r\n                                        <Form.Control\r\n                                            required\r\n                                            type=\"text\"\r\n                                            placeholder=\"นามสกุล\"\r\n                                            value={this.state.lastname_th}\r\n                                            onChange={e => this.setState({ lastname_th: e.target.value })}\r\n                                        />\r\n\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n                                {/* <Form.Group controlId=\"formBasicFullname\">\r\n                                    <Form.Label>Full name<span className=\"text-danger\">*</span></Form.Label>\r\n                                    <Form.Control value={fullname} type=\"text\" placeholder=\"\" required onChange={e => this.setState({ fullname: e.target.value })} />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        Full name is required!\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group> */}\r\n                                <Form.Group controlId=\"formBasicPassport\" hidden={isVR}>\r\n                                    <Form.Label>Passport ID<span className=\"text-danger\">*</span></Form.Label>\r\n                                    <Form.Control value={citycen_id} minLength='13' type=\"number\" placeholder=\"\" required={!isVR} onChange={e => this.setState({ citycen_id: e.target.value })} />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        Passport ID is required!\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"formBasicBirthday\" hidden={isVR}>\r\n                                    <Form.Row>\r\n                                        <Col xs={7}>\r\n                                            <Form.Label>Birthday<span className=\"text-danger\">*</span></Form.Label>\r\n                                            <Form.Row>\r\n                                                <Form.Control value={utils.convertDateApiToString(birthdate)} required={!isVR} type=\"date\" placeholder=\"Birthdate\" max={moment().format(\"YYYY-MM-DD\")} onChange={this.onSelectBirthdate} />\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    Birthday is required!\r\n                                            </Form.Control.Feedback>\r\n                                            </Form.Row>\r\n\r\n                                        </Col>\r\n                                        <Col xs={5}>\r\n                                            <Form.Label>Gender<span className=\"text-danger\">*</span></Form.Label>\r\n                                            {/* <select value={this.state.mycar}>\r\n                                                        <option value=\"Ford\">Ford</option>\r\n                                                        <option value=\"Volvo\">Volvo</option>\r\n                                                        <option value=\"Fiat\">Fiat</option>\r\n                                                    </select> */}\r\n                                            <Form.Control value={gender} as=\"select\" onChange={this.onSelectGender} required={!isVR}>\r\n                                                <option value=\"\">Select gender</option>\r\n                                                <option value=\"Male\">Male</option>\r\n                                                <option value=\"Female\">Female</option>\r\n                                            </Form.Control>\r\n\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                Gender is required!\r\n                                            </Form.Control.Feedback>\r\n                                        </Col>\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"formBasicPhone\" >\r\n                                    <Form.Label>Phone<span className=\"text-danger\">*</span></Form.Label>\r\n                                    <Form.Control minLength='10' type=\"number\" placeholder=\"\" value={phone} required onChange={e => this.setState({ phone: e.target.value })} />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        Phone is required!\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"formGridAddress\">\r\n                                    <Form.Label>Address<span className=\"text-danger\">*</span></Form.Label>\r\n                                    <Form.Control as=\"textarea\" rows=\"2\" placeholder=\"\" value={address_no} required onChange={e => this.setState({ address_no: e.target.value })} />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        Address is required!\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} controlId=\"formGridCity\">\r\n                                        <Form.Label>Province<span className=\"text-danger\">*</span></Form.Label>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            className=\"form-select\"\r\n                                            onChange={this.onSelectedprovince}\r\n                                            required\r\n                                            value={province}\r\n                                        >\r\n                                            <option value=\"\">Select Province</option>\r\n                                            {this.renderProvinces()}\r\n                                        </Form.Control>\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            Province is required!\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"formGridState\">\r\n                                        <Form.Label>District<span className=\"text-danger\">*</span></Form.Label>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            className=\"form-select\"\r\n                                            onChange={this.onSelectedDistrict}\r\n                                            required\r\n                                            value={district}\r\n                                        >\r\n                                            <option value=\"\">Select District</option>\r\n                                            {this.state.cities.map((item) => (\r\n                                                <option key={item} value={item}>\r\n                                                    {item}\r\n                                                </option>\r\n                                            ))}\r\n                                        </Form.Control>\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            District is required!\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} controlId=\"formGridTumbon\">\r\n                                        <Form.Label>Sub District<span className=\"text-danger\">*</span></Form.Label>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            className=\"form-select\"\r\n                                            onChange={this.onSelectedTumbon}\r\n                                            required\r\n                                            value={city}\r\n                                        >\r\n                                            <option value=\"\">Select Sub District</option>\r\n                                            {this.state.tumbons.map((item) => (\r\n                                                <option key={item} value={item}>\r\n                                                    {item}\r\n                                                </option>\r\n                                            ))}\r\n                                        </Form.Control>\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            Sub district is required!\r\n                                        </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} controlId=\"formGridZip\">\r\n                                        <Form.Label>Postcode<span className=\"text-danger\">*</span></Form.Label>\r\n                                        <Form.Control required defaultValue={postcode} />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            Postcode is required!\r\n                                    </Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Button type=\"submit\" className=\"float-right btn-custom rounded-pill px-4 ml-2\" >\r\n                                    <img\r\n                                        width={25}\r\n                                        height={20}\r\n                                        className=\"mr-1\"\r\n                                        src={iconrunningwhite}\r\n                                        alt=\"runex\"\r\n                                    />Next\r\n                            </Button>\r\n                                <Button type='button' variant=\"outline-secondary\" className=\"float-right rounded-pill px-4\"\r\n                                    onClick={this.onClickBack.bind(this, event)}>Back</Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Body>\r\n                <Row>\r\n\r\n                </Row>\r\n                <Card.Body hidden={!hasAddress}>\r\n                    <Card.Title>Address</Card.Title>\r\n                    <div className=\"clearfix\">\r\n                        {/* <h6 style={{ marginTop: 10 }} className=\"float-left\">{fullname}</h6> */}\r\n                        <Button className=\"float-right text-color-custom\" style={{ borderColor: '#FA6400' }} variant=\"outline\" onClick={this.editAddress} >{this.state.toggleEditAddress ? 'Cancel' : 'Edit'}</Button>\r\n                    </div>\r\n                    <Card.Text>\r\n                        {this.state.firstname + ' ' + this.state.lastname}\r\n                    </Card.Text>\r\n                    <Card.Text>\r\n                        {address_no + ' ' + city + ', ' + district + ', ' + province + ' ' + postcode}\r\n                    </Card.Text>\r\n                    <Card.Text>\r\n                        {'เบอร์โทรศัพท์ : ' + this.state.phone}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n\r\n                <Card.Body hidden={!hasAddress || !this.state.toggleEditAddress}>\r\n                    <h1>Edit Address</h1>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formGridCity\">\r\n                            <Form.Label>ที่อยู่<span className=\"text-danger\">*</span></Form.Label>\r\n                            <Form.Control\r\n                                name=\"address\"\r\n                                onChange={e => this.setState({ address_no_tmp: e.target.value })}\r\n                                defaultValue={address_no}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formGridCity\">\r\n                            <Form.Label>Province<span className=\"text-danger\">*</span></Form.Label>\r\n                            <Form.Control\r\n                                as=\"select\"\r\n                                onChange={this.onSelectedprovince}\r\n                                required\r\n                                value={province}\r\n                            >\r\n                                <option value=\"\">Select Province</option>\r\n                                {this.renderProvinces()}\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Province is required!\r\n                                        </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formGridState\">\r\n                            <Form.Label>District<span className=\"text-danger\">*</span></Form.Label>\r\n                            <Form.Control\r\n                                as=\"select\"\r\n                                onChange={this.onSelectedDistrict}\r\n                                required\r\n                                value={district}\r\n                            >\r\n                                <option value=\"\">Select District</option>\r\n                                {this.state.cities.map((item) => (\r\n                                    <option key={item} value={item}>\r\n                                        {item}\r\n                                    </option>\r\n                                ))}\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                District is required!\r\n                                        </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formGridTumbon\">\r\n                            <Form.Label>City<span className=\"text-danger\">*</span></Form.Label>\r\n                            <Form.Control\r\n                                as=\"select\"\r\n                                onChange={this.onSelectedTumbon}\r\n                                required\r\n                                value={city}\r\n                            >\r\n                                <option value=\"\">Select City</option>\r\n                                {this.state.tumbons.map((item) => (\r\n                                    <option key={item} value={item}>\r\n                                        {item}\r\n                                    </option>\r\n                                ))}\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                City is required!\r\n                                        </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formGridZip\">\r\n                            <Form.Label>Postcode<span className=\"text-danger\">*</span></Form.Label>\r\n                            <Form.Control\r\n                                required\r\n                                defaultValue={postcode}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Postcode is required!\r\n                                    </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                    <Form.Group controlId=\"formBasicPhone\" >\r\n                            <Form.Label>Phone<span className=\"text-danger\">*</span></Form.Label>\r\n                            <Form.Control minLength='10' type=\"number\" placeholder=\"\" value={phone} required onChange={e => this.setState({ phone: e.target.value })} />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Phone is required!\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <Button className=\"float-right btn-custom rounded-pill px-4 ml-2 d-flex justify-content-center align-content-between\" onClick={this.onSaveAddress}>\r\n                        <i className=\"material-icons\">save</i>Save\r\n                            </Button>\r\n                </Card.Body>\r\n\r\n                <Card.Body hidden={!hasAddress || this.state.toggleEditAddress}>\r\n                    <Button className=\"float-right btn-custom rounded-pill px-4 ml-2\" onClick={this.onClickNext.bind(this)}>\r\n                        <img\r\n                            width={25}\r\n                            height={20}\r\n                            className=\"mr-1\"\r\n                            src={iconrunningwhite}\r\n                            alt=\"runex\"\r\n                        />Next\r\n                            </Button>\r\n                    <Button type='button' variant=\"outline-secondary\" className=\"float-right rounded-pill px-4\"\r\n                        onClick={this.onClickBack.bind(this, event)}>Back</Button>\r\n                </Card.Body>\r\n                {/* <div className=\"fixed\" style={{ position: 'fixed', bottom: '0', left: '0', width: '350px', height: '400px', overflowY: 'scroll', border: '3px solid #73AD21', backgroundColor: 'white', zIndex: 999 }}>\r\n                    <pre>{JSON.stringify(this.state, null, 2)}</pre>\r\n                </div> */}\r\n            </Card >\r\n        )\r\n    }\r\n}\r\nexport default Address","D:\\react\\new-runex\\src\\services\\event.service.js",[],"D:\\react\\new-runex\\src\\services\\user.service.js",["241","242","243"],"/* eslint-disable no-console */\r\nimport { API_URL } from '../utils/constants'\r\nimport { authHeader, headers } from '../utils/auth-header'\r\nimport axios from 'axios'\r\nimport { history } from '../store'\r\nimport Resizer from 'react-image-file-resizer'\r\nimport { utils } from '../utils/utils'\r\n\r\n\r\nexport const userService = {\r\n  login,\r\n  getUser,\r\n  logout,\r\n  registerWithEmailPassword,\r\n  registerWithProvider,\r\n  confirmUser,\r\n  addAddress,\r\n  updateUser,\r\n  // getUser,\r\n  // getAll,\r\n  // getById,\r\n  // update,\r\n  // delete: _delete\r\n  uploadAvatar,\r\n  forgetPass,\r\n  changePass\r\n}\r\n\r\nfunction login (data) {\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    url: API_URL + '/user/login',\r\n    data: data\r\n  }).then(response => {\r\n    console.log(response.data.token)\r\n    utils.setToken(response.data.token)\r\n    return response\r\n  }).catch(error => {\r\n    //console.log(error)\r\n    return { status: error.status, msg: \"Email or password is invalid\" }\r\n  })\r\n}\r\n\r\nfunction getUser (token) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + token\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'GET',\r\n    withCredentials: false,\r\n    url: API_URL + '/user',\r\n  }).then(response => {\r\n    if (response.status === 200) {\r\n      utils.setUser(response.data.data)\r\n    }\r\n    return response\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\nfunction logout () {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'GET',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/logout',\r\n  }).then(response => {\r\n    if (response.status === 200) {\r\n      utils.removeUser()\r\n      utils.removeToken()\r\n      history.push('/')\r\n    }\r\n    return response\r\n  }).catch(error => {\r\n  })\r\n  // remove user from local storage to log user out\r\n\r\n}\r\n\r\n// function getAll() {\r\n//   const requestOptions = {\r\n//     method: 'GET',\r\n//     headers: authHeader()\r\n//   }\r\n\r\n// }\r\n\r\n// function getById(id) {\r\n//   const requestOptions = {\r\n//     method: 'GET',\r\n//     headers: authHeader()\r\n//   }\r\n// }\r\n\r\nfunction registerWithEmailPassword (data) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/ep',\r\n    data: data\r\n  }).then(response => {\r\n    if (response.status === 200) {\r\n      utils.setToken(response.data.token)\r\n    }\r\n    return response\r\n  }).catch(error => {\r\n    return { status: error.status, msg: \"Can not register\" }\r\n  })\r\n  // return fetch(`${config.apiUrl}/users/register`, requestOptions).then(handleResponse)\r\n}\r\n\r\nfunction registerWithProvider (data) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    url: API_URL + '/user/pd',\r\n    data: data\r\n  }).then(response => {\r\n    if (response.status === 200) {\r\n      utils.setToken(response.data.token)\r\n    }\r\n    return response\r\n  }).catch(error => {\r\n    return { status: error.status, msg: \"Can not register\" }\r\n  })\r\n}\r\n\r\nfunction confirmUser (token) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + token\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'GET',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/confirm',\r\n  }).then(response => {\r\n    return response\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\nfunction updateUser (user) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'PUT',\r\n    withCredentials: false,\r\n    url: API_URL + '/user',\r\n    data: user\r\n  }).then(response => {\r\n    console.log(response)\r\n    if (response.status === 200) {\r\n      sessionStorage.setItem('user', JSON.stringify(user))\r\n    }\r\n    return response\r\n  }).catch(error => {\r\n    console.log(error)\r\n    return error\r\n  })\r\n}\r\n\r\nasync function uploadAvatar (data) {\r\n  const headers = {\r\n    'Content-Type': 'multipart/form-data',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n\r\n  const bodyFormData = new FormData()\r\n\r\n  await new Promise((resolve, reject) => {\r\n    Resizer.imageFileResizer(\r\n      data,\r\n      1000,\r\n      1000,\r\n      data && data.type.includes(\"png\") ? 'PNG' : 'JPEG',\r\n      100,\r\n      0,\r\n      blob => {\r\n        var file = new File([blob], data ? data.name : '', { type: data ? data.type : '', lastModified: Date.now() })\r\n        resolve(bodyFormData.append('upload', file));\r\n      },\r\n      'blob'\r\n    )\r\n  });\r\n\r\n  return await axios({\r\n    headers: headers,\r\n    method: \"POST\",\r\n    url: `${API_URL}/user/avatar`,\r\n    data: bodyFormData\r\n  }).then(response => {\r\n    //console.log(response)\r\n    return response\r\n  }).catch(error => {\r\n    //console.log(error)\r\n    return { status: error.status, msg: \"Can not upload image\" }\r\n  })\r\n}\r\n\r\nfunction addAddress (address) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/address',\r\n    data: address\r\n  }).then(response => {\r\n    console.log(response)\r\n    return response\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete (id) {\r\n  const requestOptions = {\r\n    method: 'DELETE',\r\n    headers: authHeader()\r\n  }\r\n\r\n  // return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse)\r\n}\r\n\r\nfunction handleResponse (response) {\r\n  return response.text().then(text => {\r\n    const data = text && JSON.parse(text)\r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        // auto logout if 401 response returned from api\r\n        logout()\r\n        // eslint-disable-next-line no-restricted-globals\r\n        location.reload(true)\r\n      }\r\n\r\n      const error = (data && data.message) || response.statusText\r\n      return Promise.reject(error)\r\n    }\r\n\r\n    return data\r\n  })\r\n}\r\n\r\nfunction forgetPass (email) {\r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    // 'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/forgotpass',\r\n    data: email\r\n  }).then(response => {\r\n    console.log(response)\r\n    return response\r\n  }).catch(error => {\r\n    console.log(error)\r\n    return error.response\r\n  })\r\n}\r\n\r\nfunction changePass (newPassword, token) {\r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': token\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/updatepass',\r\n    data: newPassword\r\n  }).then(response => {\r\n    //console.log(response)\r\n    return response\r\n  }).catch(error => {\r\n    //console.log(error)\r\n    return error.response\r\n  })\r\n}\r\n","D:\\react\\new-runex\\src\\reducers\\eventer.reducer.js",[],"D:\\react\\new-runex\\src\\reducers\\alert.reducer.js",[],"D:\\react\\new-runex\\src\\reducers\\users.reducer.js",[],"D:\\react\\new-runex\\src\\components\\race\\ConfirmPayment.js",["244","245","246"],"import React, { Component } from 'react'\r\nimport iconupload from '../../images/icon-upload-file.svg'\r\nimport { Modal, Button, Col, Row } from 'react-bootstrap'\r\nimport icon from '../../images/icon-upload-logo.svg'\r\nimport iconreceipt from '../../images/icon-receipt.svg'\r\nimport Resizer from 'react-image-file-resizer'\r\n// import logoBank2 from '../../images/b2-logo.png'\r\n\r\nexport default class ConfirmPayment extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n            setShow: false,\r\n            file: null,\r\n            uploadEnable: false,\r\n            cURL: null\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n    handleClose = () => {\r\n        this.setState({ show: false, setShow: false })\r\n    }\r\n    handleShow = () => {\r\n        this.setState({ show: true, setShow: true })\r\n    }\r\n    handleChange(event) {\r\n        var fileInput = false\r\n        if(event.target.files[0]) {\r\n            fileInput = true\r\n        }\r\n        if(fileInput) {\r\n            Resizer.imageFileResizer(\r\n                event.target.files[0],\r\n                600,\r\n                1400,\r\n                'JPEG',\r\n                100,\r\n                0,\r\n                blob => {\r\n                    var file = new File([blob], \"uploaded.jpg\", { type: \"image/jpeg\", lastModified: Date.now() })\r\n                    this.setState({file:file})\r\n                },\r\n                'blob'\r\n            )\r\n        }\r\n        \r\n        this.setState({uploadEnable:true})\r\n        \r\n        this.setState({\r\n          cURL: URL.createObjectURL(event.target.files[0])\r\n        })\r\n    }\r\n    onClickUpload=()=>{\r\n        this.props.uploadSlip(this.state.file)\r\n        this.setState({ show: false, setShow: false })\r\n    }\r\n\r\n    render () {\r\n        // const [show, setShow] = useState(false);\r\n\r\n        // const handleClose = () => setShow(false);\r\n        // const handleShow = () => setShow(true);\r\n\r\n        return (\r\n            <div>\r\n                <button type=\"button\" className=\"btn btn-outline-warning float-right rounded-pill\" onClick={this.handleShow}><img width=\"25\" height=\"20\" className=\"mr-1\" src={iconupload} alt=\"runex\" />อัปโหลดสลิป</button>\r\n                <Modal show={this.state.show} onHide={this.handleClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>แนบหลักฐานการชำระเงิน</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body className=\"text-center pt-5\">\r\n                        <Row>\r\n                            <Col md={12}>\r\n                            <img style={{ display: this.state.file  ? \"none\" : \"\" }}\r\n                                // width={25}\r\n                                height={44}\r\n                                className=\"mr-3 my-2\"\r\n                                src={iconreceipt}\r\n                            />\r\n                            <p style={{ display: this.state.file  ? \"none\" : \"\" }} className=\"text-muted mb-5\">ยังไม่มีรูปหลักฐาน</p>\r\n                            <img style={{ display: !this.state.file  ? \"none\" : \"block\" }}\r\n                                width={400}\r\n                                // height={44}\r\n                                // className=\"mr-3 my-2\"\r\n                                src={this.state.cURL}\r\n                            />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={12}>  \r\n                                <div className=\"upload-btn-wrapper\">\r\n                                    <button className=\"btn btn-outline-dark\"> <img\r\n                                        width={25}\r\n                                        height={25}\r\n                                        className=\"mr-3\"\r\n                                        src={icon}\r\n                                    />เลือกรูปภาพ</button>\r\n                                    <input type=\"file\" name=\"myfile\" onChange={this.handleChange} />\r\n                                </div>\r\n                                {/* <Button variant=\"outline-dark mt-5\">\r\n                                    \r\n                                    <img\r\n                                        width={25}\r\n                                        height={25}\r\n                                        className=\"mr-3\"\r\n                                        src={icon}\r\n                                    />เลือกรูปภาพ\r\n                                </Button> */}\r\n                            </Col>\r\n                        </Row>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                            ยกเลิก\r\n                        </Button>\r\n                        <Button variant=\"outline-warning\" disabled={!this.state.uploadEnable} onClick={this.onClickUpload.bind()}>ยืนยัน</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\react\\new-runex\\src\\utils\\auth-header.js",[],"D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\index.js",[],"D:\\react\\new-runex\\src\\reducers\\registration.reducer.js",[],"D:\\react\\new-runex\\src\\reducers\\authentication.reducer.js",[],"D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\CheckoutInternetBanking.js",[],"D:\\react\\new-runex\\src\\components\\omise-prebuilt-form\\CheckoutCreditCard.js",[],"D:\\react\\new-runex\\src\\components\\visual\\RaceEditProfile.js",["247","248","249","250","251","252","253","254","255","256","257","258","259","260"],"import React, { Component } from 'react'\r\nimport { Row, Col, Media, Card, Button, Form, Container } from 'react-bootstrap'\r\nimport iconmedal from '../../images/icon-medal.svg'\r\nimport iconshirt from '../../images/icon-shirt.svg'\r\nimport iconshirtactive from '../../images/icon-tshirt-active.svg'\r\nimport ThaiAddress from \"react-thai-address\";\r\n// import iconrunning from '../../images/icon-running.svg'\r\nimport iconrunningwhite from '../../images/icon-running-white.svg'\r\nimport { utils } from '../../utils/utils'\r\nimport { IMAGE_URL } from '../../utils/constants'\r\nimport { history } from '../../store'\r\n// import { CountryDropdown } from 'react-country-region-selector'\r\nimport Swal from 'sweetalert2'\r\nimport ReactDatePicker from 'react-datepicker'\r\n\r\nexport default class RaceProfile extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: {},\r\n            fullname: '',\r\n            citycen_id: '',\r\n            passport: '',\r\n            phone: '',\r\n            birthdate: '',\r\n            birthdateApi: '',\r\n            gender: '',\r\n            blood_type: '',\r\n            distant: 'Select distant',\r\n            cities: [],\r\n            tumbons: [],\r\n            address: undefined,\r\n            address_no_tmp: '',\r\n            address_no: '',\r\n            province: '',\r\n            district: '',\r\n            city: '',\r\n            postcode: '',\r\n            validated: false,\r\n            hasAddress: false,\r\n            isVR: true,\r\n            firstname_th: '',\r\n            lastname_th: '',\r\n            firstname: '',\r\n            lastname: '',\r\n            toggleEditAddress: false,\r\n            event: {},\r\n            select_ticket: 'ระบุระยะ, Distance',\r\n            select_distance: 'ระบุระยะ, Distance',\r\n            productSize: -1,\r\n            productOnTicketSize: -1,\r\n            products: [],\r\n            productTickets: [],\r\n            size: undefined,\r\n            priceShow: 0,\r\n            selectTicket: undefined,\r\n            reload: false,\r\n            ticket: {},\r\n            country: '',\r\n            emergency_phone: '',\r\n            emergency_contact: '',\r\n            citycen_type: '',\r\n            reciept_type: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount () {\r\n        const { ticket_options, index, event, ticket } = this.props.location.state\r\n        console.log(ticket)\r\n        const user = ticket_options[index].user_option\r\n        // const ticket = ticket_options.tickets\r\n        this.setState({ ticket: ticket })\r\n        this.setState({ event: event })\r\n        this.setState({ reciept_type: ticket_options[index].reciept_type })\r\n        this.setState({ products: ticket_options[index].product })\r\n        this.setState({ productTickets: ticket_options[index].tickets })\r\n        if (user.address !== undefined && user.address !== null) {\r\n            if (user.address.length > 0) {\r\n                const addr = user.address[0]\r\n                this.setState({ hasAddress: true })\r\n                this.setState({ address_no: addr.address })\r\n                this.setState({ address_no_tmp: addr.address })\r\n                this.setState({ province: addr.province })\r\n                this.setState({ district: addr.district })\r\n                this.setState({ city: addr.city })\r\n                this.setState({ postcode: addr.zipcode })\r\n                var cities = []\r\n                const results = ThaiAddress.search({ province: user.address[0].province });\r\n                //console.log(results);\r\n                results.map(item => {\r\n                    if (!cities.includes(item.city)) {\r\n                        //console.log(item.city)\r\n                        cities.push(item.city)\r\n                    }\r\n                })\r\n\r\n                this.setState({ cities: cities }, () => {\r\n                    this.setState({ district: addr.district }, () => {\r\n                        var tumbons = [];\r\n                        const results = ThaiAddress.search({\r\n                            city: this.state.district,\r\n                            province: this.state.province\r\n                        });\r\n                        //console.log(results);\r\n                        results.map(item => {\r\n                            if (!tumbons.includes(item.tumbon)) {\r\n                                //console.log(item.city)\r\n                                tumbons.push(item.tumbon);\r\n                            }\r\n                        })\r\n                        this.setState({ tumbons: tumbons })\r\n                    })\r\n                })\r\n            }\r\n            this.setState({ fullname: user.fullname })\r\n            this.setState({ firstname: user.firstname })\r\n            this.setState({ lastname: user.lastname })\r\n            if (user.passport !== undefined) {\r\n                this.setState({ passport: user.passport })\r\n                if (user.passport !== '') {\r\n                    this.setState({ citycen_type: 'Passport' })\r\n                } else {\r\n                    this.setState({ citycen_type: 'CiticenID' })\r\n                }\r\n            }\r\n            if (user.citycen_id !== undefined) {\r\n                this.setState({ citycen_id: user.citycen_id })\r\n                if (user.citycen_id !== '') {\r\n                    this.setState({ citycen_type: 'CiticenID' })\r\n                }\r\n            }\r\n            if (user.nationality !== undefined && user.nationality !== '') {\r\n                this.setState({ country: user.nationality })\r\n            } else {\r\n                this.setState({ country: 'Thailand' })\r\n            }\r\n            this.setState({ gender: user.gender })\r\n            this.setState({ phone: user.phone })\r\n            this.setState({ birthdate: user.birthdate })\r\n            this.setState({ birthdateApi: user.birthdate })\r\n            this.setState({ blood_type: user.blood_type })\r\n            this.setState({ emergency_contact: user.emergency_contact })\r\n            this.setState({ emergency_phone: user.emergency_phone })\r\n        }\r\n        //this.getEvent()\r\n    }\r\n\r\n    onSelectBirthdate = (e) => {\r\n        //`${this.state.toDateReg}T${this.state.toTimeReg}:00`,\r\n        this.setState({ birthdateApi: utils.convertDateToApi(e) })\r\n        this.setState({ birthdate: e })\r\n    }\r\n\r\n    onSelectGender = e => {\r\n        this.setState({ gender: e.target.value })\r\n    }\r\n\r\n    onSelectCitycen = e => {\r\n        this.setState({ citycen_type: e.target.value })\r\n    }\r\n\r\n    onChangeCitycenValue = e => {\r\n        const { citycen_type } = this.state\r\n        if (citycen_type === 'CiticenID') {\r\n            this.setState({ citycen_id: e.target.value })\r\n        } else {\r\n            this.setState({ passport: e.target.value })\r\n        }\r\n    }\r\n\r\n    onSelectBloodType = e => {\r\n        this.setState({ blood_type: e.target.value })\r\n    }\r\n\r\n    selectCountry (val) {\r\n        this.setState({ country: val });\r\n    }\r\n\r\n    selectRegion (val) {\r\n        this.setState({ region: val });\r\n    }\r\n\r\n    onSelectedprovince = e => {\r\n        this.setState({ province: e.target.value }, () => {\r\n            var cities = [];\r\n            const results = ThaiAddress.search({ province: this.state.province });\r\n            //console.log(results);\r\n            results.map(item => {\r\n                if (!cities.includes(item.city)) {\r\n                    //console.log(item.city)\r\n                    cities.push(item.city)\r\n                }\r\n            })\r\n\r\n            this.setState({ cities: cities });\r\n            this.setState({ tumbons: [] });\r\n            this.setState({ postcode: \"\" });\r\n        });\r\n    };\r\n\r\n    onSelectedDistrict = e => {\r\n        this.setState({ district: e.target.value }, () => {\r\n            var tumbons = [];\r\n            const results = ThaiAddress.search({\r\n                city: this.state.district,\r\n                province: this.state.province\r\n            });\r\n            //console.log(results);\r\n            results.map(item => {\r\n                if (!tumbons.includes(item.tumbon)) {\r\n                    //console.log(item.city)\r\n                    tumbons.push(item.tumbon);\r\n                }\r\n            });\r\n            this.setState({ tumbons: tumbons });\r\n            this.setState({ postcode: \"\" });\r\n            this.setState({ address: undefined });\r\n        });\r\n    };\r\n\r\n    onSelectedTumbon = e => {\r\n        //console.log(e.target.value);\r\n        const results = ThaiAddress.search({\r\n            tumbon: e.target.value,\r\n            city: this.state.district,\r\n            province: this.state.province\r\n        });\r\n        //console.log(results);\r\n        results.map(item => {\r\n            if (\r\n                item.tumbon === e.target.value &&\r\n                item.city === this.state.district &&\r\n                item.province === this.state.province\r\n            ) {\r\n                this.setState({ city: item.tumbon })\r\n                this.setState({ postcode: '' + item.zipcode });\r\n                this.setState({ address: item });\r\n                //console.log(item)\r\n            }\r\n        });\r\n\r\n        //this.setState({ tumbons: tumbons });\r\n    };\r\n\r\n    renderProvinces () {\r\n        ThaiAddress.search({ province: \"\" });\r\n        var arr = [];\r\n        const results = ThaiAddress.provinces;\r\n\r\n        results.map((item) => {\r\n            arr.push(\r\n                <option key={item} value={item}>\r\n                    {item}\r\n                </option>\r\n            );\r\n        });\r\n\r\n        return arr;\r\n    }\r\n\r\n    onChangeTicket = (e) => {\r\n        const { ticket } = this.props.location.state\r\n        ticket.map((item) => {\r\n            if (item.id === e.target.value) {\r\n                this.setState({ ticket: item })\r\n                //this.setState({select_ticket:e.target.value})\r\n                this.setState({ selectTicket: undefined })\r\n                this.setState({ productTickets: [] })\r\n                //console.log(item)\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    onSelectedSize = (size, product) => {\r\n        // const { reload } = this.state\r\n        // const data = {\r\n        //     product: product,\r\n        //     type: size.name,\r\n        //     remark: size.remark,\r\n        //     ticket: this.state.ticket\r\n        // }\r\n        // this.setState({ selectTicket: data }, () => {\r\n        //     //console.log(this.state.selectTicket)\r\n        // })\r\n        // this.setState({ reload: !reload })\r\n        const { productTickets, reload } = this.state\r\n        var arr = productTickets\r\n        var currentIndex = this.checkTicketIndex(product)\r\n        if (currentIndex !== -1) {\r\n            arr.splice(currentIndex, 1)\r\n            const item = {\r\n                product: product,\r\n                type: size.name,\r\n                remark: size.remark,\r\n                price: size.price,\r\n                ticket: this.state.ticket\r\n            }\r\n            arr.push(item)\r\n        } else {\r\n            //products.splice(currentIndex, 1)\r\n            const item = {\r\n                product: product,\r\n                type: size.name,\r\n                price: size.price,\r\n                remark: size.remark,\r\n                ticket: this.state.ticket\r\n            }\r\n            arr.push(item)\r\n        }\r\n        this.setState({ productTickets: arr })\r\n        this.setState({ reload: !reload })\r\n    }\r\n\r\n    onSelectedProduct = (isDeselect, item, type) => {\r\n        const { products, reload } = this.state\r\n        var arr = products\r\n        var currentIndex = this.checkProductIndex(item)\r\n        if (isDeselect) {\r\n            if (currentIndex !== -1) {\r\n                arr.splice(currentIndex, 1)\r\n            }\r\n        } else {\r\n            if (currentIndex !== -1) {\r\n                arr.splice(currentIndex, 1)\r\n                const product = {\r\n                    id: item.id,\r\n                    type: type.name,\r\n                    price: type.price,\r\n                    product: item\r\n                }\r\n                arr.push(product)\r\n            } else {\r\n                //products.splice(currentIndex, 1)\r\n                const product = {\r\n                    id: item.id,\r\n                    type: type.name,\r\n                    price: type.price,\r\n                    product: item\r\n                }\r\n                arr.push(product)\r\n            }\r\n        }\r\n        this.setState({ products: arr })\r\n        this.setState({ reload: !reload })\r\n    }\r\n\r\n    checkProductIndex = (item) => {\r\n        const { products } = this.state\r\n        var check = -1\r\n        products.map((element, index) => {\r\n            if (element.id === item.id) {\r\n                check = index\r\n            }\r\n        })\r\n        return check\r\n    }\r\n\r\n    checkProductAndSize = (item, type) => {\r\n        const { products } = this.state\r\n        var check = false\r\n        products.map((element) => {\r\n            if (element.id === item.id && element.type === type.name) {\r\n                check = true\r\n            }\r\n\r\n        })\r\n        return check\r\n    }\r\n\r\n    checkTicketIndex = (product, type) => {\r\n        const { productTickets } = this.state\r\n        var check = -1\r\n        productTickets.map((element, index) => {\r\n            if (element.product.id === product.id || element.product.reuse === product.reuse) {\r\n                check = index\r\n            }\r\n        })\r\n        return check\r\n        // if (selectTicket === undefined) {\r\n        //     return false\r\n        // }\r\n        // if (product.id === selectTicket.product.id && selectTicket.type === type.name) {\r\n        //     check = true\r\n        // }\r\n        // return check\r\n    }\r\n\r\n    checkProductTicket = (shirts) => {\r\n        const { productTickets } = this.state\r\n        var check = false\r\n        // productTickets.map((element) => {\r\n        if (shirts.id === productTickets.id) {\r\n            check = true\r\n        }\r\n\r\n        // })\r\n        return check\r\n    }\r\n\r\n    showCitycen () {\r\n        const { citycen_type, citycen_id, passport } = this.state\r\n        if (citycen_type === 'CiticenID') {\r\n            return citycen_id\r\n        } else {\r\n            return passport\r\n        }\r\n    }\r\n\r\n    showPrice () {\r\n        const { products, ticket, reciept_type } = this.state\r\n        const { event } = this.props.location.state\r\n        var total = 0\r\n        if (event.ticket !== undefined && event.ticket !== null) {\r\n            if (ticket !== undefined) {\r\n                // if (event.ticket.length > 0) {\r\n                //     total = event.ticket[0].price\r\n                //     products.map((element) => (\r\n                //         total += element.price\r\n                //     ))\r\n                // }\r\n                if (ticket.price !== undefined) {\r\n                    total = ticket.price\r\n                    products.map((element) => (\r\n                        total += element.price\r\n                    ))\r\n                }\r\n                if (reciept_type === 'postman') {\r\n                    total += 60\r\n                }\r\n            }\r\n        }\r\n        // if (total === 0) {\r\n        //     return 'ฟรี'\r\n        // }\r\n        return total\r\n    }\r\n\r\n    isSold(event) {\r\n        console.log(event)\r\n        var check = false\r\n        event.shirts.map(item => {\r\n            if (item.status === 'sold') {\r\n                check = true\r\n            }\r\n        })\r\n        return check\r\n    }\r\n\r\n    saveData = () => {\r\n        const { index, ticket_options } = this.props.location.state\r\n        // if (index === 0) {\r\n        //     var address = {\r\n        //         address: this.state.address_no,\r\n        //         province: this.state.province,\r\n        //         district: this.state.district,\r\n        //         city: this.state.city,\r\n        //         zipcode: this.state.postcode\r\n        //     }\r\n\r\n        //     var data = this.state.user\r\n        //     data.birthdate = utils.convertDateToApi(this.state.birthdateApi)\r\n        //     data.phone = this.state.phone\r\n        //     data.passport = this.state.passport\r\n        //     data.emergency_contact = this.state.emergency_contact\r\n        //     data.emergency_phone = this.state.emergency_phone\r\n        //     data.gender = this.state.gender\r\n        //     data.citycen_id = this.state.citycen_id\r\n        //     data.address = [address]\r\n        //     data.firstname = this.state.firstname\r\n        //     data.lastname = this.state.lastname\r\n        //     data.blood_type = this.state.blood_type\r\n        //     data.nationality = this.state.country\r\n        //     data.email = JSON.parse(utils.getUser()).email\r\n        //     userService.updateUser(data).then(response => {\r\n        //         if (response.status === 200) {\r\n        //             // console.log(response)\r\n        //             const { productTickets, ticket, event, products } = this.state\r\n\r\n        //             if (ticket.id === undefined || ticket.id === null) {\r\n        //                 Swal.fire(\r\n        //                     '',\r\n        //                     'Please select distance.',\r\n        //                     'warning'\r\n        //                 )\r\n        //             } else if (ticket.product != null && productTickets.length === 0) {\r\n        //                 Swal.fire(\r\n        //                     '',\r\n        //                     'Please select shirt size.',\r\n        //                     'warning'\r\n        //                 )\r\n        //             } else {\r\n        //                 var check = 0\r\n\r\n        //                 if (ticket.product !== null) {\r\n        //                     ticket.product.map((item) => (\r\n        //                         item.show ? check += 1 : check += 0\r\n        //                     ))\r\n        //                     if (productTickets.length === check) {\r\n        //                         let ticket_options = {\r\n        //                             user_option: data,\r\n        //                             product: products,\r\n        //                             tickets: productTickets,\r\n        //                             total_price: this.showPrice()\r\n        //                         }\r\n        //                         history.push({\r\n        //                             pathname: '/racesummary',\r\n        //                             state: {\r\n        //                                 ticket: productTickets,\r\n        //                                 product: products,\r\n        //                                 event: event,\r\n        //                                 ticket_options: [ticket_options],\r\n        //                                 index: index\r\n        //                             }\r\n        //                         })\r\n\r\n        //                     } else {\r\n        //                         Swal.fire(\r\n        //                             '',\r\n        //                             'Please select product on ticket.',\r\n        //                             'warning'\r\n        //                         )\r\n        //                     }\r\n        //                 } else if (ticket.price === 0) {\r\n        //                     var arr = productTickets\r\n        //                     const item = {\r\n        //                         product: {},\r\n        //                         type: '',\r\n        //                         price: 0.00,\r\n        //                         ticket: ticket\r\n        //                     }\r\n        //                     arr.push(item)\r\n        //                     this.setState({ productTickets: arr }, () => {\r\n        //                         let ticket_options = {\r\n        //                             user_option: data,\r\n        //                             product: products,\r\n        //                             tickets: productTickets,\r\n        //                             total_price: this.showPrice()\r\n        //                         }\r\n        //                         history.push({\r\n        //                             pathname: '/racesummary',\r\n        //                             state: {\r\n        //                                 ticket: ticket,\r\n        //                                 product: productTickets,\r\n        //                                 event: event,\r\n        //                                 ticket_options: ticket_options,\r\n        //                                 index: index\r\n        //                             }\r\n        //                         })\r\n        //                     })\r\n        //                 }\r\n        //             }\r\n        //         } else {\r\n        //             Swal.fire(\r\n        //                 '',\r\n        //                 'ไม่สามารถบันทึกข้อมูลได้',\r\n        //                 'warning'\r\n        //             )\r\n        //         }\r\n        //     }, error => {\r\n        //         console.log(error)\r\n        //     })\r\n        // } else {\r\n        var address = {\r\n            address: this.state.address_no,\r\n            province: this.state.province,\r\n            district: this.state.district,\r\n            city: this.state.city,\r\n            zipcode: this.state.postcode\r\n        }\r\n\r\n        var data = this.state.user\r\n        data.birthdate = utils.convertDateToApi(this.state.birthdateApi)\r\n        data.phone = this.state.phone\r\n        data.passport = this.state.passport\r\n        data.emergency_contact = this.state.emergency_contact\r\n        data.emergency_phone = this.state.emergency_phone\r\n        data.gender = this.state.gender\r\n        data.citycen_id = this.state.citycen_id\r\n        data.address = [address]\r\n        data.firstname = this.state.firstname\r\n        data.lastname = this.state.lastname\r\n        data.blood_type = this.state.blood_type\r\n        data.nationality = this.state.country\r\n        data.fullname = this.state.firstname + ' ' + this.state.lastname\r\n        var check = 0\r\n        const { productTickets, ticket, event, products } = this.state\r\n        if (ticket.id === undefined || ticket.id === null) {\r\n            Swal.fire(\r\n                '',\r\n                'Please select distance.',\r\n                'warning'\r\n            )\r\n        } else if (ticket.product != null && productTickets.length === 0) {\r\n            Swal.fire(\r\n                '',\r\n                'Please select shirt size.',\r\n                'warning'\r\n            )\r\n        } else {\r\n            if (ticket.product !== null) {\r\n                ticket.product.map((item) => (\r\n                    item.show ? check += 1 : check += 0\r\n                ))\r\n\r\n                \r\n                if (productTickets.length === check) {\r\n                    let ticket_option = {\r\n                        user_option: data,\r\n                        product: products,\r\n                        tickets: productTickets,\r\n                        total_price: this.showPrice(),\r\n                        reciept_type: this.state.reciept_type\r\n                    }\r\n                    ticket_options[index] = ticket_option\r\n                    history.push({\r\n                        pathname: '/racesummary',\r\n                        state: {\r\n                            ticket: productTickets,\r\n                            product: products,\r\n                            event: event,\r\n                            ticket_options: ticket_options,\r\n                            index: index\r\n                        }\r\n                    })\r\n\r\n                } else {\r\n                    Swal.fire(\r\n                        '',\r\n                        'Please select product on ticket.',\r\n                        'warning'\r\n                    )\r\n                }\r\n            } else if (ticket.price === 0) {\r\n                var arr = productTickets\r\n                const item = {\r\n                    product: {},\r\n                    type: '',\r\n                    price: 0.00,\r\n                    ticket: ticket\r\n                }\r\n                arr.push(item)\r\n                this.setState({ productTickets: arr }, () => {\r\n                    let ticket_option = {\r\n                        user_option: data,\r\n                        product: products,\r\n                        tickets: productTickets,\r\n                        total_price: this.showPrice(),\r\n                        reciept_type: this.state.reciept_type\r\n                    }\r\n                    ticket_options[index] = ticket_option\r\n                    history.push({\r\n                        pathname: '/racesummary',\r\n                        state: {\r\n                            ticket: ticket,\r\n                            product: productTickets,\r\n                            event: event,\r\n                            ticket_options: ticket_options,\r\n                            index: index\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            //}\r\n        }\r\n    }\r\n\r\n    onClickConfirm = () => {\r\n        this.saveData()\r\n    }\r\n\r\n    render () {\r\n        console.log(this.props)\r\n        const { validated, birthdate, gender, phone, address_no, province, district, postcode, city } = this.state\r\n        const { productOnTicketSize, blood_type, emergency_contact, emergency_phone } = this.state\r\n        const { ticket_options, event, index ,ticket} = this.props.location.state\r\n        \r\n        console.log(this.state.ticket)\r\n        const handleValidate = e => {\r\n            const form = e.currentTarget;\r\n            e.preventDefault();\r\n            if (form.checkValidity() === false) {\r\n                e.stopPropagation();\r\n            } else {\r\n                //\r\n                this.onClickConfirm()\r\n            }\r\n            this.setState({ validated: true });\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Container className=\"mt-5\" >\r\n                    <Card >\r\n                        <Card.Body>\r\n                            <Row>\r\n                                <Col md={4}>\r\n                                    <Card className=\"mb-5\">\r\n                                        <Card.Img variant=\"top\" src={event ? event.cover : ''} />\r\n                                        <Card.Body>\r\n                                            <h4 className=\"h4\">{event ? event.name : ''}</h4>\r\n                                            <p className=\"text-muted mb-4\" style={{ color: '#FA6400', display: ticket.price !== undefined ? \"block\" : 'none' }} >ราคาค่าสมัคร</p>\r\n                                            <h1 className=\"mb-0\" style={{ color: '#FA6400', display: ticket.price !== undefined ? \"block\" : 'none' }}>{this.showPrice() + ' ' + 'THB'} </h1>\r\n                                            <p className=\"text-muted mb-4\" style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>(including. postage fee)</p>\r\n                                            <Card.Title style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>Finisher’s Award</Card.Title>\r\n                                            <Media style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>\r\n                                                <img\r\n                                                    width={35}\r\n                                                    height={35}\r\n                                                    className=\"mr-1\"\r\n                                                    src={iconmedal}\r\n                                                    alt=\"runex\"\r\n                                                />\r\n                                                <Media.Body style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>\r\n                                                    <h6 className=\"mb-1 pt-1\">Finisher's Medal</h6>\r\n                                                </Media.Body>\r\n                                            </Media>\r\n                                        </Card.Body>\r\n                                        <Card.Footer className=\"bg-white mb-3\">\r\n                                            <h6>Hurry! Registration close in</h6>\r\n                                            <ul className=\"list-group list-group-horizontal-md text-center\">\r\n                                                <li className=\"list-group-item px-3 border-0\">\r\n                                                    <h6>{event ? utils.convertDateApiToString(event.end_reg) : ''}<small className=\"ml-1 text-muted\"></small></h6>\r\n                                                </li>\r\n                                                {/* <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>13<small className=\"ml-1 text-muted\">days</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>7<small className=\"ml-1 text-muted\">hours.</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>45<small className=\"ml-1 text-muted\">mins.</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>15<small className=\"ml-1 text-muted\">secs</small></h6>\r\n                                        </li> */}\r\n                                            </ul>\r\n                                        </Card.Footer>\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col md={8}>\r\n                                    <Card>\r\n                                        <Card.Body>\r\n                                            <Card.Title>แก้ไขข้อมูลผู้สมัคร คนที่ {index + 1}</Card.Title>\r\n                                            <Form className=\"mb-5\" validated={validated} onSubmit={handleValidate}>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col} controlId=\"validationCustom01\">\r\n                                                        <Form.Label>ชื่อ,Name<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            required\r\n                                                            type=\"text\"\r\n                                                            value={this.state.firstname}\r\n                                                            placeholder=\"First name\"\r\n                                                            onChange={e => this.setState({ firstname: e.target.value })}\r\n                                                        />\r\n                                                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                    <Form.Group as={Col} controlId=\"validationCustom02\">\r\n                                                        <Form.Label>นามสกุล, Last name<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            required\r\n                                                            type=\"text\"\r\n                                                            value={this.state.lastname}\r\n                                                            placeholder=\"Last name\"\r\n                                                            onChange={e => this.setState({ lastname: e.target.value })}\r\n                                                        />\r\n                                                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Group controlId=\"formBasicBirthday\">\r\n                                                    <Form.Row>\r\n                                                        <Col xs={5}>\r\n                                                            <Form.Label>บัตรประชาชน, Passport<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control value={this.state.citycen_type} as=\"select\" onChange={this.onSelectCitycen} required>\r\n                                                                <option value=\"CiticenID\">บัตรประชาชน</option>\r\n                                                                <option value=\"Passport\">Passport</option>\r\n                                                            </Form.Control>\r\n                                                        </Col>\r\n                                                        <Col xs={7}>\r\n                                                            <Form.Label>&nbsp;<span className=\"text-danger\"> </span></Form.Label>\r\n                                                            <Form.Control value={this.showCitycen()} minLength='13' type=\"number\" placeholder=\"ระบุหมายเลข, Specify number\" required onChange={this.onChangeCitycenValue} />\r\n                                                            <Form.Control.Feedback type=\"invalid\">บัตรประชาชน หรือ Passport ID is required!</Form.Control.Feedback>\r\n\r\n                                                        </Col>\r\n\r\n                                                    </Form.Row>\r\n                                                </Form.Group>\r\n                                                <Form.Group controlId=\"formBasicBirthday\">\r\n                                                    <Form.Row>\r\n                                                        <Col xs={7}>\r\n\r\n                                                            <Form.Label>เบอร์โทรศัพท์, Phone<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control minLength='10' type=\"number\" placeholder=\"เบอร์โทรศัพท์, Phone\" value={phone} required onChange={e => this.setState({ phone: e.target.value })} />\r\n                                                            <Form.Control.Feedback type=\"invalid\">เบอร์โทรศัพท์, Phone is required!</Form.Control.Feedback>\r\n\r\n                                                        </Col>\r\n                                                        <Col xs={5}>\r\n\r\n                                                            <Form.Label>เพศ, Gender<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control value={gender} as=\"select\" onChange={this.onSelectGender} required>\r\n                                                                <option value=\"\">ระบุ, Select</option>\r\n                                                                <option value=\"Male\">Male</option>\r\n                                                                <option value=\"Female\">Female</option>\r\n                                                            </Form.Control>\r\n                                                            <Form.Control.Feedback type=\"invalid\">Gender is required!</Form.Control.Feedback>\r\n\r\n                                                        </Col>\r\n                                                    </Form.Row>\r\n                                                </Form.Group>\r\n                                                <Form.Group controlId=\"formBasicBirthday\">\r\n                                                    <Form.Row>\r\n                                                        <Col xs={7}>\r\n                                                            <Form.Label>วัน เดือน ปีเกิด, Birthday <span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Row>\r\n                                                            <ReactDatePicker\r\n                                                                    // selected={utils.convertDateApiToString(birthdate)}\r\n                                                                    value={utils.convertDateApiToString(birthdate)}\r\n                                                                    onChange={this.onSelectBirthdate}\r\n                                                                    peekNextMonth\r\n                                                                    showMonthDropdown\r\n                                                                    showYearDropdown\r\n                                                                    maxDate={new Date()}\r\n                                                                    className=\"form-control\"\r\n                                                                    dropdownMode=\"select\"\r\n                                                                    placeholderText='วันที่, DD เดือน, MM ปี, YYYY'\r\n                                                                    required\r\n                                                                />\r\n                                                                {/* <Form.Control value={utils.convertDateApiToString(birthdate)} type=\"date\" placeholder=\"วันที่, DD เดือน, MM ปี, YYYY\" max={moment().format(\"YYYY-MM-DD\")} onChange={this.onSelectBirthdate} /> */}\r\n                                                                <Form.Control.Feedback type=\"invalid\">วัน เดือน ปีเกิด, Birthday  is required!</Form.Control.Feedback>\r\n                                                            </Form.Row>\r\n                                                        </Col>\r\n                                                        <Col xs={5}>\r\n                                                            <Form.Label>กรุ๊ปเลือด, Blood type<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control value={blood_type} as=\"select\" onChange={this.onSelectBloodType} required>\r\n                                                                <option value=\"\">ระบุ, Select</option>\r\n                                                                <option value=\"A\">A</option>\r\n                                                                <option value=\"B\">B</option>\r\n                                                                <option value=\"AB\">AB</option>\r\n                                                                <option value=\"O\">O</option>\r\n                                                            </Form.Control>\r\n                                                            <Form.Control.Feedback type=\"invalid\">Gender is required!</Form.Control.Feedback>\r\n                                                        </Col>\r\n                                                    </Form.Row>\r\n                                                </Form.Group>\r\n                                                {/* <Form.Group>\r\n                                                    <Form.Label>สัญชาติ, Nationality<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <Form.Row>\r\n                                                        <CountryDropdown\r\n                                                            value={country}\r\n                                                            onChange={(val) => this.selectCountry(val)}\r\n                                                            style={{\r\n                                                                backgroundColor: '#fff',\r\n                                                                color: '#3b3b3b',\r\n                                                                fontSize: 16,\r\n                                                                height: 38\r\n                                                            }} />\r\n                                                        <Form.Control.Feedback type=\"invalid\">สัญชาติ, nationality is required!</Form.Control.Feedback>\r\n                                                    </Form.Row>\r\n\r\n                                                </Form.Group> */}\r\n                                                <Form.Group controlId=\"formGridAddress\">\r\n                                                    <Form.Label>ที่อยู่, Address<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <Form.Control as=\"textarea\" rows=\"2\" placeholder=\"\" value={address_no} required onChange={e => this.setState({ address_no: e.target.value })} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">ที่อยู่, Address is required!</Form.Control.Feedback>\r\n                                                </Form.Group>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col} controlId=\"formGridCity\">\r\n                                                        <Form.Label>จังหวัด, Province<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            onChange={this.onSelectedprovince}\r\n                                                            required\r\n                                                            value={province}\r\n                                                        >\r\n                                                            <option value=\"\">Select จังหวัด, Province</option>\r\n                                                            {this.renderProvinces()}\r\n                                                        </Form.Control>\r\n\r\n                                                        <Form.Control.Feedback type=\"invalid\">จังหวัด, Province is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col} controlId=\"formGridState\">\r\n                                                        <Form.Label>อำเภอ, District<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            onChange={this.onSelectedDistrict}\r\n                                                            required\r\n                                                            value={district}\r\n                                                        >\r\n                                                            <option value=\"\">Select อำเภอ, District</option>\r\n                                                            {this.state.cities.map((item) => (\r\n                                                                <option key={item} value={item}>\r\n                                                                    {item}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </Form.Control>\r\n                                                        <Form.Control.Feedback type=\"invalid\">อำเภอ, District is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col} controlId=\"formGridTumbon\">\r\n                                                        <Form.Label>ตำบล, Sub District<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            onChange={this.onSelectedTumbon}\r\n                                                            required\r\n                                                            value={city}\r\n                                                        >\r\n                                                            <option value=\"\">Select ตำบล, Sub District</option>\r\n                                                            {this.state.tumbons.map((item) => (\r\n                                                                <option key={item} value={item}>\r\n                                                                    {item}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </Form.Control>\r\n                                                        <Form.Control.Feedback type=\"invalid\">ตำบล, Sub District is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col} controlId=\"formGridZip\">\r\n                                                        <Form.Label>รหัสไปรษณีย์, Postcode<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control required defaultValue={postcode} />\r\n                                                        <Form.Control.Feedback type=\"invalid\">Postcode is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n                                                <hr color='#FA6400'></hr>\r\n\r\n                                                <Form.Group controlId=\"formTicket\">\r\n                                                    <Form.Label>ระบุระยะ, Distance<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <select value={ticket.id} className=\"custom-select\" onChange={this.onChangeTicket.bind()}>\r\n                                                        <option value='' key='99'>{this.state.select_ticket}</option>\r\n                                                        {ticket !== undefined ? ticket.map((item, key) => (\r\n                                                            item.id===ticket_options[index].tickets.id ?<option selected value={item.id} key={key}>{item.title + ' ' + item.distance + ' km.'}</option>: \r\n                                                            <option value={item.id} key={key}>{item.title + ' ' + item.distance + ' km.'}</option>\r\n                                                        )) : ''}\r\n                                                    </select>\r\n                                                </Form.Group>\r\n                                                <Form.Group className=\"mb-5\">\r\n                                                    <Form.Label> <span className=\"text-danger\"></span></Form.Label>\r\n                                                    {/* <Form.Label>{prod.detail}<span className=\"text-danger\"></span></Form.Label> */}\r\n                                                    <Row className=\"pirate\">\r\n\r\n                                                        {event.shirts ? event.shirts.map((prod, index) => (\r\n                                                            (event.shirts.length === index) ? (\r\n                                                                <Col className=\"col-half-offset\" sm=\"2\" xs=\"2\" key={prod.id + index}>\r\n                                                                    <Card key={prod.id + index} style={{ cursor: 'pointer', borderColor: this.checkProductTicket(prod) ? '#FA6400' : 'rgba(0,0,0,0.19)' }} className=\"text-center mt-1\" >\r\n                                                                        <Card.Body className=\"p-2\" style={{ color: this.checkProductTicket(prod) ? '#FA6400' : 'rgba(0,0,0,0.75)' }}\r\n                                                                            onClick={this.onSelectedSize.bind(this, prod)}>\r\n\r\n                                                                            <img\r\n                                                                                width={25}\r\n                                                                                height={20}\r\n                                                                                className=\"mr-1\"\r\n                                                                                src={this.checkProductTicket(prod) ? iconshirtactive : iconshirt}\r\n                                                                                alt=\"runex\"\r\n                                                                            />\r\n                                                                            <h6 className=\"card-text\">{prod.size}<br></br><small>{prod.chest}</small></h6>\r\n                                                                        </Card.Body>\r\n                                                                    </Card>\r\n                                                                </Col>\r\n                                                            ) : (\r\n                                                                    <Col className=\"col-half-offset\" sm=\"2\" xs=\"2\" key={prod.id + index}>\r\n                                                                        <Card key={prod.id + index} style={{ cursor: 'pointer', borderColor: this.checkProductTicket(prod) ? '#FA6400' : 'rgba(0,0,0,0.19)' }} className=\"text-center mt-1\" >\r\n                                                                            <Card.Body className=\"p-2\" style={{ color: this.checkProductTicket(prod) ? '#FA6400' : 'rgba(0,0,0,0.75)' }}\r\n                                                                                onClick={this.onSelectedSize.bind(this, prod)}>\r\n\r\n                                                                                <img\r\n                                                                                    width={25}\r\n                                                                                    height={20}\r\n                                                                                    className=\"mr-1\"\r\n                                                                                    src={this.checkProductTicket(prod) ? iconshirtactive : iconshirt}\r\n                                                                                    alt=\"runex\"\r\n                                                                                />\r\n                                                                                <h6 className=\"card-text\">{prod.size}<br></br><small>{prod.chest}</small></h6>\r\n                                                                            </Card.Body>\r\n                                                                        </Card>\r\n                                                                    </Col>\r\n                                                                )\r\n                                                        )) : ''}\r\n                                                    </Row>\r\n                                                    {/* <Row className=\"size\">\r\n                                                        <Col className=\"mt-2\" sm=\"2\" xs=\"4\" key={item.id + '99'}>\r\n                                                            <Card style={{ cursor: 'pointer', borderColor: (this.checkProductIndex(item) === -1) ? '#FA6400' : 'rgba(0,0,0,0.19)', padding: 1 }}\r\n                                                                className=\"text-center\" >\r\n                                                                <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)'), padding: 1 }}\r\n                                                                    onClick={this.onSelectedProduct.bind(this, true, item, null)}>\r\n\r\n                                                                    <h6 className=\"card-text\">ไม่ได้เลือก<br></br><small></small></h6>\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                        </Col>\r\n                                                    </Row> */}\r\n                                                </Form.Group>\r\n                                                {/* //     ) : ''\r\n                                                    // ))\r\n                                                )) : '' : ''} */}\r\n                                                <Form.Row>\r\n                                                    <Form.Label style={{ display: event.shirts ? (!this.isSold(event) ? \"block\" : \"block\") : 'none' }}>ซื้อสินค้าเพิ่มเติม</Form.Label>\r\n                                                    {event.shirts ? event.shirts.map((item, index) => (\r\n                                                        item.status === 'sold' ? (\r\n                                                            <Form.Group className=\"mb-5\" key={index}>\r\n                                                                {/* <Form.Label>{item.name}<span className=\"text-danger\"></span></Form.Label>\r\n                                                            <Form.Label>{item.detail}<span className=\"text-danger\"></span></Form.Label> */}\r\n                                                                <Row>\r\n                                                                    <Col>\r\n                                                                        <img\r\n                                                                            width={64}\r\n                                                                            height={64}\r\n                                                                            className=\"mr-3\"\r\n                                                                            style={{ marginBottom: 5 }}\r\n                                                                            src={item.image ? item.image[0].path_url : ''}\r\n                                                                            alt=\"\"\r\n                                                                        />\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                                {/* <Row className=\"size\">\r\n                                                                {item ? item.type.map((type, index) => (\r\n                                                                    <Col className=\"col-half-offset\" sm=\"2\" md=\"2\" key={item.id + index}>\r\n                                                                        <Card style={{ cursor: 'pointer', borderColor: this.checkProductAndSize(item, type) ? '#FA6400' : 'rgba(0,0,0,0.19)' }}\r\n                                                                            className=\"text-center\"\r\n                                                                        >\r\n                                                                            <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)') }}\r\n                                                                                onClick={this.onSelectedProduct.bind(this, false, item, type)}>\r\n\r\n                                                                                <h6 className=\"card-text\">{type.name}<br></br><small>{type.remark}</small></h6>\r\n                                                                            </Card.Body>\r\n                                                                        </Card>\r\n                                                                    </Col>\r\n                                                                )) : ''}\r\n                                                            </Row> */}\r\n                                                                {/* <Row className=\"size\">\r\n                                                                <Col className=\"mt-2\" sm=\"2\" xs=\"4\" key={item.id + '99'}>\r\n                                                                    <Card style={{ cursor: 'pointer', borderColor: (this.checkProductIndex(item) === -1) ? '#FA6400' : 'rgba(0,0,0,0.19)', padding: 1 }}\r\n                                                                        className=\"text-center\" >\r\n                                                                        <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)'), padding: 1 }}\r\n                                                                            onClick={this.onSelectedProduct.bind(this, true, item, null)}>\r\n\r\n                                                                            <h6 className=\"card-text\">ไม่ได้เลือก<br></br><small></small></h6>\r\n                                                                        </Card.Body>\r\n                                                                    </Card>\r\n                                                                </Col>\r\n                                                            </Row> */}\r\n\r\n                                                            </Form.Group>) : ''\r\n                                                    )) : ''}\r\n                                                </Form.Row>\r\n\r\n                                                <fieldset>\r\n                                                    <Form.Group as={Row}>\r\n\r\n                                                        <Col sm={10}>\r\n                                                            <Form.Label>รูปแบบการจัดส่ง , Shipping<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Check\r\n                                                                type=\"radio\"\r\n                                                                label={'รับเสื้อที่หน้างาน ' + event.title}\r\n                                                                name=\"shippingRadios\"\r\n                                                                id=\"RecieptMyself\"\r\n                                                                defaultChecked={true}\r\n                                                                onClick={() => this.setState({ reciept_type: 'yourself' })}\r\n                                                            />\r\n                                                            <Form.Check\r\n                                                                type=\"radio\"\r\n                                                                label='รับเสื้อทางไปรษณีย์ (ค่าจัดส่ง 60  บาท)'\r\n                                                                name=\"shippingRadios\"\r\n                                                                id=\"RecieptPost\"\r\n                                                                onClick={() => this.setState({ reciept_type: 'postman' })}\r\n                                                                style={{ display: event ? (!event.isSendShirtByPost || utils.isAfterDate(event.post_end_date) ? \"none\" : \"block\") : 'none' }}\r\n                                                            />\r\n                                                        </Col>\r\n                                                    </Form.Group>\r\n                                                </fieldset>\r\n\r\n                                                {/* {if(event.catagory!==\"VR\")}  */}\r\n                                                {event.category !== \"VR\" ?\r\n                                                    <><hr color='#FA6400'></hr>\r\n                                                        <Form.Group controlId=\"formEmergencyContact\">\r\n                                                            <Form.Label>ชื่อผู้ติดต่อฉุกเฉิน, Emergency contact list<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            {event.category !== \"VR\" ? <Form.Control type=\"text\" placeholder=\"ชื่อผู้ติดต่อฉุกเฉิน, Emergency contact\" value={emergency_contact} required onChange={e => this.setState({ emergency_contact: e.target.value })} /> : <Form.Control type=\"text\" placeholder=\"ชื่อผู้ติดต่อฉุกเฉิน, Emergency contact\" value={emergency_contact} onChange={e => this.setState({ emergency_contact: e.target.value })} />}\r\n                                                            <Form.Control.Feedback type=\"invalid\">ชื่อผู้ติดต่อฉุกเฉิน, Emergency contact is required!</Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n                                                        {/* {(event.catagory === \"VR\" ? required:'')} */}\r\n                                                        <Form.Group controlId=\"formEmergencyPhone\">\r\n                                                            <Form.Label>เบอร์โทรผู้ติดต่อฉุกเฉิน, Emergency contact number<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            {event.category !== \"VR\" ? <Form.Control type=\"text\" placeholder=\"เบอร์โทรผู้ติดต่อฉุกเฉย, Emergency contact number\" value={emergency_phone} required onChange={e => this.setState({ emergency_phone: e.target.value })} /> : <Form.Control type=\"text\" placeholder=\"เบอร์โทรผู้ติดต่อฉุกเฉย, Emergency contact number\" value={emergency_phone} onChange={e => this.setState({ emergency_phone: e.target.value })} />}\r\n\r\n                                                            <Form.Control.Feedback type=\"invalid\">เบอร์โทรผู้ติดต่อฉุกเฉิน, Emergency contact number is required!</Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n                                                    </>\r\n                                                    : \"\"}\r\n\r\n\r\n\r\n\r\n                                                <Row className=\"justify-content-md-center\">\r\n                                                    <Col md={\"auto\"} sm={\"auto\"}>\r\n                                                        <Button type=\"submit\" className=\"btn-custom rounded-pill px-4 ml-2\" >\r\n                                                            <img\r\n                                                                width={25}\r\n                                                                height={20}\r\n                                                                className=\"mr-1\"\r\n                                                                src={iconrunningwhite}\r\n                                                                alt=\"runex\"\r\n                                                            />ยืนยัน</Button>\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                                {/* <Button type='button' variant=\"outline-secondary\" className=\"float-right rounded-pill px-4\"\r\n                                    onClick={this.onClickBack.bind(this, event)}>Back</Button> */}\r\n                                            </Form>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\react\\new-runex\\src\\components\\visual\\index.js",[],"D:\\react\\new-runex\\src\\components\\visual\\AddOtherPerson.js",["261","262","263","264","265","266","267","268","269","270","271"],{"ruleId":"272","replacedBy":"273"},{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","severity":1,"message":"277","line":105,"column":11,"nodeType":"278","messageId":"279","endLine":105,"endColumn":16},{"ruleId":"276","severity":1,"message":"280","line":50,"column":7,"nodeType":"278","messageId":"279","endLine":50,"endColumn":11},{"ruleId":"276","severity":1,"message":"281","line":4,"column":8,"nodeType":"278","messageId":"279","endLine":4,"endColumn":23},{"ruleId":"276","severity":1,"message":"282","line":6,"column":10,"nodeType":"278","messageId":"279","endLine":6,"endColumn":19},{"ruleId":"283","severity":1,"message":"284","line":27,"column":37,"nodeType":"285","messageId":"286","endLine":27,"endColumn":39},{"ruleId":"276","severity":1,"message":"287","line":35,"column":33,"nodeType":"278","messageId":"279","endLine":35,"endColumn":40},{"ruleId":"276","severity":1,"message":"288","line":35,"column":57,"nodeType":"278","messageId":"279","endLine":35,"endColumn":69},{"ruleId":"283","severity":1,"message":"284","line":160,"column":46,"nodeType":"285","messageId":"286","endLine":160,"endColumn":48},{"ruleId":"276","severity":1,"message":"289","line":227,"column":24,"nodeType":"278","messageId":"279","endLine":227,"endColumn":30},{"ruleId":"276","severity":1,"message":"290","line":227,"column":32,"nodeType":"278","messageId":"279","endLine":227,"endColumn":46},{"ruleId":"291","severity":1,"message":"292","line":240,"column":173,"nodeType":"293","messageId":"294","endLine":240,"endColumn":174},{"ruleId":"276","severity":1,"message":"295","line":3,"column":10,"nodeType":"278","messageId":"279","endLine":3,"endColumn":22},{"ruleId":"276","severity":1,"message":"282","line":11,"column":10,"nodeType":"278","messageId":"279","endLine":11,"endColumn":19},{"ruleId":"276","severity":1,"message":"296","line":13,"column":24,"nodeType":"278","messageId":"279","endLine":13,"endColumn":35},{"ruleId":"283","severity":1,"message":"284","line":96,"column":34,"nodeType":"285","messageId":"286","endLine":96,"endColumn":36},{"ruleId":"283","severity":1,"message":"284","line":111,"column":42,"nodeType":"285","messageId":"286","endLine":111,"endColumn":44},{"ruleId":"283","severity":1,"message":"284","line":221,"column":30,"nodeType":"285","messageId":"286","endLine":221,"endColumn":32},{"ruleId":"283","severity":1,"message":"284","line":242,"column":30,"nodeType":"285","messageId":"286","endLine":242,"endColumn":32},{"ruleId":"283","severity":1,"message":"284","line":262,"column":26,"nodeType":"285","messageId":"286","endLine":262,"endColumn":28},{"ruleId":"283","severity":1,"message":"284","line":283,"column":28,"nodeType":"285","messageId":"286","endLine":283,"endColumn":30},{"ruleId":"283","severity":1,"message":"284","line":295,"column":46,"nodeType":"285","messageId":"286","endLine":295,"endColumn":48},{"ruleId":"276","severity":1,"message":"297","line":311,"column":17,"nodeType":"278","messageId":"279","endLine":311,"endColumn":31},{"ruleId":"283","severity":1,"message":"284","line":379,"column":39,"nodeType":"285","messageId":"286","endLine":379,"endColumn":41},{"ruleId":"283","severity":1,"message":"284","line":390,"column":32,"nodeType":"285","messageId":"286","endLine":390,"endColumn":34},{"ruleId":"283","severity":1,"message":"284","line":402,"column":45,"nodeType":"285","messageId":"286","endLine":402,"endColumn":47},{"ruleId":"276","severity":1,"message":"298","line":440,"column":24,"nodeType":"278","messageId":"279","endLine":440,"endColumn":31},{"ruleId":"283","severity":1,"message":"284","line":462,"column":31,"nodeType":"285","messageId":"286","endLine":462,"endColumn":33},{"ruleId":"276","severity":1,"message":"299","line":497,"column":41,"nodeType":"278","messageId":"279","endLine":497,"endColumn":49},{"ruleId":"300","severity":1,"message":"301","line":506,"column":40,"nodeType":"293","messageId":"302","endLine":506,"endColumn":42},{"ruleId":"276","severity":1,"message":"303","line":635,"column":39,"nodeType":"278","messageId":"279","endLine":635,"endColumn":49},{"ruleId":"276","severity":1,"message":"304","line":636,"column":17,"nodeType":"278","messageId":"279","endLine":636,"endColumn":36},{"ruleId":"276","severity":1,"message":"305","line":636,"column":58,"nodeType":"278","messageId":"279","endLine":636,"endColumn":65},{"ruleId":"291","severity":1,"message":"292","line":664,"column":175,"nodeType":"293","messageId":"294","endLine":664,"endColumn":176},{"ruleId":"306","severity":1,"message":"307","line":135,"column":5,"nodeType":"308","endLine":135,"endColumn":28},{"ruleId":"306","severity":1,"message":"307","line":136,"column":5,"nodeType":"308","endLine":136,"endColumn":28},{"ruleId":"276","severity":1,"message":"309","line":185,"column":13,"nodeType":"278","messageId":"279","endLine":185,"endColumn":21},{"ruleId":"276","severity":1,"message":"310","line":70,"column":10,"nodeType":"278","messageId":"279","endLine":70,"endColumn":24},{"ruleId":"276","severity":1,"message":"311","line":157,"column":12,"nodeType":"278","messageId":"279","endLine":157,"endColumn":19},{"ruleId":"276","severity":1,"message":"312","line":158,"column":12,"nodeType":"278","messageId":"279","endLine":158,"endColumn":19},{"ruleId":"276","severity":1,"message":"313","line":9,"column":10,"nodeType":"278","messageId":"279","endLine":9,"endColumn":17},{"ruleId":"314","severity":1,"message":"315","line":63,"column":198,"nodeType":"316","endLine":63,"endColumn":228},{"ruleId":"314","severity":1,"message":"315","line":63,"column":229,"nodeType":"316","endLine":63,"endColumn":246},{"ruleId":"276","severity":1,"message":"317","line":70,"column":10,"nodeType":"278","messageId":"279","endLine":70,"endColumn":18},{"ruleId":"276","severity":1,"message":"318","line":75,"column":9,"nodeType":"278","messageId":"279","endLine":75,"endColumn":23},{"ruleId":"319","severity":1,"message":"320","line":397,"column":36,"nodeType":"321","messageId":"322","endLine":397,"endColumn":37},{"ruleId":"276","severity":1,"message":"323","line":46,"column":17,"nodeType":"278","messageId":"279","endLine":46,"endColumn":22},{"ruleId":"283","severity":1,"message":"284","line":47,"column":34,"nodeType":"285","messageId":"286","endLine":47,"endColumn":36},{"ruleId":"283","severity":1,"message":"284","line":134,"column":39,"nodeType":"285","messageId":"286","endLine":134,"endColumn":41},{"ruleId":"283","severity":1,"message":"284","line":145,"column":32,"nodeType":"285","messageId":"286","endLine":145,"endColumn":34},{"ruleId":"283","severity":1,"message":"284","line":157,"column":45,"nodeType":"285","messageId":"286","endLine":157,"endColumn":47},{"ruleId":"283","severity":1,"message":"284","line":175,"column":38,"nodeType":"285","messageId":"286","endLine":175,"endColumn":40},{"ruleId":"283","severity":1,"message":"324","line":243,"column":47,"nodeType":"285","messageId":"325","endLine":243,"endColumn":49},{"ruleId":"276","severity":1,"message":"289","line":257,"column":41,"nodeType":"278","messageId":"279","endLine":257,"endColumn":47},{"ruleId":"276","severity":1,"message":"326","line":174,"column":11,"nodeType":"278","messageId":"279","endLine":174,"endColumn":18},{"ruleId":"276","severity":1,"message":"282","line":10,"column":10,"nodeType":"278","messageId":"279","endLine":10,"endColumn":19},{"ruleId":"276","severity":1,"message":"323","line":51,"column":17,"nodeType":"278","messageId":"279","endLine":51,"endColumn":22},{"ruleId":"283","severity":1,"message":"284","line":75,"column":42,"nodeType":"285","messageId":"286","endLine":75,"endColumn":44},{"ruleId":"283","severity":1,"message":"284","line":90,"column":50,"nodeType":"285","messageId":"286","endLine":90,"endColumn":52},{"ruleId":"283","severity":1,"message":"284","line":208,"column":30,"nodeType":"285","messageId":"286","endLine":208,"endColumn":32},{"ruleId":"283","severity":1,"message":"284","line":229,"column":30,"nodeType":"285","messageId":"286","endLine":229,"endColumn":32},{"ruleId":"283","severity":1,"message":"284","line":249,"column":26,"nodeType":"285","messageId":"286","endLine":249,"endColumn":28},{"ruleId":"283","severity":1,"message":"284","line":270,"column":28,"nodeType":"285","messageId":"286","endLine":270,"endColumn":30},{"ruleId":"283","severity":1,"message":"284","line":291,"column":34,"nodeType":"285","messageId":"286","endLine":291,"endColumn":36},{"ruleId":"283","severity":1,"message":"284","line":306,"column":42,"nodeType":"285","messageId":"286","endLine":306,"endColumn":44},{"ruleId":"276","severity":1,"message":"327","line":243,"column":10,"nodeType":"278","messageId":"279","endLine":243,"endColumn":17},{"ruleId":"276","severity":1,"message":"328","line":244,"column":9,"nodeType":"278","messageId":"279","endLine":244,"endColumn":23},{"ruleId":"276","severity":1,"message":"329","line":252,"column":10,"nodeType":"278","messageId":"279","endLine":252,"endColumn":24},{"ruleId":"330","severity":1,"message":"331","line":75,"column":29,"nodeType":"332","endLine":80,"endColumn":31},{"ruleId":"330","severity":1,"message":"331","line":82,"column":29,"nodeType":"332","endLine":87,"endColumn":31},{"ruleId":"330","severity":1,"message":"331","line":93,"column":79,"nodeType":"332","endLine":98,"endColumn":39},{"ruleId":"276","severity":1,"message":"282","line":10,"column":10,"nodeType":"278","messageId":"279","endLine":10,"endColumn":19},{"ruleId":"283","severity":1,"message":"284","line":91,"column":34,"nodeType":"285","messageId":"286","endLine":91,"endColumn":36},{"ruleId":"283","severity":1,"message":"284","line":106,"column":42,"nodeType":"285","messageId":"286","endLine":106,"endColumn":44},{"ruleId":"283","severity":1,"message":"284","line":189,"column":30,"nodeType":"285","messageId":"286","endLine":189,"endColumn":32},{"ruleId":"283","severity":1,"message":"284","line":210,"column":30,"nodeType":"285","messageId":"286","endLine":210,"endColumn":32},{"ruleId":"283","severity":1,"message":"284","line":230,"column":26,"nodeType":"285","messageId":"286","endLine":230,"endColumn":28},{"ruleId":"283","severity":1,"message":"284","line":251,"column":28,"nodeType":"285","messageId":"286","endLine":251,"endColumn":30},{"ruleId":"283","severity":1,"message":"284","line":264,"column":27,"nodeType":"285","messageId":"286","endLine":264,"endColumn":29},{"ruleId":"283","severity":1,"message":"284","line":353,"column":39,"nodeType":"285","messageId":"286","endLine":353,"endColumn":41},{"ruleId":"283","severity":1,"message":"284","line":364,"column":32,"nodeType":"285","messageId":"286","endLine":364,"endColumn":34},{"ruleId":"283","severity":1,"message":"284","line":376,"column":45,"nodeType":"285","messageId":"286","endLine":376,"endColumn":47},{"ruleId":"283","severity":1,"message":"284","line":444,"column":31,"nodeType":"285","messageId":"286","endLine":444,"endColumn":33},{"ruleId":"276","severity":1,"message":"304","line":677,"column":17,"nodeType":"278","messageId":"279","endLine":677,"endColumn":36},{"ruleId":"291","severity":1,"message":"292","line":706,"column":175,"nodeType":"293","messageId":"294","endLine":706,"endColumn":176},{"ruleId":"283","severity":1,"message":"284","line":113,"column":30,"nodeType":"285","messageId":"286","endLine":113,"endColumn":32},{"ruleId":"283","severity":1,"message":"284","line":134,"column":30,"nodeType":"285","messageId":"286","endLine":134,"endColumn":32},{"ruleId":"283","severity":1,"message":"284","line":154,"column":26,"nodeType":"285","messageId":"286","endLine":154,"endColumn":28},{"ruleId":"283","severity":1,"message":"284","line":175,"column":28,"nodeType":"285","messageId":"286","endLine":175,"endColumn":30},{"ruleId":"283","severity":1,"message":"284","line":188,"column":28,"nodeType":"285","messageId":"286","endLine":188,"endColumn":30},{"ruleId":"276","severity":1,"message":"297","line":203,"column":17,"nodeType":"278","messageId":"279","endLine":203,"endColumn":31},{"ruleId":"283","severity":1,"message":"284","line":269,"column":39,"nodeType":"285","messageId":"286","endLine":269,"endColumn":41},{"ruleId":"283","severity":1,"message":"284","line":280,"column":32,"nodeType":"285","messageId":"286","endLine":280,"endColumn":34},{"ruleId":"283","severity":1,"message":"284","line":292,"column":45,"nodeType":"285","messageId":"286","endLine":292,"endColumn":47},{"ruleId":"283","severity":1,"message":"284","line":360,"column":31,"nodeType":"285","messageId":"286","endLine":360,"endColumn":33},{"ruleId":"291","severity":1,"message":"292","line":508,"column":175,"nodeType":"293","messageId":"294","endLine":508,"endColumn":176},"no-native-reassign",["333"],"no-negated-in-lhs",["334"],"no-unused-vars","'style' is assigned a value but never used.","Identifier","unusedVar","'Race' is assigned a value but never used.","'iconshirtactive' is defined but never used.","'IMAGE_URL' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'product' is assigned a value but never used.","'reciept_type' is assigned a value but never used.","'ticket' is assigned a value but never used.","'ticket_options' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'createLogger' is defined but never used.","'userService' is defined but never used.","'productTickets' is assigned a value but never used.","'tickets' is assigned a value but never used.","'products' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","'citycen_id' is assigned a value but never used.","'productOnTicketSize' is assigned a value but never used.","'country' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'regEvent' is assigned a value but never used.","'updateRegEvent' is defined but never used.","'success' is defined but never used.","'failure' is defined but never used.","'connect' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'mapState' is defined but never used.","'actionCreators' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'event' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'headers' is assigned a value but never used.","'_delete' is defined but never used.","'requestOptions' is assigned a value but never used.","'handleResponse' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]