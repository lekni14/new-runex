[{"/Users/idever/Documents/src/GitHub/new-runex/src/index.js":"1","/Users/idever/Documents/src/GitHub/new-runex/src/App.js":"2","/Users/idever/Documents/src/GitHub/new-runex/src/reportWebVitals.js":"3","/Users/idever/Documents/src/GitHub/new-runex/src/serviceWorker.js":"4","/Users/idever/Documents/src/GitHub/new-runex/src/utils/constants.js":"5","/Users/idever/Documents/src/GitHub/new-runex/src/components/RaceRegister.js":"6","/Users/idever/Documents/src/GitHub/new-runex/src/components/visual/RaceSummary.js":"7","/Users/idever/Documents/src/GitHub/new-runex/src/store/index.js":"8","/Users/idever/Documents/src/GitHub/new-runex/src/actions/index.js":"9","/Users/idever/Documents/src/GitHub/new-runex/src/utils/utils.js":"10","/Users/idever/Documents/src/GitHub/new-runex/src/components/visual/RaceProfile.js":"11","/Users/idever/Documents/src/GitHub/new-runex/src/components/visual/ConditionsModal.js":"12","/Users/idever/Documents/src/GitHub/new-runex/src/components/race/Register.js":"13","/Users/idever/Documents/src/GitHub/new-runex/src/store/history.js":"14","/Users/idever/Documents/src/GitHub/new-runex/src/store/store.js":"15","/Users/idever/Documents/src/GitHub/new-runex/src/actions/alert.actions.js":"16","/Users/idever/Documents/src/GitHub/new-runex/src/actions/user.actions.js":"17","/Users/idever/Documents/src/GitHub/new-runex/src/actions/event.actions.js":"18","/Users/idever/Documents/src/GitHub/new-runex/src/services/index.js":"19","/Users/idever/Documents/src/GitHub/new-runex/src/components/race/Content.js":"20","/Users/idever/Documents/src/GitHub/new-runex/src/services/event.service.js":"21","/Users/idever/Documents/src/GitHub/new-runex/src/services/activity.service.js":"22","/Users/idever/Documents/src/GitHub/new-runex/src/services/user.service.js":"23","/Users/idever/Documents/src/GitHub/new-runex/src/services/regevent.service.js":"24","/Users/idever/Documents/src/GitHub/new-runex/src/reducers/index.js":"25","/Users/idever/Documents/src/GitHub/new-runex/src/components/race/Race.js":"26","/Users/idever/Documents/src/GitHub/new-runex/src/components/race/Confirm.js":"27","/Users/idever/Documents/src/GitHub/new-runex/src/components/race/Address.js":"28","/Users/idever/Documents/src/GitHub/new-runex/src/utils/auth-header.js":"29","/Users/idever/Documents/src/GitHub/new-runex/src/reducers/users.reducer.js":"30","/Users/idever/Documents/src/GitHub/new-runex/src/reducers/registration.reducer.js":"31","/Users/idever/Documents/src/GitHub/new-runex/src/reducers/alert.reducer.js":"32","/Users/idever/Documents/src/GitHub/new-runex/src/reducers/authentication.reducer.js":"33","/Users/idever/Documents/src/GitHub/new-runex/src/reducers/eventer.reducer.js":"34","/Users/idever/Documents/src/GitHub/new-runex/src/components/race/ConfirmPayment.js":"35","/Users/idever/Documents/src/GitHub/new-runex/src/components/omise-prebuilt-form/index.js":"36","/Users/idever/Documents/src/GitHub/new-runex/src/components/omise-prebuilt-form/CheckoutCreditCard.js":"37","/Users/idever/Documents/src/GitHub/new-runex/src/components/omise-prebuilt-form/CheckoutInternetBanking.js":"38"},{"size":910,"mtime":1609768826409,"results":"39","hashOfConfig":"40"},{"size":10213,"mtime":1609768830217,"results":"41","hashOfConfig":"40"},{"size":362,"mtime":1609747126593,"results":"42","hashOfConfig":"40"},{"size":4923,"mtime":1609748884246,"results":"43","hashOfConfig":"40"},{"size":2859,"mtime":1609748884251,"results":"44","hashOfConfig":"40"},{"size":10169,"mtime":1609748884200,"results":"45","hashOfConfig":"40"},{"size":14155,"mtime":1609748884207,"results":"46","hashOfConfig":"40"},{"size":50,"mtime":1609748884248,"results":"47","hashOfConfig":"40"},{"size":95,"mtime":1609748884200,"results":"48","hashOfConfig":"40"},{"size":3867,"mtime":1609748884252,"results":"49","hashOfConfig":"40"},{"size":54837,"mtime":1609770206724,"results":"50","hashOfConfig":"40"},{"size":2769,"mtime":1609748884206,"results":"51","hashOfConfig":"40"},{"size":7065,"mtime":1609748884205,"results":"52","hashOfConfig":"40"},{"size":94,"mtime":1609748884248,"results":"53","hashOfConfig":"40"},{"size":337,"mtime":1609748884249,"results":"54","hashOfConfig":"40"},{"size":411,"mtime":1609748884199,"results":"55","hashOfConfig":"40"},{"size":6885,"mtime":1609748884200,"results":"56","hashOfConfig":"40"},{"size":4936,"mtime":1609748884200,"results":"57","hashOfConfig":"40"},{"size":158,"mtime":1609748884247,"results":"58","hashOfConfig":"40"},{"size":2823,"mtime":1609748884203,"results":"59","hashOfConfig":"40"},{"size":9899,"mtime":1609748884247,"results":"60","hashOfConfig":"40"},{"size":1449,"mtime":1609748884246,"results":"61","hashOfConfig":"40"},{"size":7011,"mtime":1609748884247,"results":"62","hashOfConfig":"40"},{"size":6052,"mtime":1609748884247,"results":"63","hashOfConfig":"40"},{"size":409,"mtime":1609748884245,"results":"64","hashOfConfig":"40"},{"size":26856,"mtime":1609748884205,"results":"65","hashOfConfig":"40"},{"size":48566,"mtime":1609748884202,"results":"66","hashOfConfig":"40"},{"size":40984,"mtime":1609768138300,"results":"67","hashOfConfig":"40"},{"size":737,"mtime":1609748884251,"results":"68","hashOfConfig":"40"},{"size":1416,"mtime":1609748884246,"results":"69","hashOfConfig":"40"},{"size":356,"mtime":1609748884245,"results":"70","hashOfConfig":"40"},{"size":582,"mtime":1609748884245,"results":"71","hashOfConfig":"40"},{"size":1986,"mtime":1609748884245,"results":"72","hashOfConfig":"40"},{"size":935,"mtime":1609748884245,"results":"73","hashOfConfig":"40"},{"size":5174,"mtime":1609748884202,"results":"74","hashOfConfig":"40"},{"size":109,"mtime":1609748884201,"results":"75","hashOfConfig":"40"},{"size":1955,"mtime":1609748884200,"results":"76","hashOfConfig":"40"},{"size":2192,"mtime":1609748884201,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"rdkuci",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"80"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"/Users/idever/Documents/src/GitHub/new-runex/src/index.js",[],["167","168"],"/Users/idever/Documents/src/GitHub/new-runex/src/App.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/reportWebVitals.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/serviceWorker.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/utils/constants.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/components/RaceRegister.js",["169","170","171","172"],"import React, { Component } from 'react'\nimport { eventService } from '../services'\n\n\nexport default class RaceRegister extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            event: {},\n            tickets: [],\n            products: [],\n        };\n    }\n    componentDidMount() {\n        this.getEvent()\n    }\n    getEvent() {\n        const { slug } = this.props.match.params\n        // const { eventID } = this.props.route.match.params\n\n        eventService.getEventInfoBySlug(slug).then(res => {\n            \n            if (res.data.code === 200) {\n                const { event } = res.data.data\n                    let ticketArray = []\n                    let productsArray = []\n                    let productArray = []\n                    // var result = Object.keys(event.ticket.products).map((key) => [Number(key), event.ticket.products[key]]);\n                    // console.log(result)\n                    // Set tickets\n                    event.ticket && event.ticket.length > 0 && event.ticket.map((ticket, index) => {\n                        const productTemps = ticket.products\n                        productArray.push(productTemps)\n                        const ticketTemp = {\n                            ...ticket,\n                            id: ticket.id,\n                            title: ticket.title,\n                            description: ticket.description,\n                            price: ticket.price,\n                            distance: ticket.distance,\n                            quantity: ticket.quantity,\n                            ticket_type: ticket.ticket_type,\n                            team: ticket.team,\n                            currency: \"THB\",\n                            prodect: productArray\n                        }\n                        // console.log(ticketArray.filter(ticket => ticket.products && ticket.products.find(bb => bb.name ==='')))\n                        \n                        ticket.products && JSON.stringify(ticket.products, function (key, product) {\n                            const typeInitial = []\n                            product.sizes && product.sizes.length > 0 && product.sizes.map((size) => {\n                                const sizeTemp = {\n                                    name: size.name,\n                                    remark: size.remark\n                                }\n                                typeInitial.push(sizeTemp)\n                            })\n                            \n                          \n                            const productTemps = {\n                                ...product,\n                                id: product.id,\n                                name: product.name,\n                                image: [{\n                                    path_url: product.image[0].path_url\n                                }],\n                                detail: product.detail,\n                                sizes: typeInitial,\n                                status: product.status,\n                                is_show: ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.name === product.name && bb.is_show === true)).length > 0,\n                                forAllTicket: ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.name === product.name)).length === ticketArray.length,\n                                ticketTitle: (ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.name === product.name)).length === ticketArray.length)?'':ticket.title\n                            }\n                            \n                            // name: '',\n                            // image: [{\n                            //     path_url: null\n                            // }],\n                            // detail: '',\n                            // sizes: [\n                            //     typeInitial\n                            // ],\n                            // unit: 0,\n                            // status: 'sold',\n                            // is_show: true,\n                            // forAllTicket: true,\n                            // reuse: true,\n                            // ticketID: 0\n                            productsArray.push(productTemps)\n                        })\n                        ticketArray.push(ticketTemp)\n                    })\n                    \n                    // Set products\n                    /*event.product && event.product.length > 0 && event.product.map((product) => {\n                        const typeTemp = []\n\n                        product.type && product.type.length > 0 && product.type.map((type) => {\n                            const typeInitial = {\n                                name: type.name,\n                                remark: type.remark,\n                                price: type.price\n                            }\n                            typeTemp.push(typeInitial)\n                        })\n\n                        const productTemp = {\n                            ...product,\n                            id: product.id,\n                            name: product.name,\n                            image: [{\n                                path_url: product.image[0].path_url\n                            }],\n                            detail: product.detail,\n                            types: typeTemp,\n                            unit: product.unit,\n                            status: product.status,\n                            show: ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.id === product.id && bb.show === true)).length > 0,\n                            forAllTicket: ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.id === product.id)).length === ticketArray.length,\n                            ticketID: ''\n                        }\n\n                        if (ticketArray.filter(ticket => ticket.product && ticket.product.find(bb => bb.id === product.id)).length === ticketArray.length) {\n                            productTemp.ticketID = ''\n                        } else {\n                            ticketArray.map((ticket, indexA) => {\n                                ticket.product && ticket.product.some(bb => {\n                                    if (bb.id === product.id) {\n                                        return (productTemp.ticketID = indexA)\n                                    }\n                                })\n                            })\n                        }\n\n                        productArray.push(productTemp)\n                    })*/\n\n                    //ticketArray.map((tick) => tick.product = [])\n                    let dataFromServer = {\n                        name: event.name,\n                        category: event.category,\n\n                        cover: event.cover,\n                        cover_thumb: event.cover_thumb[0].image,\n\n                        location: event.location,\n                        receive_location: event.receive_location,\n                        is_post: event.is_post,\n                        // post_end_date: moment(moment(event.post_end_date).utc().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate(),\n                \n                        // post_end_date: event.post_end_date ? moment(utils.convertDateApiToString(event.post_end_date), 'DD-MM-YYYY').toDate() : moment().toDate(),\n                        // is_free: event.is_free,\n                        // inapp: event.inapp,\n\n                        // startReg: moment(moment(event.start_reg).utc().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate(),\n                        // startTimeReg: moment(moment(event.start_reg).utc().format('HH:mm:ss'), 'HH:mm:ss').toDate(),\n                        // endReg: moment(moment(event.end_reg).utc().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate(),\n                        // endTimeReg: moment(moment(event.end_reg).utc().format('HH:mm:ss'), 'HH:mm:ss').toDate(),\n\n                        // startEvent: moment(moment(event.start_event).utc().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate(),\n                        // startTimeEvent: moment(moment(event.start_event).utc().format('HH:mm:ss'), 'HH:mm:ss').toDate(),\n                        // endEvent: moment(moment(event.end_event).utc().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate(),\n                        // endTimeEvent: moment(moment(event.end_event).utc().format('HH:mm:ss'), 'HH:mm:ss').toDate(),\n\n                        // description: EditorState.createWithContent(convertFromRaw(JSON.parse(event.body))),\n\n                        tickets: ticketArray,\n\n                        products: productsArray,\n                        partner: event.partner\n                    }\n                    \n                    // initialFormData = dataFromServer\n                this.setState({\n                    event: res.data.data.event\n                })\n                this.setState({\n                    tickets: dataFromServer.tickets\n                })\n                this.setState({\n                    products: dataFromServer.products\n                })\n            }\n        })\n    }\n    render() {\n        const { event, tickets, products } = this.state \n        \n        // if(event.event.category.name === 'Run'){\n        //     history.push('/raceregister/'+eventID)\n        // }else{\n        //     history.push('/register/'+eventID)\n        // }\n        return (\n            <Register event={event} tickets={tickets} products={products} />\n        )\n    }\n}\nconst Race = React.lazy(() => import('./race/Register'));\nconst Visual = React.lazy(() => import('./visual/RaceProfile'));\nfunction Register(props) {\n    const {event, tickets, products} = props\n    // const {category} = (props.event)?props.event.category:null;\n    // console.log(category)\n    if (event.category!==\"Virtual Run\") {\n        return <Race event={props.event} tickets={props.tickets} products={props.products} />;\n    }\n    return <Visual event={props.event} tickets={props.tickets} products={props.products}/>;\n}","/Users/idever/Documents/src/GitHub/new-runex/src/components/visual/RaceSummary.js",["173","174","175","176","177"],"import React, { Component } from 'react'\nimport { Row, Col, Media, Card, Container } from 'react-bootstrap'\nimport iconmedal from '../../images/icon-medal.svg'\nimport iconshirtactive from '../../images/icon-tshirt-active.svg'\nimport { utils } from '../../utils/utils'\nimport { IMAGE_URL, regStatusConstants } from '../../utils/constants'\nimport { history } from '../../store'\nimport { regEventService } from '../../services'\nimport ConditionsModal from './ConditionsModal'\nimport Swal from 'sweetalert2'\n\nexport default class RaceSummary extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            ticket_options: [],\n            logs: {}\n        }\n    }\n\n    showPrice () {\n        const { ticket_options } = this.props.location.state\n        console.log(ticket_options)\n        var total = 0\n        if (ticket_options !== undefined) {\n            ticket_options.map(item => {\n                total += item.total_price\n            })\n        }\n        return total\n    }\n\n    onEditTicketOptions = (index) => {\n        const { ticket_options, product, event, ticket, reciept_type } = this.props.location.state\n        history.push({\n            pathname: '/raceedit',\n            state: {\n                ticket: ticket,\n                product: product,\n                event: event,\n                ticket_options: ticket_options,\n                index: index,\n                reciept_type: reciept_type,\n            }\n        })\n    }\n\n    onClickAddBtn = () => {\n        const { ticket_options, event } = this.props.location.state\n        history.push({\n            pathname: '/addotherperson',\n            state: {\n                event: event,\n                ticket_options: ticket_options,\n                index: ticket_options.lenght + 1,\n            }\n        })\n    }\n\n    onClickConfirm = async (e) => {\n        if (e !== undefined && e !== null) {\n            e.preventDefault()\n        }\n\n        if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\n            this.updateUser(JSON.stringify(sessionStorage.getItem('user_tmp')))\n        }\n\n        const { ticket_options, event, product, ticket } = this.props.location.state\n\n        const total = this.showPrice()\n        let status = regStatusConstants.PAYMENT_WAITING\n        let paymentType = ''\n        var discount = 0\n        if (this.showPrice() === 0) {\n            status = regStatusConstants.PAYMENT_SUCCESS\n            paymentType = regStatusConstants.PAYMENT_FREE\n            const params = {\n                event: event,\n                event_id: event.id,\n                product: product,\n                tickets: ticket,\n                status: status,\n                payment_type: paymentType,\n                total_price: total,\n                promo_code: this.state.promoText,\n                discount_price: discount,\n                coupon: this.state.coupon,\n                reg_date: utils.dateNow(),\n                shiping_address: {},\n                ticket_options: ticket_options,\n                image: ''\n            }\n            //console.log(params)\n            this.props.regEvent(params)\n        } else {\n            const params = {\n                event: event,\n                event_id: event.id,\n                product: product,\n                tickets: ticket,\n                status: status,\n                payment_type: paymentType,\n                total_price: total,\n                promo_code: this.state.promoText,\n                discount_price: discount,\n                coupon: this.state.coupon,\n                reg_date: utils.dateNow(),\n                shiping_address: {},\n                ticket_options: ticket_options,\n                image: ''\n            }\n            // console.log(params)\n            // this.setState({logs:params})\n            Swal.fire({\n                title: 'กำลังส่งข้อมูล',\n                showConfirmButton: false,\n                onBeforeOpen: () => {\n                    Swal.showLoading()\n                    regEventService.regRaceEvent(params).then(res => {\n                        Swal.close()\n                        if (res.data.code === 200) {\n                            history.push({\n                                pathname: '/racepayment/' + res.data.data.id,\n                                state: {\n                                    param: params,\n                                    event: event,\n                                }\n                            })\n                        } else {\n                            Swal.fire({\n                                type: 'warning',\n                                title: 'ส่งข้อมูลสมัครไม่สำเร็จ',\n                                showConfirmButton: false,\n                                timer: 3000\n                            })\n                        }\n                    }, error => {\n                        Swal.close()\n\n                    })\n                }\n            })\n        }\n    }\n\n    showPersonList () {\n        var arr = []\n        const { ticket_options } = this.props.location.state\n        if (ticket_options !== undefined) {\n            ticket_options.map((item, index) => {\n                \n                arr.push(\n                    <Card.Body className=\"border-bottom\" key={index}>\n                        <h5 className=\"h5 mb-2\">ข้อมูล - ผู้สมัครคนที่ {index + 1}</h5>\n                        <Row>\n                            <Col>\n                                <h6 className=\"h5 mb-0\">{item.user_option.firstname + ' ' + item.user_option.lastname}</h6>\n                                <Row>\n                                    <Col>\n                                        <p className=\"custom-font mb-0 text-muted\">{item.user_option.citycen_id !== '' ? 'เลขบัตรประชาชน' : 'Passport'}</p>\n                                        <p className=\"custom-font mb-0 \">{item.user_option.citycen_id !== '' ? item.user_option.citycen_id : item.user_option.passport}</p>\n                                    </Col>\n                                    <Col>\n                                        <p className=\"custom-font mb-0 text-muted\">เบอร์โทร</p>\n                                        <p className=\"custom-font mb-0\">{item.user_option.phone}</p>\n                                    </Col>\n\n                                </Row>\n\n                            </Col>\n                            <Col style={{ cursor: 'pointer' }} className=\"text-right text-custom custom-font\" onClick={this.onEditTicketOptions.bind(this, index)}>แก้ไขข้อมูล</Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Row>\n\n                                    {/* <Col md={6}>\n                                        <p className=\"custom-font mb-0 text-muted\">ขนาดเสื้อ</p>\n                                        <Card style={{ borderColor: '#FA6400', width: 100 }} className=\"text-center\" >\n                                            <Card.Body className=\"p-2\" style={{ color: '#FA6400' }}>\n\n                                                <img\n                                                    width={25}\n                                                    height={20}\n                                                    className=\"mr-1\"\n                                                    src={iconshirtactive}\n                                                    alt=\"runex\"\n                                                />\n                                                <h6 className=\"card-text\">{item.tickets[0].sizes}<br></br><small>{item.tickets[0].remark}</small></h6>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col> */}\n                                    <Col>\n                                        <p className=\"custom-font mb-0 text-muted\">ราคา</p>\n                                        <p className=\"custom-font mb-0\" style={{ color: '#FA6400' }}>{item.total_price}</p>\n                                    </Col>\n\n                                </Row>\n\n                            </Col>\n                            <Col>\n                                <p className=\"custom-font mb-0 text-muted\">ประเภทการวิ่ง</p>\n                                <p className=\"custom-font mb-0 \">{item.tickets[0].ticket.distance > 0 ? (item.tickets[0].ticket.title +' ' + item.tickets[0].ticket.distance + ' km.') : item.tickets[0].ticket.title }</p>\n                            </Col>\n\n                        </Row>\n                    </Card.Body>\n                )\n            })\n        }\n        return arr\n    }\n\n    render () {\n        console.log(this.props)\n        console.log(this.state)\n        const { event } = this.props.location.state\n        return (\n            <div>\n                <Container className=\"mt-5\" >\n                    <Card >\n                        <Card.Body>\n                            <Row>\n                                <Col md={4}>\n                                    <Card className=\"mb-5\">\n                                        <Card.Img variant=\"top\" src={event ? event.cover : ''} />\n                                        <Card.Body>\n                                            <h4 className=\"h4\">{event ? event.name : ''}</h4>\n                                            <p className=\"text-muted mb-4\">ราคาค่าสมัคร</p>\n                                            <h1 className=\"mb-0\" onChange={e => this.setState({ showPrice: e.value })} style={{ color: '#FA6400' }}>{this.showPrice() + ' ' + 'THB'} </h1>\n                                            <p className=\"text-muted mb-4\" style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>(including. postage fee)</p>\n                                            <Card.Title style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>Finisher’s Award</Card.Title>\n                                            <Media style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>\n                                                <img\n                                                    width={35}\n                                                    height={35}\n                                                    className=\"mr-1\"\n                                                    src={iconmedal}\n                                                    alt=\"runex\"\n                                                />\n                                                <Media.Body style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>\n                                                    <h6 className=\"mb-1 pt-1\">Finisher's Medal</h6>\n                                                </Media.Body>\n                                            </Media>\n                                        </Card.Body>\n                                        <Card.Footer className=\"bg-white mb-3\">\n                                            <h6>Hurry! Registration close in</h6>\n                                            <ul className=\"list-group list-group-horizontal-md text-center\">\n                                                <li className=\"list-group-item px-3 border-0\">\n                                                    <h6>{event ? utils.convertDateApiToString(event.end_reg) : ''}<small className=\"ml-1 text-muted\"></small></h6>\n                                                </li>\n                                                {/* <li className=\"list-group-item px-3 border-0\">\n                                            <h6>13<small className=\"ml-1 text-muted\">days</small></h6>\n                                        </li>\n                                        <li className=\"list-group-item px-3 border-0\">\n                                            <h6>7<small className=\"ml-1 text-muted\">hours.</small></h6>\n                                        </li>\n                                        <li className=\"list-group-item px-3 border-0\">\n                                            <h6>45<small className=\"ml-1 text-muted\">mins.</small></h6>\n                                        </li>\n                                        <li className=\"list-group-item px-3 border-0\">\n                                            <h6>15<small className=\"ml-1 text-muted\">secs</small></h6>\n                                        </li> */}\n                                            </ul>\n                                        </Card.Footer>\n                                    </Card>\n                                </Col>\n                                <Col md={8}>\n                                    <Card className=\"px-4 py-3 mb-3\">\n                                        {this.showPersonList()}\n                                        <Card.Body>\n                                            <button type=\"button\" className=\"btn btn-outline-primary rounded-pill custom-font\" onClick={this.onClickAddBtn}>+  เพิ่มคนสมัคร</button>\n                                            {/* <Button type=\"submit\" className=\"btn-outline-primary rounded-pill\" >\n                                        ยืนยัน</Button> */}\n                                            {/* modal  */}\n                                            <ConditionsModal onClick={this.onClickConfirm}></ConditionsModal>\n                                            {/* modal  */}\n                                        </Card.Body>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Container>\n            </div>\n        )\n    }\n}\n","/Users/idever/Documents/src/GitHub/new-runex/src/store/index.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/actions/index.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/utils/utils.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/components/visual/RaceProfile.js",["178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194"],"/Users/idever/Documents/src/GitHub/new-runex/src/components/visual/ConditionsModal.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/components/race/Register.js",["195","196","197"],"import React from 'react'\nimport Content from '../race/Content'\nimport { eventService } from '../../services'\nimport Icon from '@material-ui/core/Icon';\n\n\n// import ReactWizard from 'react-bootstrap-wizard';\n// import { Container, Row, Col } from 'reactstrap';\nimport { Navbar, Nav, Container} from 'react-bootstrap'\n\n// const StepsName = [\n//   { Name: \"Address\", isActive: true, status:'active' },\n//   { Name: \"Race detail\", isActive: false, status:'wait' },\n//   { Name: \"Confirm\", isActive: false, status:'wait' }\n// ]\nimport { history } from '../../store'\n\nclass Steps extends React.Component {\n\n  onClickTap=(data)=>{\n    this.setState({activeTab:data})\n    this.props.changeTab(data)\n  }\n\n  render () {\n    return (\n      <Navbar bg=\"light\" variant=\"light\" expand=\"md\" style={{ minHeight: '80' }} className=\"border-1 navbar-step py-0\">\n        <Container>\n          <Nav className=\"mr-auto nav-step\">\n            {/*  */}\n            {this.props.stepName.map(function (n, i) {\n              return (\n              <Tab collapse={this.props.collapse} onOpenCollapse={this.props.onOpenCollapse} data={n} key={i} /> \n              );\n            }.bind(this))}\n          </Nav>\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Navbar.Text>\n            {this.props.stepName.map(function (n, i) {\n              return (\n                n.status === 'active' ?  (i+1)+'/3' : ''\n                )\n            })}\n              </Navbar.Text>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    );\n  }\n}\n\nclass Tab extends React.Component {\n\n  // constructor(props){\n  //   super(props)\n  // }\n\n  onChangeTab=()=>{\n    this.props.handleClickChange(this.props.data)\n  }\n  onOpenCollapse=()=>{\n    this.props.onOpenCollapse()\n    // this.props.handleClickChange(this.props.data)\n  }\n\n  render() {\n    var hidden = this.props.data.Name==='Confirm' ? \"float-right mt-1 show-mobile d-none\" : \"float-right mt-1 d-none\"\n    return (\n      // <Nav.Link onClick={this.onChangeTab.bind()} className={this.props.data.status==='wait'?'disabled':''}>\n      <Nav.Link className={this.props.data.status==='wait'?'disabled':this.props.data.status}  onClick={this.onOpenCollapse.bind()}>\n        <IconRunnung color={this.props.data.status}></IconRunnung>\n      {this.props.data.Name}<Icon  className={hidden}>{this.props.collapse===true?'keyboard_arrow_up':'keyboard_arrow_down'}</Icon>\n    </Nav.Link>\n    );\n  }\n}\n\nfunction IconRunnung(props) {\n  console.log(props)\n  const color = props.color==='active' ? '#FA6400':props.color==='finish' ?'#5EB503':'rgba(0,0,0,0.5)'\n  \n  return (\n    <svg className=\"umbrella\" xmlns=\"http://www.w3.org/2000/svg\" style={{ width: '32', margin :'0 5px 0 0' }}  width=\"32\" height=\"32\" viewBox=\"0 0 487.811 487.81\" aria-labelledby=\"title\">\n      <title id=\"title\">Umbrella</title>\n      <g id=\"_x33_6_24_\" fill={color}>\n        <g>\n          <path d=\"M150.463,109.521h150.512c3.955,0,7.16-3.206,7.16-7.161c0-3.955-3.205-7.161-7.16-7.161H150.463\n            c-3.955,0-7.161,3.206-7.161,7.161C143.302,106.315,146.508,109.521,150.463,109.521z\"/>\n          <path d=\"M15.853,179.537h150.511c3.955,0,7.161-3.206,7.161-7.161s-3.206-7.16-7.161-7.16H15.853\n            c-3.955,0-7.161,3.205-7.161,7.16S11.898,179.537,15.853,179.537z\"/>\n          <path d=\"M56.258,253.214c0,3.955,3.206,7.162,7.161,7.162H213.93c3.955,0,7.161-3.207,7.161-7.162s-3.206-7.16-7.161-7.16H63.419\n            C59.464,246.054,56.258,249.259,56.258,253.214z\"/>\n          <path d=\"M142.396,336.44H7.161C3.206,336.44,0,339.645,0,343.6s3.206,7.161,7.161,7.161h135.235c3.955,0,7.161-3.206,7.161-7.161\n            S146.351,336.44,142.396,336.44z\"/>\n          <path d=\"M385.729,154.418c21.6,0,39.111-17.513,39.111-39.114s-17.512-39.113-39.111-39.113\n            c-21.605,0-39.119,17.513-39.119,39.113C346.609,136.905,364.123,154.418,385.729,154.418z\"/>\n          <path d=\"M450.066,143.155c-22.459,31.459-52.533,35.102-84.895,15.89c-2.203-1.306-11.977-6.691-14.141-7.977\n            c-52.061-30.906-104.061-18.786-138.934,30.05c-14.819,20.771,19.455,40.459,34.108,19.93\n            c18.018-25.232,40.929-32.533,65.986-24.541c-12.83,22.27-24.047,44.405-39.875,75.853\n            c-15.832,31.448-50.787,56.562-84.374,36.92c-24.235-14.165-46.09,20.651-21.928,34.772\n            c45.854,26.799,99.619,10.343,127.066-24.493c0.952,0.509,1.958,0.968,3.062,1.354c22.422,7.812,51.814,28.61,60.77,35.981\n            c8.953,7.371,24.336,44.921,33.471,63.788c11.082,22.893,46.871,6.219,35.748-16.771c-10.355-21.406-27.736-64.129-41.293-74.938\n            c-10.875-8.669-31.988-24.803-49.895-33.956c12.115-23.466,24.729-46.679,38.008-69.491\n            c42.328,12.969,82.561-2.308,111.215-42.446C498.996,142.312,464.73,122.624,450.066,143.155z\"/>\n        </g>\n      </g>\n    </svg>\n  )\n}\n\nclass Regiter extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      activeTab: {},\n      nextTab: {},\n      backTab: {},\n      event:{},\n      is_collapse_open: true,\n      StepsName: [\n        { Name: \"Address\", isActive: false, status:'wait' },\n        { Name: \"Race detail\", isActive: false, status:'wait' },\n        { Name: \"Confirm\", isActive: false, status:'wait' }\n      ]\n    }\n  }\n\n  componentDidMount(){\n    // this.getEvent()\n    this.initailPage()\n    console.log(this.props)\n    this.setState({\n        event: this.props.event\n    })\n    this.state.StepsName[0]['isActive'] = true;\n    this.state.StepsName[0]['status'] = 'active';\n  }\n\n  initailPage = async () => {\n    await this.checkUserRegisterEvent()\n  }\n\n  \n\n  checkUserRegisterEvent = () => {\n    console.log(this.state.event)\n    const { slug } = this.state.event\n\n    eventService.checkUserRegisteredEvent(slug).then(res => {\n      console.log(res)\n      if (res.code === 200) {\n        if (res.data.data) {\n          history.push('/my-event')\n        }\n      }\n    })\n  }\n\n  handleClickChange=(step)=> {\n    const { StepsName } = this.state\n    var tmp = StepsName\n    tmp.forEach(function(element, index) {\n      if (index === step){\n        element.status = 'active'\n      }else if (index < step){\n        element.status = 'finish'\n      }else{\n        element.status = 'wait'\n      }\n    })\n    this.setState({StepsName:tmp})\n  }\n\n  onOpenCollapse=()=>{\n    //console.log(this.state.is_collapse_open)\n    if (this.state.is_collapse_open===true){\n      this.setState({is_collapse_open:false})\n    }\n    else{\n      this.setState({is_collapse_open:true})\n    }\n  }\n\n  render () {\n    const { regEvent } = this.props\n    console.log(this.state.event)\n    return (\n      <div>\n        <Steps collapse={this.state.is_collapse_open} onOpenCollapse={this.onOpenCollapse} stepName={this.state.StepsName}/> {/*changeTab={this.handleClickChange}*/} \n        <Container className=\"mt-5\" >\n        <Content collapse={this.state.is_collapse_open} stepName={this.state.StepsName} onTabChange={this.handleClickChange} event={this.props.event} tickets={this.props.tickets} products={this.props.products}/>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default Regiter\n","/Users/idever/Documents/src/GitHub/new-runex/src/store/history.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/store/store.js",["198"],"import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from '../reducers'\n\n//const loggerMiddleware = createLogger()\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(\n    thunkMiddleware\n  )\n)\n\nexport default store\n","/Users/idever/Documents/src/GitHub/new-runex/src/actions/alert.actions.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/actions/user.actions.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/actions/event.actions.js",["199","200","201"],"import { eventConstants } from '../utils/constants'\nimport { eventService } from '../services'\nimport { history } from '../store'\nimport Swal from 'sweetalert2'\n\nexport const eventActions = {\n  selectedProducts,\n  selectedTicket,\n  selectedAddress,\n  selectedEvent,\n  regEvent,\n  regEventByPaypal\n}\n\nfunction selectedProducts (products) {\n  return { type: eventConstants.SELECT_PRODUCT_REQUEST, products }\n}\n\nfunction selectedTicket (tickets) {\n  return { type: eventConstants.SELECT_TICKET_REQUEST, tickets }\n}\n\nfunction selectedAddress (address) {\n  return { type: eventConstants.SELECT_ADDRESS_REQUEST, address }\n}\n\nfunction selectedEvent (events) {\n  return { type: eventConstants.SELECT_EVENT_REQUEST, events }\n}\n\nfunction regEvent (data) {\n  return dispatch => {\n    dispatch(request(data))\n    Swal.fire({\n      title: 'กำลังส่งข้อมูล',\n      showConfirmButton: false,\n      onBeforeOpen: () => {\n        Swal.showLoading()\n        eventService.regEvent(data)\n          .then(response => {\n            Swal.close()\n            if (response.status === 200) {\n              if (data.image !== '') {\n                const params = {\n                  amount: data.total_price,\n                  image: data.image,\n                }\n                dispatch(sendSlip(response.data.data.id, params))\n              }\n              history.push('/payment-success')\n              sessionStorage.removeItem('user_tmp')\n              dispatch(success(response.data.data))\n            } else {\n              dispatch(failure())\n            }\n          }, error => {\n            Swal.close()\n            dispatch(failure(error.toString))\n            dispatch(error(error.toString()))\n          })\n      }\n    })\n  }\n\n  function request (data) { return { type: eventConstants.REG_EVENT_REQUEST, data } }\n  function success (data) { return { type: eventConstants.REG_EVENT_SUCCESS, data } }\n  function failure (error) { return { type: eventConstants.REG_EVENT_FAIL, error } }\n}\n\nfunction updateRegEvent (data) {\n  return dispatch => {\n    dispatch(request(data))\n    eventService.regEvent(data)\n      .then(response => {\n        if (response.status === 200) {\n          if (data.image !== '') {\n            const params = {\n              amount: data.total_price,\n              image: data.image,\n            }\n            dispatch(sendSlip(response.data.data.id, params))\n          }\n          history.push('/payment-success')\n          sessionStorage.removeItem('user_tmp')\n          dispatch(success(response.data.data))\n        } else {\n          dispatch(failure(response.data.data))\n        }\n      }, error => {\n        dispatch(failure(error.toString))\n        dispatch(error(error.toString()))\n      })\n  }\n\n  function request (data) { return { type: eventConstants.REG_EVENT_REQUEST, data } }\n  function success (data) { return { type: eventConstants.REG_EVENT_SUCCESS, data } }\n  function failure (error) { return { type: eventConstants.REG_EVENT_FAIL, error } }\n}\n\nfunction regEventByPaypal (data, params) {\n  return dispatch => {\n    dispatch(request(data))\n    Swal.fire({\n      title: 'กำลังส่งข้อมูล',\n      showConfirmButton: false,\n      onBeforeOpen: () => {\n        Swal.showLoading()\n        eventService.regEvent(data)\n      .then(response => {\n        Swal.close()\n        if (response.status === 200) {\n          if (data.image !== '') {\n            // const params = {\n            //   amount: data.total_price,\n            //   image: data.image,\n            // }\n            //dispatch(sendSlip(response.data.data.id, params))\n\n          }\n          history.push('/payment-success')\n          sessionStorage.removeItem('user_tmp')\n          dispatch(success(response.data.data))\n        } else {\n          dispatch(failure())\n        }\n      }, error => {\n        Swal.close()\n        dispatch(failure(error.toString))\n        dispatch(error(error.toString()))\n      })\n      }\n    })\n  }\n\n  function request (data) { return { type: eventConstants.REG_EVENT_REQUEST, data } }\n  function success (data) { return { type: eventConstants.REG_EVENT_SUCCESS, data } }\n  function failure (error) { return { type: eventConstants.REG_EVENT_FAIL, error } }\n}\n\nfunction sendSlip (id, data) {\n  return dispatch => {\n    dispatch(request(data))\n    eventService.sendSlip(id, data)\n      .then(response => {\n        if (response.status === 200) {\n          //dispatch(success(response.data.data))\n        } else {\n          //dispatch(failure(response.data.data))\n        }\n      }, error => {\n        //dispatch(failure(error.toString))\n        //dispatch(error(error.toString()))\n      })\n  }\n\n  function request () { return { type: eventConstants.PAYMENT_UPLOAD_SLIP_REQUEST } }\n  function success (data) { return { type: eventConstants.PAYMENT_UPLOAD_SLIP_SUCCESS, data } }\n  function failure (error) { return { type: eventConstants.PAYMENT_UPLOAD_SLIP_FAIL, error } }\n}","/Users/idever/Documents/src/GitHub/new-runex/src/services/index.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/components/race/Content.js",["202","203","204","205","206"],"import React from 'react'\n\n// import Address from './Address'\n// import Race from './Race'\nimport Address from '../race/Address'\nimport Race from '../race/Race'\nimport {Confirm} from '../race/Confirm'\nimport { eventActions } from '../../actions'\nimport { connect } from 'react-redux';\n// import { Confirm } from '.'\n\nclass Content extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gender: 'Select gender',\n            distant: 'Select distant',\n            current:0,\n            products:[],\n            tickets:[],\n            address:{}\n        };\n    }\n    onClickTap = (index) => {      \n        this.setState({ current: index })\n        this.props.onTabChange(index)\n        //this.props.changeTab(data)\n    }\n\n    handleAddress=(address)=>{\n        this.setState({address:address})\n        // this.props.address(address)\n    }\n\n    handleOrder=(products, tickets)=>{\n        this.setState({products:products})\n        this.setState({tickets:tickets})\n        // this.props.products(products)\n        // this.props.tickets(tickets)\n        const data = {\n            events : this.props.event,\n            tickets : tickets,\n            products : products,\n            address : this.state.address\n        }\n        console.log(data)\n        // this.props.events(data)\n    }\n\n    render () {\n        const { current, tickets } = this.state\n        console.log(this.props)\n        return (\n            <div>\n                {current === 0 ?\n                    <Address handleClickChange={this.onClickTap} event={this.props.event} tickets={this.props.tickets} products={this.props.products} handleAddress={this.handleAddress}></Address>\n                    : null}\n                {current === 1 ?\n                    <Race handleClickChange={this.onClickTap} event={this.props.event} tickets={this.props.tickets} products={this.props.products} handleOrder={this.handleOrder}></Race>\n                    : null\n                }\n                {\n                    current === 2 ? <Confirm handleClickChange={this.onClickTap} collapse={this.props.collapse} event={this.props.event} tickets={this.props.tickets} products={this.props.products} products={this.state.products} tickets={tickets}></Confirm> : null\n                }\n            </div >\n        );\n    }\n}\n\nfunction mapState (state) {\n    const { address, product, ticket, events } = state.eventer;\n    return { address, product, ticket, events };\n  }\n  \n  const actionCreators = {\n    address: eventActions.selectedAddress,\n    product: eventActions.selectedProducts,\n    ticket: eventActions.selectedTicket,\n    events: eventActions.selectedEvent,\n  };\n  export default Content\n//   const connectedContent = connect(mapState, actionCreators)(Content);\n//   export { connectedContent as Content }","/Users/idever/Documents/src/GitHub/new-runex/src/services/event.service.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/services/activity.service.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/services/user.service.js",["207","208","209"],"/* eslint-disable no-console */\nimport { API_URL } from '../utils/constants'\nimport { authHeader, headers } from '../utils/auth-header'\nimport axios from 'axios'\nimport { history } from '../store'\nimport Resizer from 'react-image-file-resizer'\nimport { utils } from '../utils/utils'\n\n\nexport const userService = {\n  login,\n  getUser,\n  logout,\n  registerWithEmailPassword,\n  registerWithProvider,\n  confirmUser,\n  addAddress,\n  updateUser,\n  // getUser,\n  // getAll,\n  // getById,\n  // update,\n  // delete: _delete\n  uploadAvatar,\n  forgetPass,\n  changePass\n}\n\nfunction login (data) {\n  return axios({\n    headers: headers,\n    method: 'POST',\n    url: API_URL + '/user/login',\n    data: data\n  }).then(response => {\n    console.log(response.data.token)\n    utils.setToken(response.data.token)\n    return response\n  }).catch(error => {\n    //console.log(error)\n    return { status: error.status, msg: \"Email or password is invalid\" }\n  })\n}\n\nfunction getUser (token) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + token\n  }\n  return axios({\n    headers: headers,\n    method: 'GET',\n    withCredentials: false,\n    url: API_URL + '/user',\n  }).then(response => {\n    if (response.status === 200) {\n      utils.setUser(response.data.data)\n    }\n    return response\n  }).catch(error => {\n    console.log(error)\n  })\n}\n\nfunction logout () {\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + utils.getToken()\n  }\n  return axios({\n    headers: headers,\n    method: 'GET',\n    withCredentials: false,\n    url: API_URL + '/user/logout',\n  }).then(response => {\n    if (response.status === 200) {\n      utils.removeUser()\n      utils.removeToken()\n      history.push('/')\n    }\n    return response\n  }).catch(error => {\n  })\n  // remove user from local storage to log user out\n\n}\n\n// function getAll() {\n//   const requestOptions = {\n//     method: 'GET',\n//     headers: authHeader()\n//   }\n\n// }\n\n// function getById(id) {\n//   const requestOptions = {\n//     method: 'GET',\n//     headers: authHeader()\n//   }\n// }\n\nfunction registerWithEmailPassword (data) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + utils.getToken()\n  }\n  return axios({\n    headers: headers,\n    method: 'POST',\n    withCredentials: false,\n    url: API_URL + '/user/ep',\n    data: data\n  }).then(response => {\n    if (response.status === 200) {\n      utils.setToken(response.data.token)\n    }\n    return response\n  }).catch(error => {\n    return { status: error.status, msg: \"Can not register\" }\n  })\n  // return fetch(`${config.apiUrl}/users/register`, requestOptions).then(handleResponse)\n}\n\nfunction registerWithProvider (data) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + utils.getToken()\n  }\n  return axios({\n    headers: headers,\n    method: 'POST',\n    url: API_URL + '/user/pd',\n    data: data\n  }).then(response => {\n    if (response.status === 200) {\n      utils.setToken(response.data.token)\n    }\n    return response\n  }).catch(error => {\n    return { status: error.status, msg: \"Can not register\" }\n  })\n}\n\nfunction confirmUser (token) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + token\n  }\n  return axios({\n    headers: headers,\n    method: 'GET',\n    withCredentials: false,\n    url: API_URL + '/user/confirm',\n  }).then(response => {\n    return response\n  }).catch(error => {\n    console.log(error)\n  })\n}\n\nfunction updateUser (user) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + utils.getToken()\n  }\n  return axios({\n    headers: headers,\n    method: 'PUT',\n    withCredentials: false,\n    url: API_URL + '/user',\n    data: user\n  }).then(response => {\n    console.log(response)\n    if (response.status === 200) {\n      sessionStorage.setItem('user', JSON.stringify(user))\n    }\n    return response\n  }).catch(error => {\n    console.log(error)\n    return error\n  })\n}\n\nasync function uploadAvatar (data) {\n  const headers = {\n    'Content-Type': 'multipart/form-data',\n    'Authorization': 'Bearer ' + utils.getToken()\n  }\n\n  const bodyFormData = new FormData()\n\n  await new Promise((resolve, reject) => {\n    Resizer.imageFileResizer(\n      data,\n      1000,\n      1000,\n      data && data.type.includes(\"png\") ? 'PNG' : 'JPEG',\n      100,\n      0,\n      blob => {\n        var file = new File([blob], data ? data.name : '', { type: data ? data.type : '', lastModified: Date.now() })\n        resolve(bodyFormData.append('upload', file));\n      },\n      'blob'\n    )\n  });\n\n  return await axios({\n    headers: headers,\n    method: \"POST\",\n    url: `${API_URL}/user/avatar`,\n    data: bodyFormData\n  }).then(response => {\n    //console.log(response)\n    return response\n  }).catch(error => {\n    //console.log(error)\n    return { status: error.status, msg: \"Can not upload image\" }\n  })\n}\n\nfunction addAddress (address) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + utils.getToken()\n  }\n  return axios({\n    headers: headers,\n    method: 'POST',\n    withCredentials: false,\n    url: API_URL + '/user/address',\n    data: address\n  }).then(response => {\n    console.log(response)\n    return response\n  }).catch(error => {\n    console.log(error)\n  })\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete (id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  }\n\n  // return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse)\n}\n\nfunction handleResponse (response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text)\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout()\n        // eslint-disable-next-line no-restricted-globals\n        location.reload(true)\n      }\n\n      const error = (data && data.message) || response.statusText\n      return Promise.reject(error)\n    }\n\n    return data\n  })\n}\n\nfunction forgetPass (email) {\n\n  const headers = {\n    'Content-Type': 'application/json',\n    // 'Authorization': 'Bearer ' + utils.getToken()\n  }\n  return axios({\n    headers: headers,\n    method: 'POST',\n    withCredentials: false,\n    url: API_URL + '/user/forgotpass',\n    data: email\n  }).then(response => {\n    console.log(response)\n    return response\n  }).catch(error => {\n    console.log(error)\n    return error.response\n  })\n}\n\nfunction changePass (newPassword, token) {\n\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': token\n  }\n  return axios({\n    headers: headers,\n    method: 'POST',\n    withCredentials: false,\n    url: API_URL + '/user/updatepass',\n    data: newPassword\n  }).then(response => {\n    //console.log(response)\n    return response\n  }).catch(error => {\n    //console.log(error)\n    return error.response\n  })\n}\n","/Users/idever/Documents/src/GitHub/new-runex/src/services/regevent.service.js",["210"],"import { API_URL } from '../utils/constants'\nimport axios from 'axios'\nimport { alertActions } from '../actions'\nimport { alertConstants } from '../utils/constants'\nimport { utils } from '../utils/utils'\n\nexport const regEventService = {\n    regRaceEvent,\n    myRegEvents,\n    getRegEventDetail,\n    getPromoCodeInfo,\n    chargeReg,\n    getRegEventReport,\n    getRegEventReportAll,\n    editRegEvent,\n    searchPreOrder,\n    getAllEventActivity\n}\n\nfunction regRaceEvent (data) {\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + utils.getToken()\n    }\n\n    return axios({\n        headers: headers,\n        method: \"POST\",\n        url: `${API_URL}/register/addRace`,\n        data: data\n    }).then(response => {\n        //console.log(response)\n        return response\n    }).catch(error => {\n        //console.log(error)\n        return { status: error.status, msg: \"Can not add event\" }\n    })\n\n}\n\nfunction chargeReg(data){\n    const headers = {\n        'Content-Type': 'multipart/form-data',\n        'Authorization': 'Bearer ' + utils.getToken()\n    }\n    return axios({\n        headers: headers,\n        method: \"POST\",\n        url: `${API_URL}/register/payment`,\n        data: data,\n    }).then(response => {\n        return response\n    }).catch(error => {\n        alertActions.error(alertConstants.ERROR)\n        return error\n    })\n}\n\nfunction myRegEvents() {\n    alertActions.error(alertConstants.LOADING)\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + utils.getToken()\n    }\n    return axios({\n        headers: headers,\n        method: \"GET\",\n        url: `${API_URL}/register/myRegEvent`\n    }).then(response => {\n        alertActions.error(alertConstants.SUCCESS)\n        return response\n    }).catch(error => {\n        alertActions.error(alertConstants.ERROR)\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\n    })\n}\n\nfunction getRegEventDetail(regEventID) {\n    alertActions.error(alertConstants.LOADING)\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + utils.getToken()\n    }\n    return axios({\n        headers: headers,\n        method: \"GET\",\n        url: `${API_URL}/register/getRegEvent/${regEventID}`\n    }).then(response => {\n        alertActions.error(alertConstants.SUCCESS)\n        return response\n    }).catch(error => {\n        alertActions.error(alertConstants.ERROR)\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\n    })\n}\n\nfunction getPromoCodeInfo(code) {\n    alertActions.error(alertConstants.LOADING)\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + utils.getToken()\n    }\n    return axios({\n        headers: headers,\n        method: \"GET\",\n        url: `${API_URL}/coupon/couponInfo/${code}`\n    }).then(response => {\n        return response\n    }).catch(error => {\n        return { code: 302, status: error.status, msg: \"code not found\" }\n    })\n}\n\nfunction getRegEventReport(data) {\n    alertActions.error(alertConstants.LOADING)\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + utils.getToken()\n    }\n    return axios({\n        headers: headers,\n        method: \"POST\",\n        url: `${API_URL}/register/report`,\n        data: data\n    }).then(response => {\n        alertActions.error(alertConstants.SUCCESS)\n        return response\n    }).catch(error => {\n        alertActions.error(alertConstants.ERROR)\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\n    })\n}\n\nfunction getRegEventReportAll(data) {\n    alertActions.error(alertConstants.LOADING)\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + utils.getToken()\n    }\n    return axios({\n        headers: headers,\n        method: \"POST\",\n        url: `${API_URL}/register/reportAll`,\n        data: data\n    }).then(response => {\n        alertActions.error(alertConstants.SUCCESS)\n        return response\n    }).catch(error => {\n        alertActions.error(alertConstants.ERROR)\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\n    })\n}\n\nfunction editRegEvent(data){\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + utils.getToken()\n    }\n    return axios({\n        headers: headers,\n        method: \"PUT\",\n        url: `${API_URL}/register/edit/${data.id}`,\n        data: data\n    }).then(response => {\n        alertActions.error(alertConstants.SUCCESS)\n        return response\n    }).catch(error => {\n        alertActions.error(alertConstants.ERROR)\n        return { code: 302, status: error.status, msg: \"Update register fail\" }\n    })\n}\n\nfunction searchPreOrder(data){\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + utils.getToken()\n    }\n    return axios({\n        // headers: headers,\n        method: \"POST\",\n        url: `https://runex-api.thinkdev.app/api/v2/searchPreOrder`,\n        data: data\n    }).then(response => {\n        alertActions.error(alertConstants.SUCCESS)\n        return response\n    }).catch(error => {\n        console.log(error)\n        alertActions.error(alertConstants.ERROR)\n        return { code: 302, status: error.status, msg: \"search order fail\" }\n    })\n}\n\nfunction getAllEventActivity(data){\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + utils.getToken()\n    }\n    return axios({\n        headers: headers,\n        method: \"GET\",\n        url: `https://runex-api.thinkdev.app/api/v1/activity/getAllEventActivity/${data}`,\n        data: data\n    }).then(response => {\n        alertActions.error(alertConstants.SUCCESS)\n        return response\n    }).catch(error => {\n        console.log(error)\n        alertActions.error(alertConstants.ERROR)\n        return { code: 302, status: error.status, msg: \"get Activity fail\" }\n    })\n}","/Users/idever/Documents/src/GitHub/new-runex/src/reducers/index.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/components/race/Race.js",["211","212","213","214","215","216","217","218"],"import React from 'react'\nimport { Row, Col, Media, Card, Button, Form, FormLabel } from 'react-bootstrap'\nimport iconshirt from '../../images/icon-shirt.svg'\nimport iconshirtactive from '../../images/icon-tshirt-active.svg'\nimport iconmedal from '../../images/icon-medal.svg'\nimport iconrun from '../../images/icon-running.svg'\n// import iconrunning from '../../images/icon-running.svg'\nimport { utils } from '../../utils/utils'\nimport iconrunningwhite from '../../images/icon-running-white.svg'\nimport { IMAGE_URL } from '../../utils/constants'\nimport Swal from 'sweetalert2'\n\nclass Race extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            select_ticket: 'Select Distance',\n            select_distance: 'Select Distance',\n            productSize: -1,\n            productOnTicketSize: -1,\n            products: [],\n            productTickets: [],\n            size: undefined,\n            priceShow: 0,\n            selectTicket: undefined,\n            reload: false,\n            ticket: {}\n        };\n    }\n\n    // componentWillReceiveProps(nextProp){\n    //     const { event } = this.props\n    //     if (event.event !== undefined && event.every !== null) {\n    //         if(event.event.ticket.length > 0){\n    //             this.setState({ticket:event.event.ticket[0]})\n    //             console.log(event.event.ticket[0])\n    //         }\n    //     }\n    // }\n    onChangeTab = (step) => {\n        this.props.handleOrder(this.state.products, this.state.productTickets)\n        this.props.handleClickChange(step)\n    }\n\n    onChangeTicket = (e) => {\n        const { event, tickets } = this.props\n        tickets.map((item, index)=>{\n            if(item.id === e.target.value){\n                //console.log(e.target.value)\n                this.setState({ticket:item})\n                //this.setState({select_ticket:e.target.value})\n                this.setState({selectTicket: undefined})\n                //console.log(item)\n            }\n        })\n\n        \n    }\n\n    onSelectedSize = (size, product, tick) => {\n        // const { reload } = this.state\n        // const data = {\n        //     product: product,\n        //     type: size.name,\n        //     remark: size.remark,\n        //     ticket: this.state.ticket\n        // }\n        // this.setState({ selectTicket: data }, () => {\n        //     //console.log(this.state.selectTicket)\n        // })\n        // this.setState({ reload: !reload })\n        const { productTickets, reload } = this.state\n        var arr = productTickets\n        var currentIndex = this.checkTicketIndex(product)\n        if (currentIndex !== -1) {\n            arr.splice(currentIndex, 1)\n            const item = {\n                product: product,\n                type: size.name,\n                price: size.price,\n                ticket: this.state.ticket\n            }\n            arr.push(item)\n        } else {\n            //products.splice(currentIndex, 1)\n            const item = {\n                product: product,\n                type: size.name,\n                price: size.price,\n                ticket: this.state.ticket\n            }\n            arr.push(item)\n        }\n        this.setState({ productTickets: arr })\n        this.setState({ reload: !reload })\n    }\n\n    onSelectedProduct = (isDeselect, item, type) => {\n        const { products, reload } = this.state\n        var arr = products\n        var currentIndex = this.checkProductIndex(item)\n        if (isDeselect) {\n            if (currentIndex !== -1) {\n                arr.splice(currentIndex, 1)\n            }\n        } else {\n            if (currentIndex !== -1) {\n                arr.splice(currentIndex, 1)\n                const product = {\n                    id: item.id,\n                    type: type.name,\n                    price: type.price,\n                    product: item\n                }\n                arr.push(product)\n            } else {\n                //products.splice(currentIndex, 1)\n                const product = {\n                    id: item.id,\n                    type: type.name,\n                    price: type.price,\n                    product: item\n                }\n                arr.push(product)\n            }\n        }\n        this.setState({ products: arr })\n        this.setState({ reload: !reload })\n    }\n\n    checkProductIndex = (item) => {\n        const { products } = this.state\n        var check = -1\n        products.map((element, index) => {\n            if (element.id === item.id) {\n                check = index\n            }\n        })\n        return check\n    }\n\n    checkProductAndSize = (item, type) => {\n        const { products } = this.state\n        var check = false\n        products.map((element) => {\n            if (element.id === item.id && element.type === type.name) {\n                check = true\n            }\n\n        })\n        return check\n    }\n\n    checkTicketIndex = (product, type) => {\n        const { productTickets } = this.state\n        var check = -1\n        productTickets.map((element, index) => {\n            if (element.product.id === product.id) {\n                check = index\n            }\n        })\n        return check\n        // if (selectTicket === undefined) {\n        //     return false\n        // }\n        // if (product.id === selectTicket.product.id && selectTicket.type === type.name) {\n        //     check = true\n        // }\n        // return check\n    }\n\n    checkProductTicket = (product, type) => {\n        const { productTickets } = this.state\n        var check = false\n        productTickets.map((element) => {\n            if (product.id === element.product.id && element.type === type.name) {\n                check = true\n            }\n\n        })\n        return check\n    }\n\n    onClickNext = () => {\n        const { productTickets, ticket } = this.state\n        if (ticket.id === undefined || ticket.id === null){\n            Swal.fire(\n                '',\n                'Please select distance.',\n                'warning'\n            )\n        }else if (ticket.product != null && productTickets.length === 0) {\n            Swal.fire(\n                '',\n                'Please select shirt size.',\n                'warning'\n            )\n        } else {\n            var check = 0\n            if (this.props.products !== null){\n                this.props.products.map((item) => (\n                    item.show ? check += 1 : check += 0\n                ))\n                if (productTickets.length === check) {\n                    this.props.handleClickChange(2)\n                    this.props.handleOrder(this.state.products, productTickets)\n                    \n                }else{\n                    Swal.fire(\n                        '',\n                        'Please select product on ticket.',\n                        'warning'\n                    )\n                }\n            }else if(ticket.price === 0){\n                var arr = productTickets\n                const item = {\n                    product: {},\n                    type: '',\n                    price: 0.00,\n                    ticket: ticket\n                }\n                arr.push(item)\n                this.setState({ productTickets: arr},()=>{\n                    this.props.handleClickChange(2)\n                    this.props.handleOrder(this.state.products, productTickets)\n                })\n            }\n            //this.onChangeTab.bind(this, this.props.nextTab)\n        }\n    }\n\n    onClickBack = () => {\n        this.props.handleClickChange(0)\n        //this.props.handleClickChange({ Name: \"Race detail\", isActive: false })\n    }\n\n    checkIsAddOn=(event)=>{\n        if(event.event !== null){\n            if (event.event.product === null || event.event.product.length === 0) {\n                return true\n            }else{\n                event.event.product.map((item)=>{\n                    if (item.status === 'sold'){\n                        return false\n                    }\n                })\n            }\n\n        }\n        return true\n    }\n\n    showPrice () {\n        console.log(this.props)\n        const { event } = this.props\n        const { products, selectTicket, ticket } = this.state\n        var total = 0\n        if (event.event !== undefined || event.event !== null) {\n            if (selectTicket === undefined) {\n                if (this.props.tickets.length > 0) {\n                    total = this.props.tickets[0].price\n                    products.map((element) => (\n                        total += element.price\n                    ))\n                }\n            } else {\n                total = selectTicket.ticket.price\n                products.map((element) => (\n                    total += element.price\n                ))\n            }\n\n        }\n        // if (total === 0) {\n        //     return 'ฟรี'\n        // }\n        return total\n    }\n\n    displayFinishedAward = (id) => {\n        var datas = []\n        if (id === '5ef2185f2fbe178b33190df0') {\n            datas.push(\n                <Media style={{marginTop:8}}>\n                    <img\n                        width={28}\n                        height={28}\n                        className=\"mr-1\"\n                        src={iconshirt}\n                        alt=\"runex\"\n                    />\n                    <Media.Body>\n                        <h6 className=\"mb-1 pt-1\">Finisher’s T Shirt</h6>\n                    </Media.Body>\n                </Media>\n            )\n            datas.push(\n                <Media style={{marginTop:8}}>\n                    <img\n                        width={28}\n                        height={28}\n                        className=\"mr-1\"\n                        src={iconrun}\n                        alt=\"runex\"\n                    />\n                    <Media.Body>\n                        <h6 className=\"mb-1 pt-1\">Top 100 Buf/Top 20 Team Buf</h6>\n                    </Media.Body>\n                </Media>\n            )\n            datas.push(\n                <Media style={{marginTop:8}}>\n                    <img\n                        width={28}\n                        height={28}\n                        className=\"mr-1\"\n                        src={iconmedal}\n                        alt=\"runex\"\n                    />\n                    <Media.Body>\n                        <h6 className=\"mb-1 pt-1\">Winner’s Trophy</h6>\n                    </Media.Body>\n                </Media>\n            )\n        }\n        return datas\n    }\n\n    render () {\n        const { productOnTicketSize, ticket } = this.state\n        const { event, tickets } = this.props\n        return (\n            <Card>\n                <Card.Body>\n                    <Row>\n                        <Col lg={5} md={12} className=\"component-event-aside\">\n                            <Card className=\"mb-5\">\n                                <Card.Img variant=\"top\" src={event ? event.cover : ''} />\n                                <Card.Body>\n                                    <h4 className=\"h4\">{event ? event.name : ''}</h4>\n                                    <h1 className=\"mb-0\" onChange={e => this.setState({ showPrice: e.value })}>{this.showPrice() + ' ' + event.ticket[0].currency}</h1>\n                                    {/* <p className=\"text-muted mb-4\">(including. postage fee)</p> */}\n                                    <Card.Title style={{ display: event.event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>Finisher’s Award</Card.Title>\n                                    <Media style={{ marginTop: 8}} hidden={event.event ? (event.is_free === true ? false : false) : false}>\n                                        <img\n                                            width={28}\n                                            height={28}\n                                            className=\"mr-1\"\n                                            src={iconmedal}\n                                            alt=\"runex\"\n                                        />\n                                        <Media.Body style={{ display: event ? (event.is_free === true ? \"none\" : \"flex\") : 'none' }}>\n                                            <h6 className=\"mb-1 pt-1\">Finisher's Medal</h6>\n                                        </Media.Body>\n\n                                    </Media>\n                                    { event ? this.displayFinishedAward(event.id) : '' }\n                                </Card.Body>\n                                <Card.Footer className=\"bg-white mb-3\">\n                                    <h6>Hurry! Registration close in</h6>\n                                    <ul className=\"list-group list-group-horizontal text-center\">\n                                        <li className=\"list-group-item px-3 border-0\">\n                                            <h6>{event ? utils.convertDateApiToString(event.end_reg) : ''}<small className=\"ml-1 text-muted\"></small></h6>\n                                        </li>\n                                        {/* <li className=\"list-group-item px-3 border-0\">\n                                            <h6>13<small className=\"ml-1 text-muted\">days</small></h6>\n                                        </li>\n                                        <li className=\"list-group-item px-3 border-0\">\n                                            <h6>7<small className=\"ml-1 text-muted\">hours.</small></h6>\n                                        </li>\n                                        <li className=\"list-group-item px-3 border-0\">\n                                            <h6>45<small className=\"ml-1 text-muted\">mins.</small></h6>\n                                        </li>\n                                        <li className=\"list-group-item px-3 border-0\">\n                                            <h6>15<small className=\"ml-1 text-muted\">secs</small></h6>\n                                        </li> */}\n                                    </ul>\n                                </Card.Footer>\n                            </Card>\n                        </Col>\n                        <Col lg={7} md={12}>\n                            <Card.Title>Race detail</Card.Title>\n                            <Form className=\"mb-5\">\n                                <Form.Group controlId=\"formTicket\">\n                                    <Form.Label>Distance<span className=\"text-danger\">*</span></Form.Label>\n                                    <select className=\"custom-select\" onChange={this.onChangeTicket.bind()}>\n                                        <option value='' key='99'>{this.state.select_ticket}</option>\n                                        {tickets ? tickets.map((item, index) => (\n                                            <option value={item.id} key={index}>{item.title+' '+item.distance+ ' km.'}</option>\n                                        )) : ''}\n                                    </select>\n                                </Form.Group> \n                                {ticket.product ? event.event.product ? event.event.product.map((prod, index) => (\n                                        ticket.product.map((item) => (\n                                            (item.id === prod.id && item.show) ? (\n                                                <Form.Group className=\"mb-5\" key={ticket.id + index}>\n                                                    <Form.Label>{prod.name}<span className=\"text-danger\"></span></Form.Label>\n                                                    <Form.Label>{prod.detail}<span className=\"text-danger\"></span></Form.Label>\n                                                    <Row className=\"pirate\">\n                                                        {prod.type ? prod.type.map((type, index) => (\n                                                            <Col className=\"col-half-offset\" sm=\"2\" xs=\"2\" key={prod.id + index}>\n                                                                <Card style={{cursor: 'pointer', borderColor: this.checkProductTicket(prod, type) ? '#FA6400' : 'rgba(0,0,0,0.19)' }} className=\"text-center\" >\n                                                                    <Card.Body className=\"p-2\" style={{ color: this.checkProductTicket(prod, type) ? '#FA6400' : 'rgba(0,0,0,0.75)' }}\n                                                                        onClick={this.onSelectedSize.bind(this, type, prod, ticket)}>\n\n                                                                        <img\n                                                                            width={25}\n                                                                            height={20}\n                                                                            className=\"mr-1\"\n                                                                            src={this.checkProductTicket(prod, type) ? iconshirtactive : iconshirt}\n                                                                            alt=\"runex\"\n                                                                        />\n                                                                        <h6 className=\"card-text\">{type.name}<br></br><small>{type.remark}</small></h6>\n                                                                    </Card.Body>\n                                                                </Card>\n                                                            </Col>\n                                                        )) : ''}\n                                                    </Row>\n                                                </Form.Group>\n                                            ) : ''\n                                        ))\n                                    )) : '' : ''}\n                                <hr />\n                                <FormLabel style={{ display: event.event ? (this.checkIsAddOn(event) ? \"none\" : \"block\") : 'none' }}>Add on</FormLabel>\n                                {event.event ? event.event.product.map((item, index) => (\n                                    item.status === 'sold' ? (<Form.Group className=\"mb-5\" key={index}>\n\n                                    <Form.Label>{item.name}<span className=\"text-danger\"></span></Form.Label>\n                                    <Form.Label>{item.detail}<span className=\"text-danger\"></span></Form.Label>\n                                    <Row>\n                                        <Col>\n                                            <img\n                                                width={64}\n                                                height={64}\n                                                className=\"mr-3\"\n                                                style={{ marginBottom: 5 }}\n                                                src={item.image ? IMAGE_URL + item.image[0].path_url : ''}\n                                                alt=\"\"\n                                            />\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"size\">\n                                        {item ? item.type.map((type, index) => (\n                                            <Col className=\"col-half-offset\" sm=\"2\" md=\"2\" key={item.id + index}>\n                                                <Card style={{cursor: 'pointer', borderColor: this.checkProductAndSize(item, type) ? '#FA6400' : 'rgba(0,0,0,0.19)' }}\n                                                    className=\"text-center\"\n                                                >\n                                                    <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)') }}\n                                                        onClick={this.onSelectedProduct.bind(this, false, item, type)}>\n\n                                                        <h6 className=\"card-text\">{type.name}<br></br><small>{type.remark}</small></h6>\n                                                    </Card.Body>\n                                                </Card>\n                                            </Col>\n                                        )) : ''}\n                                        {/* <Col className=\"\" sm=\"12\" md=\"2\"  key={item.id + '99'}>\n                                            <Card style={{ borderColor: (this.checkProductIndex(item) === -1) ? '#FA6400' : 'rgba(0,0,0,0.19)', padding: 1 }} \n                                            className=\"text-center\" >\n                                                <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)'), padding: 1 }}\n                                                    onClick={this.onSelectedProduct.bind(this, true, item, null)}>\n\n                                                    <h6 className=\"card-text\">ไม่ได้เลือก<br></br><small></small></h6>\n                                                </Card.Body>\n                                            </Card>\n                                        </Col> */}\n                                    </Row>\n                                    <Row className=\"size\">\n                                        <Col className=\"mt-2\" sm=\"2\" xs=\"4\" key={item.id + '99'}>\n                                            <Card style={{cursor: 'pointer', borderColor: (this.checkProductIndex(item) === -1) ? '#FA6400' : 'rgba(0,0,0,0.19)', padding: 1 }}\n                                                className=\"text-center\" >\n                                                <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)'), padding: 1 }}\n                                                    onClick={this.onSelectedProduct.bind(this, true, item, null)}>\n\n                                                    <h6 className=\"card-text\">ไม่ได้เลือก<br></br><small></small></h6>\n                                                </Card.Body>\n                                            </Card>\n                                        </Col>\n                                    </Row>\n\n                                </Form.Group>) : ''\n                                )) : ''}\n                                {/* {event.event ? event.event.product.map((product, index) => (\n                                    <Form.Group key={index}>\n                                        <Row>\n                                            <Col>\n                                                <Media>\n                                                    <img\n                                                        width={64}\n                                                        height={64}\n                                                        className=\"mr-3\"\n                                                        src={product.image ? IMAGE_URL + product.image[0].path_url : ''}\n                                                        alt=\"Generic placeholder\"\n                                                    />\n                                                    <Media.Body>\n                                                        <div className=\"clearfix\">\n                                                            <h6 className=\"float-left\">{product.name}</h6>\n                                                            <h6 className=\"float-right\">Price {product.type[0].price + ' ' + (product.currency !== undefined ? product.currency : 'THB')}</h6>\n                                                        </div>\n                                                        <ul className=\"list-group list-group-horizontal-lg\" style={{ marginBottom: 8, marginRight: 8 }}>\n                                                            {product.type.map((item, index) => (\n                                                                <li key={index} className=\"list-group-item rounded-pill mr-1 py-1 mt-1\"\n                                                                    style={{ borderColor: (productSize === index ? '#FA6400' : 'rgba(0,0,0,0.19)'), color: (productSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)') }}\n                                                                    onClick={this.onSelectedProduct.bind(this, index, product)} >{item.name}</li>\n                                                            ))}\n                                                            \n                                                        </ul>\n                                                        <ul className=\"list-group list-group-horizontal-lg mt-1\">\n                                                            <li  className=\"list-group-item rounded-pill mr-1 py-1\"\n                                                                style={{ borderColor: (productSize === -1 ? '#FA6400' : 'rgba(0,0,0,0.19)'), color: (productSize === -1 ? '#FA6400' : 'rgba(0,0,0,0.75)') }}\n                                                                onClick={this.onSelectedProduct.bind(this, -1, product)} >ไม่ได้เลือก</li>\n                                                        </ul>\n                                                    </Media.Body>\n                                                </Media>\n                                            </Col>\n                                        </Row>\n                                    </Form.Group>\n                                )) : ''} */}\n                            </Form>\n                            <Button className=\"float-right btn-custom rounded-pill px-4 ml-2\" onClick={this.onClickNext}>\n                                <img\n                                    width={25}\n                                    height={20}\n                                    className=\"mr-1\"\n                                    src={iconrunningwhite}\n                                    alt=\"runex\"\n                                />Next\n                                    </Button>\n                            <Button variant=\"outline-secondary\" className=\"float-right rounded-pill px-4\"\n                                onClick={this.onClickBack}>Back</Button>\n                            {/* <Button variant=\"light\" className=\"float-right border-1 rounded-pill px-4\" \n                            onClick={this.props.changeTab.bind(this, { Name: \"Race detail\", isActive: false })}>\n                                        Back\n                                    </Button> */}\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        )\n    }\n}\nexport default Race","/Users/idever/Documents/src/GitHub/new-runex/src/components/race/Confirm.js",["219"],"import React from 'react'\nimport { Row, Col, Media, Card, Button, Form, InputGroup, FormControl, Collapse } from 'react-bootstrap'\n// import iconrunning from '../../images/icon-running.svg'\nimport methodsPayment from '../../images/free-ecommerce-icon-set-bshk-13.jpg'\nimport iconrunningwhite from '../../images/icon-running-white.svg'\nimport QR_Code from '../../images/QR_Code.png'\nimport logoBank1 from '../../images/b1-logo.png'\nimport logoBank2 from '../../images/b2-logo.png'\nimport ConfirmPayment from './ConfirmPayment'\nimport { IMAGE_URL, regStatusConstants } from '../../utils/constants'\nimport { eventActions } from '../../actions'\nimport { userActions } from '../../actions'\nimport { connect } from 'react-redux';\nimport { utils } from '../../utils/utils'\nimport { eventService, regEventService } from '../../services'\n// import { PayPalButton } from \"react-paypal-button-v2\";\n// import moment from 'moment'\nimport Swal from 'sweetalert2'\nimport { CheckoutCreditCard } from '../omise-prebuilt-form'\n\nclass Confirm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            file: null,\n            selectedOption: \"3\",\n            formshow: \"1\",\n            code: '',\n            promoCode: 0,\n            promoText: '',\n            coupon: undefined,\n            user: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')) : {}\n        }\n    }\n\n    componentDidMount () {\n        if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\n            this.setState({ user: JSON.parse(sessionStorage.getItem('user_tmp')) })\n        }\n    }\n\n    onChangeTab = (step) => {\n        this.props.handleClickChange(step)\n    }\n    handleOptionChange = (changeEvent) => {\n        this.setState({\n            selectedOption: changeEvent.target.value\n        })\n    }\n    onClickBack = () => {\n        this.props.handleClickChange(1)\n    }\n\n    onClickChangeAddress = () => {\n        this.props.handleClickChange(0)\n    }\n\n    onClickChangeTicket = () => {\n        this.props.handleClickChange(1)\n    }\n\n    onClickConfirm = async (e) => {\n        if (e !== undefined && e !== null) {\n            e.preventDefault()\n        }\n\n        var phone = ''\n        if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\n            this.updateUser(JSON.stringify(sessionStorage.getItem('user_tmp')))\n            if (JSON.stringify(sessionStorage.getItem('user_tmp').phone !== null)) {\n                phone = JSON.stringify(sessionStorage.getItem('user_tmp')).phone\n            }\n        } else {\n            phone = JSON.parse(utils.getUser()).phone\n        }\n\n\n        const { events } = this.props\n\n        const total = this.calculateTotal()\n        let status = ''\n        if (!status) {\n            status = regStatusConstants.PAYMENT_WAITING\n        }\n        if (this.state.file !== null) {\n            status = regStatusConstants.PAYMENT_WAITING_APPROVE\n        }\n\n        let paymentType = ''\n        if (events.tickets[0].ticket.price === 0) {\n            status = regStatusConstants.PAYMENT_SUCCESS\n            paymentType = regStatusConstants.PAYMENT_FREE\n        } else {\n            if (this.state.selectedOption === \"1\") {\n                paymentType = regStatusConstants.PAYMENT_TRANSFER\n            } else if (this.state.selectedOption === \"2\") {\n                paymentType = regStatusConstants.PAYMENT_QRCODE\n            } else if (this.state.selectedOption === \"3\") {\n                paymentType = regStatusConstants.PAYMENT_CREDIT_CARD\n            }\n        }\n\n        var discount = this.state.promoCode\n        if (discount < 0) {\n            discount = 0\n        }\n\n        const params = {\n            event: events.events.event,\n            event_id: events.events.event.id,\n            product: events.products,\n            tickets: events.tickets,\n            status: status,\n            payment_type: paymentType,\n            total_price: total,\n            promo_code: this.state.promoText,\n            discount_price: discount,\n            coupon: this.state.coupon,\n            reg_date: utils.dateNow(),\n            shiping_address: events.address,\n            image: this.state.file ? await eventService.uploadImage(this.state.file).then(res => res.data.url) : '',\n            phone:phone\n        }\n        //console.log(params)\n        this.props.regEvent(params)\n    }\n\n    onClickConfirmPaypal = async (resPayapl) => {\n        // e.preventDefault()\n        var phone = ''\n        if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\n            this.updateUser(JSON.stringify(sessionStorage.getItem('user_tmp')))\n            if (JSON.stringify(sessionStorage.getItem('user_tmp').phone !== null)) {\n                phone = JSON.stringify(sessionStorage.getItem('user_tmp')).phone\n            }\n        } else {\n            phone = JSON.parse(utils.getUser()).phone\n        }\n\n\n        const total = resPayapl.amount\n        var discount = this.state.promoCode\n        if (discount < 0) {\n            discount = 0\n        }\n\n        const { events } = this.props\n        const params = {\n            event_id: events.events.event.id,\n            product: events.products,\n            tickets: events.tickets,\n            status: regStatusConstants.PAYMENT_SUCCESS,\n            payment_type: regStatusConstants.PAYMENT_CREDIT_CARD,\n            total_price: total,\n            promo_code: this.state.promoText,\n            discount_price: discount,\n            coupon: this.state.coupon,\n            reg_date: utils.dateNow(),\n            shiping_address: events.address,\n            order_id: resPayapl.order_id,\n            image: '',\n            phone: phone\n        }\n\n        //console.log('Param onClickConfirmPaypal ::: ', params)\n        this.props.regEventByPaypal(params, resPayapl)\n    }\n\n    createCreditCardCharge = async (amount, token) => {\n        try {\n            // e.preventDefault()\n            var phone = ''\n            if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\n                this.updateUser(JSON.stringify(sessionStorage.getItem('user_tmp')))\n                if (JSON.stringify(sessionStorage.getItem('user_tmp').phone !== null)) {\n                    phone = JSON.stringify(sessionStorage.getItem('user_tmp')).phone\n                }\n            } else {\n                phone = JSON.parse(utils.getUser()).phone\n            }\n\n            const total = amount\n            var discount = this.state.promoCode\n            if (discount < 0) {\n                discount = 0\n            }\n\n            const { events } = this.props\n            var bodyFormData = new FormData()\n\n            bodyFormData.set('token', token)\n            bodyFormData.set('price', total)\n            bodyFormData.set('event_id', events.events.event.id)\n            regEventService.chargeReg(bodyFormData).then(res => {\n                if (res.status === 200) {\n                    const params = {\n                        event_id: events.events.event.id,\n                        product: events.products,\n                        tickets: events.tickets,\n                        status: regStatusConstants.PAYMENT_SUCCESS,\n                        payment_type: regStatusConstants.PAYMENT_CREDIT_CARD,\n                        total_price: total / 100,\n                        promo_code: this.state.promoText,\n                        discount_price: discount,\n                        coupon: this.state.coupon,\n                        reg_date: utils.dateNow(),\n                        shiping_address: events.address,\n                        order_id: res.data.data.ID,\n                        image: '',\n                        phone: phone\n                    }\n                    this.props.regEventByPaypal(params)\n                } else {\n                    Swal.fire({\n                        type: 'warning',\n                        title: 'ชำระเงินไม่สำเร็จ',\n                        showConfirmButton: false,\n                        timer: 3000\n                    })\n                }\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    createInternetBankingCharge = async (amount, token) => {\n        try {\n            // e.preventDefault()\n            var phone = ''\n            if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\n                this.updateUser(JSON.stringify(sessionStorage.getItem('user_tmp')))\n                if (JSON.stringify(sessionStorage.getItem('user_tmp').phone !== null)) {\n                    phone = JSON.stringify(sessionStorage.getItem('user_tmp')).phone\n                }\n            }else {\n                phone = JSON.parse(utils.getUser()).phone\n            }\n\n            const total = amount\n            var discount = this.state.promoCode\n            if (discount < 0) {\n                discount = 0\n            }\n\n            const { events } = this.props\n            var bodyFormData = new FormData()\n\n            bodyFormData.set('token', token)\n            bodyFormData.set('price', total)\n            bodyFormData.set('event_id', events.events.event.id)\n            regEventService.chargeReg(bodyFormData).then(res => {\n                if (res.status === 200) {\n                    const params = {\n                        event_id: events.events.event.id,\n                        product: events.products,\n                        tickets: events.tickets,\n                        status: regStatusConstants.PAYMENT_SUCCESS,\n                        payment_type: regStatusConstants.PAYMENT_ONLINE_BANKING,\n                        total_price: total / 100,\n                        promo_code: this.state.promoText,\n                        discount_price: discount,\n                        coupon: this.state.coupon,\n                        reg_date: utils.dateNow(),\n                        shiping_address: events.address,\n                        order_id: token,\n                        image: '',\n                        phone: phone\n                    }\n                    //console.log('Param onClickConfirmPaypal ::: ', params)\n                    this.props.regEventByPaypal(params)\n                } else {\n                    Swal.fire({\n                        type: 'warning',\n                        title: 'ชำระเงินไม่สำเร็จ',\n                        showConfirmButton: false,\n                        timer: 3000\n                    })\n                }\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    onClickSendCode = () => {\n        const { promoText } = this.state\n        if (promoText.length > 4) {\n            //this.setState({promoCode:100})\n            regEventService.getPromoCodeInfo(promoText)\n                .then(res => {\n                    //console.log(res)\n                    if (res.data.code === 200) {\n\n                        this.setState({ coupon: res.data.data })\n                        this.setState({ promoCode: res.data.data.discount })\n                    } else {\n                        this.setState({ promoCode: -1 })\n                    }\n                })\n                .catch(error => {\n                    this.setState({ promoCode: -1 })\n                })\n        } else {\n            Swal.fire({\n                type: 'warning',\n                title: 'promo code ไม่ถูกต้อง',\n                showConfirmButton: false,\n                timer: 2000\n            })\n        }\n    }\n\n    onClickClearCode = () => {\n        this.setState({ promoText: '' })\n        this.setState({ promoCode: 0 })\n        this.setState({ coupon: undefined })\n    }\n\n    updateUser = (user) => {\n        this.props.updateProfile(JSON.parse(user))\n    }\n\n    genarateAddon = () => {\n        var arr = []\n        const { events } = this.props\n        if (events.products !== undefined && events.products !== null) {\n            events.products.map((item) => (\n                arr.push(\n                    <Media key={item.product.id}>\n                        <img\n                            width={64}\n                            height={28}\n                            className=\"mr-3\"\n                            src={item.product.image.length > 0 ? IMAGE_URL + item.product.image[0] : ''}\n                            alt=\"\"\n                        />\n                        <Media.Body>\n                            <p className=\"\">{item.product.name}</p>\n                            <h6 className=\"\"><small>Price :</small>{\n                                item.price + ' ' + (item.product.currency !== undefined ? item.product.currency : 'THB')\n                            }</h6>\n                        </Media.Body>\n                    </Media>\n                )\n            ))\n        }\n        return arr\n    }\n\n    genarateTickets = () => {\n        var arr = []\n        const { events } = this.props\n        if (events.tickets !== undefined && events.tickets !== null) {\n            events.tickets.map((item, index) => (\n                index === 0 ? arr.push(\n                    <div key={index}>\n                        <h6 className=\"\"><small>Distance : </small>{item.ticket.title + ' ' + item.ticket.distance + ' km.'}</h6>\n                        <h6 className=\"\" style={{ display: item.type === '' ? \"none\" : \"block\" }}><small>{item.product.name} size : </small>{item.type}</h6>\n                    </div>\n                ) : arr.push(\n                    <div key={index} style={{ display: item.type === '' ? \"none\" : \"block\" }}>\n                        <h6 className=\"\" style={{ display: item.type === '' ? \"none\" : \"block\" }}><small>{item.product.name} size : </small>{item.type}</h6>\n                    </div>\n                )\n\n            ))\n\n        }\n        return arr\n    }\n\n    genarateSummary = () => {\n        var arr = []\n        const { events } = this.props\n        const { promoCode } = this.state\n        var total = 0\n        var currency = 'BTH'\n        if (events.tickets !== undefined && events.tickets !== null) {\n            if (events.tickets.length > 0) {\n                total += events.tickets[0].ticket.price\n                if (events.tickets[0].ticket.unit !== undefined) {\n                    currency = events.tickets[0].ticket.unit\n                }\n                arr.push(\n                    <div className=\"clearfix\" key={events.tickets[0].ticket.id}>\n                        <p className=\"float-left\">{events.tickets[0].ticket.title}</p>\n                        <p className=\"float-right\">{events.tickets[0].ticket.price + ' ' +\n                            (events.tickets[0].ticket.unit !== undefined ? events.tickets[0].ticket.unit : 'THB')}</p>\n                    </div>\n\n                )\n            }\n        }\n        if (events.products !== undefined && events.products !== null) {\n            events.products.map((item) => (\n                total += item.price,\n                arr.push(\n                    <div className=\"clearfix\" key={item.product.id}>\n                        <p className=\"float-left\">{item.product.name}</p>\n                        <p className=\"float-right\">{item.price + ' ' + currency}</p>\n                    </div>\n\n                )\n            ))\n\n        }\n        if (promoCode > 0) {\n            total -= promoCode\n            arr.push(\n                <div className=\"clearfix\" key={989}>\n                    <p className=\"float-left\">ส่วนลด</p>\n                    <p style={{ color: '#FA6400', marginLeft: 5, cursor: 'pointer' }} className=\"float-left\" onClick={this.onClickClearCode}>ลบ</p>\n                    <p className=\"float-right\">-{promoCode + ' ' + currency}</p>\n                </div>\n            )\n        }\n        if (this.state.selectedOption === '3') {\n            arr.push(\n                <div className=\"clearfix\" key={989}>\n                    <p className=\"float-left\"><span style={{ color: 'red' }}>charge 5%</span></p>\n                    <p className=\"float-right\">{this.calculateTotal() - this.calculateTotal() / 1.05 + ' ' + currency}</p>\n                </div>\n            )\n        }\n        arr.push(\n            <div className=\"clearfix\" key={99}>\n                <p className=\"float-left\">Total</p>\n                <p className=\"float-right\">{this.calculateTotal() + ' ' + currency}</p>\n            </div>\n        )\n        return arr\n    }\n\n    calculateTotal () {\n        const { events } = this.props\n        var total = 0\n        if (events.tickets !== undefined && events.tickets !== null) {\n            if (events.tickets.length > 0) {\n                total += events.tickets[0].ticket.price\n            }\n        }\n        if (events.products !== undefined && events.products !== null) {\n            events.products.map((item) => (\n                total += item.price\n            ))\n        }\n        if (this.state.promoCode > 0) {\n            total -= this.state.promoCode\n        }\n        if (this.state.selectedOption === '3') {\n            total *= 1.05\n        }\n        return total\n    }\n\n    attachFileSlip = (file) => {\n        this.setState({ file: file }, () => {\n            this.onClickConfirm()\n        })\n    }\n\n    render () {\n        const { user } = this.state\n        const { events } = this.props\n        return (\n            <Card>\n                {events ?\n                    <Card.Body>\n                        <Row>\n                            <Col sm={6} md={12} lg={5}>\n                                <Collapse in={this.props.collapse}>\n                                    <Card>\n                                        <Card.Body className=\"mb-3 border-bottom\">\n                                            <h4>Confirm information</h4>\n                                            <div className=\"clearfix\">\n                                                <h6 style={{ marginTop: 10 }} className=\"float-left\">Address</h6>\n                                                <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeAddress}>Change</Button>\n                                            </div>\n                                            <p>{user.fullname}</p>\n                                            <p>{events.address ? (events.address.address + ' ' + events.address.city + ', ' + events.address.district + ', ' + events.address.province + ' ' + events.address.zipcode) : ''}</p>\n                                        </Card.Body>\n                                        <Card.Body className=\"mb-3 border-bottom\">\n                                            <div className=\"clearfix\">\n                                                <h6 style={{ marginTop: 10 }} className=\"float-left\">Detail</h6>\n                                                <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeTicket}>Change</Button>\n                                            </div>\n                                            <Media>\n                                                <img\n                                                    width={64}\n                                                    height={32}\n                                                    className=\"mr-3\"\n                                                    src={events.events.event ? IMAGE_URL + events.events.event.cover : ''}\n                                                    alt=\"\"\n                                                />\n                                                <Media.Body>\n                                                    <p className=\"\">{events.events.event ? events.events.event.name : ''}</p>\n                                                    {this.genarateTickets()}\n                                                </Media.Body>\n                                            </Media>\n                                        </Card.Body>\n                                        <Card.Body className=\"mb-3 border-bottom\" style={{ display: events.products ? ((events.products !== null || events.products.length === 0) ? \"none\" : \"block\") : 'none' }}>\n                                            <div className=\"clearfix\">\n                                                <h6 style={{ marginTop: 10 }} className=\"float-left\">Add on</h6>\n                                                <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeTicket}>Change</Button>\n                                            </div>\n                                            {this.genarateAddon()}\n\n                                        </Card.Body>\n                                        <Card.Body className=\"mb-3 border-bottom\" style={{ display: events.tickets ? (events.tickets[0].ticket.price === 0 ? \"none\" : \"block\") : 'block' }}>\n                                            <div className=\"clearfix\">\n                                                <h6>Promo Code</h6>\n                                            </div>\n                                            <InputGroup className=\"mb-3\">\n                                                <FormControl\n                                                    placeholder=\"code\"\n                                                    aria-label=\"code\"\n                                                    aria-describedby=\"basic-addon2\"\n                                                    value={this.state.promoText}\n                                                    onChange={e => this.setState({ promoText: e.target.value })}\n                                                    hidden={this.state.promoCode > 0}\n                                                />\n                                                <InputGroup.Append hidden={this.state.promoCode > 0}>\n                                                    <Button variant=\"warning\" onClick={this.onClickSendCode}>Send</Button>\n                                                </InputGroup.Append>\n                                            </InputGroup>\n                                            <div hidden={this.state.promoCode <= 0}>\n                                                <p className=\"float-left\" >ใช้โค๊ด</p>\n                                                <p className=\"float-left\" style={{ color: '#FA6400', marginLeft: 5, marginRight: 5 }}>{this.state.promoText}</p>\n                                                <p className=\"float-left\" > คุณได้ส่วนลด </p>\n                                                <p className=\"float-left\" style={{ color: '#FA6400', marginLeft: 5, marginRight: 5 }}>{this.state.promoCode}</p>\n                                                <p className=\"float-left\" > บาท </p>\n                                            </div>\n\n                                            <div hidden={this.state.promoCode >= 0}>\n                                                <p className=\"float-left\" style={{ color: '#FA6400' }}>Code นี้ไม่สามารถใช้ได้</p>\n                                            </div>\n                                        </Card.Body>\n                                        <Card.Body className=\"mb-3\">\n                                            <div className=\"clearfix\">\n                                                <h6>Summary</h6>\n                                            </div>\n                                            {this.genarateSummary()}\n                                        </Card.Body>\n                                    </Card>\n                                </Collapse>\n                                {/* <Card className=\"d-none d-lg-block d-xl-block\">\n                                    <Card.Body className=\"mb-3 border-bottom\">\n                                        <h4>Confirm information</h4>\n                                        <div className=\"clearfix\">\n                                            <h6 style={{ marginTop: 10 }} className=\"float-left\">Address</h6>\n                                            <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeAddress}>Change</Button>\n                                        </div>\n                                        <p>{user.fullname}</p>\n                                        <p>{events.address ? (events.address.address + ' ' + events.address.city + ', ' + events.address.district + ', ' + events.address.province + ' ' + events.address.zipcode) : ''}</p>\n                                    </Card.Body>\n                                    <Card.Body className=\"mb-3 border-bottom\">\n                                        <div className=\"clearfix\">\n                                            <h6 style={{ marginTop: 10 }} className=\"float-left\">Detail</h6>\n                                            <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeTicket}>Change</Button>\n                                        </div>\n                                        <Media>\n                                            <img\n                                                width={64}\n                                                height={64}\n                                                className=\"mr-3\"\n                                                src={events.events.event ? IMAGE_URL + events.events.event.cover : ''}\n                                                alt=\"\"\n                                            />\n                                            <Media.Body>\n                                                <p className=\"\">{events.events.event ? events.events.event.name : ''}</p>\n                                                {this.genarateTickets()}\n                                            </Media.Body>\n                                        </Media>\n                                    </Card.Body>\n                                    <Card.Body className=\"mb-3 border-bottom\">\n                                        <div className=\"clearfix\">\n                                            <h6 style={{ marginTop: 10 }} className=\"float-left\">Add on</h6>\n                                            <Button className=\"float-right text-color-custom\" style={{ color: '#FA6400' }} variant=\"link\" onClick={this.onClickChangeTicket}>Change</Button>\n                                        </div>\n                                        {this.genarateAddon()}\n\n                                    </Card.Body>\n                                    <Card.Body className=\"mb-3 border-bottom\">\n                                        <div className=\"clearfix\">\n                                            <h6>Promo Code</h6>\n                                        </div>\n                                        <InputGroup className=\"mb-3\">\n                                            <FormControl\n                                                placeholder=\"code\"\n                                                aria-label=\"code\"\n                                                aria-describedby=\"basic-addon2\"\n                                                value={this.state.promoText}\n                                                onChange={e=>this.setState({promoText:e.target.value})}\n                                                hidden={this.state.promoCode > 0}\n                                            />\n                                            <InputGroup.Append hidden={this.state.promoCode > 0}>\n                                                <Button variant=\"warning\" onClick={this.onClickSendCode}>Send</Button>\n                                            </InputGroup.Append>\n                                        </InputGroup>\n                                        <div hidden={this.state.promoCode <= 0}>\n                                            <p className=\"float-left\" >ใช้โค๊ด</p>\n                                            <p className=\"float-left\" style={{color:'#FA6400',marginLeft:5, marginRight:5}}>{this.state.promoText}</p>\n                                            <p className=\"float-left\" > คุณได้ส่วนลด </p>\n                                            <p className=\"float-left\" style={{color:'#FA6400',marginLeft:5, marginRight:5}}>{this.state.promoCode}</p>\n                                            <p className=\"float-left\" > บาท </p>\n                                            </div>\n\n                                            <div hidden={this.state.promoCode >= 0}>\n                                            <p className=\"float-left\" style={{color:'#FA6400'}}>Code นี้ไม่สามารถใช้ได้</p>\n                                            </div>\n                                    </Card.Body>\n                                    <Card.Body className=\"mb-3\">\n                                        <div className=\"clearfix\">\n                                            <h6>Summary</h6>\n                                        </div>\n                                        {this.genarateSummary()}\n                                    </Card.Body>\n                                </Card> */}\n                            </Col>\n                            <Col sm={6} lg={7} md={12} >\n                                <h5 style={{ display: events.tickets ? (events.tickets[0].ticket.price === 0 ? \"none\" : \"block\") : 'block' }}>Select Payment Method</h5>\n\n                                <Form className=\"mb-5\" style={{ display: events.tickets ? (events.tickets[0].ticket.price === 0 ? \"none\" : \"block\") : 'block' }}>\n                                    <Form.Check\n                                        custom\n                                        type=\"radio\"\n                                        id=\"custom-radio-2\"\n                                        value=\"1\"\n                                        label=\"ชำระเงินโอนผ่านบัญชีธนาคาร\"\n                                        name=\"pay\"\n                                        checked={this.state.selectedOption === \"1\"}\n                                        onChange={this.handleOptionChange}\n                                    />\n                                    <Card style={{ display: this.state.selectedOption === '1' ? \"block\" : \"none\" }}>\n                                        <Card.Body>\n                                            <h5>ข้อมูลบัญชีธนาคารสำหรับโอนเงิน</h5>\n                                            <div className=\"clearfix\">\n                                                <p className=\"float-left\">ธนาคาร:</p>\n                                                <h6 className=\"float-right\" >ธนาคารกสิกรไทย</h6>\n                                            </div>\n                                            <div className=\"clearfix\">\n                                                <p className=\"float-left\">หมายเลขบัญชี:</p>\n                                                <h6 className=\"float-right\" >674-2-04828-2</h6>\n                                            </div>\n                                            <div className=\"clearfix border-bottom pb-3 mb-2\">\n                                                <p className=\"float-left\">ชื่อบัญชี:</p>\n                                                <h6 className=\"float-right\" >บจก. ธิงค เทคโนโลยี</h6>\n                                            </div>\n                                            <h6 className=\"\" >เงื่อนไขการยืนยันการสมัคร</h6>\n                                            <p className=\"border-bottom pb-3\">หลังจากทำการโอน กรุณาเก็บสลิปหลักฐานการโอนเพื่อใช้ในการแนบหลักฐานยืนยันการสมัครในขั้นตอนต่อไป</p>\n                                            <h6 className=\"mb-1\">เงื่อนไขการยืนยันการสมัคร</h6>\n                                            <p className=\"border-bottom pb-3\"> หลังจากทำการโอน กรุณาเก็บสลิปหลักฐานการโอนเพื่อใช้ในการแนบหลักฐานยืนยันการสมัครในขั้นตอนต่อไป</p>\n                                            <div className=\"clearfix\">\n                                                <div className=\"float-left\">\n                                                    <h5>แนบหลักฐานการโอนเงิน</h5>\n                                                    <p className=\"text-custom\">ยังไม่ได้ยืนยันหลักฐานยืนยันการสมัคร</p>\n                                                </div>\n                                                <ConfirmPayment uploadSlip={this.attachFileSlip} />\n                                                {/* <button type=\"button\" className=\"btn btn-outline-warning float-right rounded-pill\"><img width=\"25\" height=\"20\" class=\"mr-1\" src={iconupload} alt=\"runex\" />อัปโหลดสลิป</button> */}\n                                            </div>\n                                        </Card.Body>\n                                    </Card>\n\n                                    <div style={{ display: this.state.selectedOption === '1' ? \"block\" : \"none\" }}>\n                                        {/* <PayPalButton\n                                            amount=\"0.01\"\n                                            onSuccess={(details, data) => {\n                                                alert(\"Transaction completed by \" + details.payer.name.given_name);\n\n                                                // OPTIONAL: Call your server to save the transaction\n                                                return fetch(\"/paypal-transaction-complete\", {\n                                                    method: \"post\",\n                                                    body: JSON.stringify({\n                                                        orderID: data.orderID\n                                                    })\n                                                });\n                                            }}\n                                        /> */}\n                                        {/* <Form.Group style={{ display: this.state.selectedOption === '1' ? \"block\" : \"none\" }} controlId=\"formBasicEmail\">\n                                            <Form.Label>Credit card number</Form.Label>\n                                            <Form.Control type=\"text\" placeholder=\"\" />\n                                        </Form.Group>\n                                        <Form.Group controlId=\"formBasicEmail\" style={{ display: this.state.selectedOption === '1' ? \"block\" : \"none\" }}>\n                                            <Row>\n                                                <Col xs={5}>\n                                                    <Form.Label>Security code</Form.Label>\n                                                    <Form.Control type=\"text\" placeholder=\"\" />\n                                                </Col>\n                                                <Col xs={7}>\n                                                    <Form.Label>Expiration date</Form.Label>\n                                                    <Form.Control type=\"text\" placeholder=\"MM/YY\" />\n                                                </Col>\n                                            </Row>\n                                        </Form.Group> */}\n                                    </div>\n                                    <Form.Check\n                                        custom\n                                        type=\"radio\"\n                                        value=\"2\"\n                                        id=\"custom-radio-2\"\n                                        label=\"ชำระเงินด้วย QR Code\"\n                                        checked={this.state.selectedOption === \"2\"}\n                                        onChange={this.handleOptionChange}\n                                        name=\"pay\"\n                                    />\n                                    <Card style={{ display: this.state.selectedOption === '2' ? \"block\" : \"none\" }}>\n                                        <Card.Body>\n                                            <Row>\n                                                <Col md={6} className=\"p-0\">\n                                                    <img\n                                                        // width={100%}\n                                                        className=\"mr-3 img-fluid\"\n                                                        src={QR_Code}\n                                                        alt=\"\"\n                                                    />\n                                                </Col>\n                                                <Col md={6}>\n                                                    <h5>ขั้นตอนการชำระเงินด้วย QR Code</h5>\n                                                    <ul className=\"list-unstyled\">\n                                                        <li>1. เปิด App ธนาคาร</li>\n                                                        <li>2. เลือกช่องทางการชำระเงิน</li>\n                                                        <li>3. สแกน QR Code ด้านซ้ายเพื่อชำระเงิน</li>\n                                                    </ul>\n                                                    <h6 className=\"mb-1\">ธนาคารที่ร่วมรายการ</h6>\n                                                    <img\n                                                        width={100}\n                                                        className=\"mr-3\"\n                                                        src={logoBank1}\n                                                        alt=\"\"\n                                                    />\n                                                    <img\n                                                        width={100}\n                                                        className=\"mr-3\"\n                                                        src={logoBank2}\n                                                        alt=\"\"\n                                                    />\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md={12}>\n                                                    <Card >\n                                                        <Card.Body>\n                                                            <h5>ข้อมูลบัญชีธนาคารสำหรับโอนเงิน</h5>\n                                                            <div className=\"clearfix\">\n                                                                <p className=\"float-left\">Prompt Pay:</p>\n                                                                <h6 className=\"float-right\" >0-4055-48000-64-7</h6>\n                                                            </div>\n                                                            <div className=\"clearfix border-bottom pb-3 mb-2\">\n                                                                <p className=\"float-left\">ชื่อบัญชี:</p>\n                                                                <h6 className=\"float-right\" >บริษัท ธิงค เทคโนโลยี จำกัด</h6>\n                                                            </div>\n                                                            <h6 className=\"mb-1\">เงื่อนไขการยืนยันการสมัคร</h6>\n                                                            <p> หลังจากทำการโอน กรุณาเก็บสลิปหลักฐานการโอนเพื่อใช้ในการแนบหลักฐานยืนยันการสมัครในขั้นตอนต่อไป</p>\n                                                            <div className=\"clearfix\">\n                                                                <div className=\"float-left\">\n                                                                    <h5>แนบหลักฐานการโอนเงิน</h5>\n                                                                    <p className=\"text-custom\">ยังไม่ได้ยืนยันหลักฐานยืนยันการสมัคร</p>\n                                                                </div>\n                                                                <ConfirmPayment uploadSlip={this.attachFileSlip} />\n                                                                {/* <button type=\"button\" className=\"btn btn-outline-warning float-right rounded-pill\"><img width=\"25\" height=\"20\" class=\"mr-1\" src={iconupload} alt=\"runex\" />อัปโหลดสลิป</button> */}\n                                                            </div>\n                                                        </Card.Body>\n                                                    </Card>\n                                                </Col>\n                                            </Row>\n                                        </Card.Body>\n                                    </Card>\n\n                                    <Form.Check\n                                        custom\n                                        type=\"radio\"\n                                        id=\"custom-radio-0\"\n                                        name=\"pay\"\n                                        value=\"3\"\n                                        checked={this.state.selectedOption === \"3\"}\n                                        onChange={this.handleOptionChange}\n                                        label={<span style={{ color: 'red' }}><img width={168} className=\"mr-3\" src={methodsPayment} alt=\"\" />*Charge 5%</span>}\n                                    // label={`บัตรเครดิต ${<span style={{color:'red'}}>(*Charge 5%)</span>}`}\n                                    // label={`Paypal ${<span style={{color:'red'}}>(*Charge 5%)</span>}`}\n                                    />\n                                    {/* {console.log('Total Price :::: ', this.calculateTotal().toFixed(2))} */}\n                                    {\n                                        this.state.selectedOption === '3' ?\n                                            <Card>\n                                                <Card.Body>\n                                                    <Row>\n                                                        <Col md={6}>\n                                                            <CheckoutCreditCard\n                                                                cart={events}\n                                                                createCreditCardCharge={this.createCreditCardCharge}\n                                                                amount={this.calculateTotal()}\n                                                            />\n                                                        </Col>\n                                                        {/* <Col md={6}>\n                                                            <CheckoutInternetBanking\n                                                                cart={events}\n                                                                createInternetBankingCharge={this.createInternetBankingCharge}\n                                                                amount={this.calculateTotal()}\n                                                            />\n                                                        </Col> */}\n                                                    </Row>\n                                                </Card.Body>\n                                            </Card>\n\n\n                                            // <PayPalButton\n                                            //     amount={(this.calculateTotal() * 1.05).toFixed(2)}\n                                            //     // amount=\"1.05\"\n                                            //     onSuccess={(details, data) => {\n                                            //         const params = {\n                                            //             amount: parseFloat(details.purchase_units[0].amount.value),\n                                            //             date_tranfer: moment(details.create_time).format('DD-MM-YYYY'),\n                                            //             time_tranfer: moment(details.create_time).format('HH:mm'),\n                                            //             order_id: data.orderID\n                                            //         }\n                                            //         // console.log('Params :::: ', params)\n                                            //         this.onClickConfirmPaypal.bind(params)\n\n                                            //     }}\n                                            //     options={{\n                                            //         clientId: \"AUZrJfK9XQUlcyCPmm0H_Qe7i_3aFhv9rizPpkr4am5gtdpJbNO8zX8t7I0S1XT5eh0-JVi-i9zmCIX8\",\n                                            //         // clientId: \"sb\", //for testing.\n                                            //         currency: \"THB\"\n                                            //     }}\n                                            // />\n\n\n\n                                            :\n                                            null\n                                    }\n                                </Form>\n                                <Button className=\"float-right btn-custom rounded-pill px-4 ml-2 mt-5\" onClick={this.onClickConfirm.bind()}>\n\n                                    <img\n                                        width={25}\n                                        height={20}\n                                        className=\"mr-1\"\n                                        src={iconrunningwhite}\n                                        alt=\"runex\"\n                                    />Confirm\n                                </Button>\n                                <Button variant=\"outline-secondary\" className=\"float-right rounded-pill px-4 mt-5\" onClick={this.onClickBack.bind()}>Back</Button>\n                            </Col>\n                        </Row>\n\n                    </Card.Body>\n                    : ''}\n            </Card>\n        )\n    }\n}\n\nfunction mapState (state) {\n    const { events } = state.eventer;\n    return { events };\n}\n\nconst actionCreators = {\n    addAddress: userActions.addAddress,\n    updateProfile: userActions.updateProfile,\n    regEvent: eventActions.regEvent,\n    regEventByPaypal: eventActions.regEventByPaypal,\n    product: eventActions.selectedProducts,\n    ticket: eventActions.selectedTicket,\n};\n\nconst connectedContent = connect(mapState, actionCreators)(Confirm);\nexport { connectedContent as Confirm }","/Users/idever/Documents/src/GitHub/new-runex/src/components/race/Address.js",["220","221","222","223","224","225","226","227","228","229"],"import React from 'react'\nimport { Row, Col, Media, Card, Button, Form } from 'react-bootstrap'\nimport iconmedal from '../../images/icon-medal.svg'\nimport ThaiAddress from \"react-thai-address\";\nimport iconshirt from '../../images/icon-shirt.svg'\nimport iconrun from '../../images/icon-running.svg'\nimport iconrunningwhite from '../../images/icon-running-white.svg'\nimport moment from 'moment'\nimport { utils } from '../../utils/utils'\nimport { IMAGE_URL } from '../../utils/constants'\nimport { history } from '../../store'\n//import { userService } from '../../services'\n\nclass Address extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')) : {},\n            fullname: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).fullname : '',\n            citycen_id: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).citycen_id : '',\n            phone: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).phone : '',\n            birthdate: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).birthdate : '',\n            birthdateApi: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).birthdate : '',\n            gender: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).gender : '',\n            distant: 'Select distant',\n            cities: [],\n            tumbons: [],\n            address: undefined,\n            address_no_tmp: '',\n            address_no: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).address[0].address : '',\n            province: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).address[0].province : '',\n            district: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).address[0].district : '',\n            city: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).address[0].city : '',\n            postcode: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).address[0].postcode : '',\n            validated: false,\n            hasAddress: false,\n            isVR: true,\n            firstname_th: '',\n            lastname_th: '',\n            firstname: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).firstname : '',\n            lastname: sessionStorage.getItem('user_tmp') ? JSON.parse(sessionStorage.getItem('user_tmp')).lastname : '',\n            toggleEditAddress: false\n        };\n    }\n    onChangeTab = (address) => {\n        this.props.handleAddress(address)\n        this.props.handleClickChange(1)\n    }\n\n    componentDidMount () {\n        const { event } = this.props\n        const { user } = this.state\n        if (sessionStorage.getItem('user_tmp') !== undefined && sessionStorage.getItem('user_tmp') !== null) {\n            this.setState({ user: JSON.parse(sessionStorage.getItem('user_tmp')) }, () => {\n                //this.setState({ fullname: user.fullname })\n                if (user.citycen_id !== undefined) {\n                    this.setState({ citycen_id: user.citycen_id })\n                }\n\n                this.setState({ gender: user.gender })\n                this.setState({ phone: user.phone })\n                this.setState({ birthdate: user.birthdate })\n                this.setState({ fullname: user.fullname })\n                this.setState({ firstname: user.firstname })\n                this.setState({ lastname: user.lastname })\n                this.setState({ firstname_th: user.firstname_th })\n                this.setState({ lastname_th: user.lastname_th })\n                if (user.address !== undefined) {\n                    if (user.address.length > 0) {\n                        this.setState({ address_no: user.address[0].address })\n                        this.setState({ address_no_tmp: user.address[0].address })\n                        var cities = [];\n                        const results = ThaiAddress.search({ province: user.address[0].province });\n                        //console.log(results);\n                        results.map(item => {\n                            if (!cities.includes(item.city)) {\n                                //console.log(item.city)\n                                cities.push(item.city)\n                            }\n                        })\n                        this.setState({ province: user.address[0].province })\n                        this.setState({ cities: cities }, () => {\n                            this.setState({ district: user.address[0].district }, () => {\n                                var tumbons = [];\n                                const results = ThaiAddress.search({\n                                    city: this.state.district,\n                                    province: this.state.province\n                                });\n                                //console.log(results);\n                                results.map(item => {\n                                    if (!tumbons.includes(item.tumbon)) {\n                                        //console.log(item.city)\n                                        tumbons.push(item.tumbon);\n                                    }\n                                });\n                                this.setState({ tumbons: tumbons });\n                                this.setState({ city: user.address[0].city })\n                                this.setState({ postcode: user.address[0].zipcode })\n                            })\n                        });\n                    }\n                }\n            })\n        } else {\n            if (user.address !== undefined && user.address !== null) {\n                if (user.address.length > 0) {\n                    const addr = user.address[0]\n                    this.setState({ hasAddress: true })\n                    this.setState({ address_no: addr.address })\n                    this.setState({ address_no_tmp: addr.address })\n                    this.setState({ province: addr.province })\n                    this.setState({ district: addr.district })\n                    this.setState({ city: addr.city })\n                    this.setState({ postcode: addr.zipcode })\n                }\n            }\n\n            this.setState({ fullname: user.fullname })\n            this.setState({ firstname: user.firstname })\n            this.setState({ lastname: user.lastname })\n            if (user.citycen_id !== undefined) {\n                this.setState({ citycen_id: user.citycen_id })\n            }\n\n            this.setState({ gender: user.gender })\n            this.setState({ phone: user.phone })\n            this.setState({ birthdate: user.birthdate })\n\n        }\n\n        //this.getEvent()\n    }\n\n    componentWillReceiveProps (nextProps) {\n        if (nextProps.event) {\n            const { event } = this.props\n            if (event !== undefined && event !== null) {\n                if (event !== null && event !== undefined) {\n                    if(event.category !== null && event.category !== undefined){\n                        if (event.category.id === 'Virtual Run') {\n                            this.setState({ isVR: true })\n                        }\n                    }\n                }\n\n            }\n        }\n    }\n\n    saveData = () => {\n        var address = {\n            address: this.state.address_no,\n            province: this.state.province,\n            district: this.state.district,\n            city: this.state.city,\n            zipcode: this.state.postcode\n        }\n\n        var data = this.state.user\n        // data.birthdate = utils.convertDateToApi(this.state.birthdateApi)\n        data.phone = this.state.phone\n        data.firstname_th = this.state.firstname_th\n        data.lastname_th = this.state.lastname_th\n        // data.gender = this.state.gender\n        // data.citycen_id = this.state.citycen_id\n        data.address = [address]\n        data.firstname = this.state.firstname\n        data.lastname = this.state.lastname\n        sessionStorage.setItem('user_tmp', JSON.stringify(data))\n        this.onChangeTab(address)\n        //userService.updateUser(data)\n    }\n\n    onClickNext = () => {\n        if (this.state.user.address.length > 0) {\n            const addr = this.state.user.address[0]\n            addr.address = this.state.address_no\n            addr.province = this.state.province\n            addr.district = this.state.district\n            addr.city = this.state.city\n            addr.zipcode = this.state.postcode\n\n            this.onChangeTab(addr)\n        }\n    }\n\n    onClickBack = (event) => {\n        if (event.event !== undefined) {\n            history.push('/preview/' + (event.event ? event.event.id : ''))\n        }\n\n    }\n\n    onSelectBirthdate = (e) => {\n        //`${this.state.toDateReg}T${this.state.toTimeReg}:00`,\n        //console.log(utils.convertDateToApi(e.target.value))\n        this.setState({ birthdateApi: utils.convertDateToApi(e.target.value) })\n        this.setState({ birthdate: e.target.value })\n    }\n\n    onSelectGender = e => {\n        this.setState({ gender: e.target.value })\n    }\n\n    onSelectedprovince = e => {\n        this.setState({ province: e.target.value }, () => {\n            var cities = [];\n            const results = ThaiAddress.search({ province: this.state.province });\n            //console.log(results);\n            results.map(item => {\n                if (!cities.includes(item.city)) {\n                    //console.log(item.city)\n                    cities.push(item.city)\n                }\n            })\n\n            this.setState({ cities: cities });\n            this.setState({ tumbons: [] });\n            this.setState({ postcode: \"\" });\n        });\n    };\n\n    onSelectedDistrict = e => {\n        this.setState({ district: e.target.value }, () => {\n            var tumbons = [];\n            const results = ThaiAddress.search({\n                city: this.state.district,\n                province: this.state.province\n            });\n            //console.log(results);\n            results.map(item => {\n                if (!tumbons.includes(item.tumbon)) {\n                    //console.log(item.city)\n                    tumbons.push(item.tumbon);\n                }\n            });\n            this.setState({ tumbons: tumbons });\n            this.setState({ postcode: \"\" });\n            this.setState({ address: undefined });\n        });\n    };\n\n    onSelectedTumbon = e => {\n        //console.log(e.target.value);\n        const results = ThaiAddress.search({\n            tumbon: e.target.value,\n            city: this.state.district,\n            province: this.state.province\n        });\n        //console.log(results);\n        results.map(item => {\n            if (\n                item.tumbon === e.target.value &&\n                item.city === this.state.district &&\n                item.province === this.state.province\n            ) {\n                this.setState({ city: item.tumbon })\n                this.setState({ postcode: '' + item.zipcode });\n                this.setState({ address: item });\n                //console.log(item)\n            }\n        });\n\n        //this.setState({ tumbons: tumbons });\n    };\n\n    renderProvinces () {\n        ThaiAddress.search({ province: \"\" });\n        var arr = [];\n        const results = ThaiAddress.provinces;\n\n        results.map((item) => {\n            arr.push(\n                <option key={item} value={item}>\n                    {item}\n                </option>\n            );\n        });\n\n        return arr;\n    }\n\n    editAddress = () => {\n        const { user } = this.state\n\n        if (user.address !== undefined) {\n            if (user.address.length > 0) {\n                this.setState({ address_no: user.address[0].address })\n                this.setState({ address_no_tmp: user.address[0].address })\n                var cities = [];\n                const results = ThaiAddress.search({ province: user.address[0].province });\n                //console.log(results);\n                results.map(item => {\n                    if (!cities.includes(item.city)) {\n                        //console.log(item.city)\n                        cities.push(item.city)\n                    }\n                })\n                this.setState({ province: user.address[0].province })\n                this.setState({ cities: cities }, () => {\n                    this.setState({ district: user.address[0].district }, () => {\n                        var tumbons = [];\n                        const results = ThaiAddress.search({\n                            city: this.state.district,\n                            province: this.state.province\n                        });\n                        //console.log(results);\n                        results.map(item => {\n                            if (!tumbons.includes(item.tumbon)) {\n                                //console.log(item.city)\n                                tumbons.push(item.tumbon);\n                            }\n                        });\n                        this.setState({ tumbons: tumbons });\n                        this.setState({ city: user.address[0].city })\n                        this.setState({ postcode: user.address[0].zipcode })\n                    })\n                });\n            }\n        }\n\n        this.setState({ toggleEditAddress: !this.state.toggleEditAddress })\n    }\n\n    onSaveAddress = () => {\n        this.setState({ toggleEditAddress: false })\n        this.setState({ address_no: this.state.address_no_tmp }, () => {\n            const user = this.state.user\n            user.address[0].address = this.state.address_no\n            user.address[0].province = this.state.province\n            user.address[0].district = this.state.district\n            user.address[0].city = this.state.city\n            user.address[0].zipcode = this.state.postcode\n            user.phone = this.state.phone\n            sessionStorage.setItem('user', JSON.stringify(user))\n        })\n    }\n\n    displayFinishedAward = (id) => {\n        var datas = []\n        if (id === '5ef2185f2fbe178b33190df0') {\n            datas.push(\n                <Media style={{ marginTop: 8 }}>\n                    <img\n                        width={28}\n                        height={28}\n                        className=\"mr-1\"\n                        src={iconshirt}\n                        alt=\"runex\"\n                    />\n                    <Media.Body>\n                        <h6 className=\"mb-1 pt-1\">Finisher’s T Shirt</h6>\n                    </Media.Body>\n                </Media>\n            )\n            datas.push(\n                <Media style={{ marginTop: 8 }}>\n                    <img\n                        width={28}\n                        height={28}\n                        className=\"mr-1\"\n                        src={iconrun}\n                        alt=\"runex\"\n                    />\n                    <Media.Body>\n                        <h6 className=\"mb-1 pt-1\">Top 100 Buf/Top 20 Team Buf</h6>\n                    </Media.Body>\n                </Media>\n            )\n            datas.push(\n                <Media style={{ marginTop: 8 }}>\n                    <img\n                        width={28}\n                        height={28}\n                        className=\"mr-1\"\n                        src={iconmedal}\n                        alt=\"runex\"\n                    />\n                    <Media.Body>\n                        <h6 className=\"mb-1 pt-1\">Winner’s Trophy</h6>\n                    </Media.Body>\n                </Media>\n            )\n        }\n        return datas\n    }\n\n    render () {\n        const { isVR, validated, birthdate, citycen_id, gender, phone, address_no, province, district, postcode, city, hasAddress } = this.state\n        const { event } = this.props\n        console.log(event)\n        const handleValidate = e => {\n            const form = e.currentTarget;\n            e.preventDefault();\n            if (form.checkValidity() === false) {\n                e.stopPropagation();\n            } else {\n                //\n                this.saveData()\n            }\n            this.setState({ validated: true });\n\n        };\n        return (\n            <Card >\n                <Card.Body hidden={hasAddress}>\n                    <Row>\n                        <Col md={5}>\n                            <Card className=\"mb-5\">\n                                <Card.Img variant=\"top\" src={event ?  event.cover : ''} />\n                                <Card.Body>\n                                    <h4 className=\"h4\">{event ? event.name : ''}</h4>\n                                    <h1 className=\"mb-0\">{event ? event.ticket ? event.ticket[0].price + ' ' + event.ticket[0].currency : '' : ''}</h1>\n                                    <p className=\"text-muted mb-4\" style={{ display: event.event ? (event.event.is_free === true ? \"none\" : \"block\") : 'none' }}>(including. postage fee)</p>\n                                    <Card.Title style={{ display: event.event ? (event.event.is_free === true ? \"none\" : \"block\") : 'none' }}>Finisher’s Award</Card.Title>\n\n                                    <Media style={{ marginTop: 8 }} hidden={event.event ? (event.event.is_free === true ? false : false) : false}>\n                                        <img\n                                            width={28}\n                                            height={28}\n                                            className=\"mr-1\"\n                                            src={iconmedal}\n                                            alt=\"runex\"\n                                        />\n                                        <Media.Body style={{ display: event.event ? (event.event.is_free === true ? \"none\" : \"flex\") : 'none' }}>\n                                            <h6 className=\"mb-1 pt-1\">Finisher's Medal</h6>\n                                        </Media.Body>\n\n                                    </Media>\n                                    {event.event ? this.displayFinishedAward(event.event.id) : ''}\n\n                                </Card.Body>\n                                <Card.Footer className=\"bg-white mb-3\">\n                                    <h6>Hurry! Registration close in</h6>\n                                    <ul className=\"list-group list-group-horizontal-md text-center\">\n                                        <li className=\"list-group-item px-3 border-0\">\n                                            <h6>{event.event ? utils.convertDateApiToString(event.event.end_reg) : ''}<small className=\"ml-1 text-muted\"></small></h6>\n                                        </li>\n                                        {/* <li className=\"list-group-item px-3 border-0\">\n                                            <h6>13<small className=\"ml-1 text-muted\">days</small></h6>\n                                        </li>\n                                        <li className=\"list-group-item px-3 border-0\">\n                                            <h6>7<small className=\"ml-1 text-muted\">hours.</small></h6>\n                                        </li>\n                                        <li className=\"list-group-item px-3 border-0\">\n                                            <h6>45<small className=\"ml-1 text-muted\">mins.</small></h6>\n                                        </li>\n                                        <li className=\"list-group-item px-3 border-0\">\n                                            <h6>15<small className=\"ml-1 text-muted\">secs</small></h6>\n                                        </li> */}\n                                    </ul>\n                                </Card.Footer>\n                            </Card>\n                        </Col>\n                        <Col md={7}>\n                            <Card.Title>Address</Card.Title>\n                            <Form noValidate  className=\"mb-5\" validated={validated} onSubmit={handleValidate}>\n                                <Form.Row>\n                                    <Form.Group as={Col} controlId=\"validationCustom01\">\n                                        <Form.Label>First name(EN)<span className=\"text-danger\">*</span></Form.Label>\n                                        <Form.Control\n                                            required\n                                            type=\"text\"\n                                            value={this.state.firstname}\n                                            placeholder=\"First name\"\n                                            onChange={e => this.setState({ firstname: e.target.value })}\n                                        />\n                                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                    </Form.Group>\n                                    <Form.Group as={Col} controlId=\"validationCustom02\">\n                                        <Form.Label>Last name(EN)<span className=\"text-danger\">*</span></Form.Label>\n                                        <Form.Control\n                                            required\n                                            type=\"text\"\n                                            value={this.state.lastname}\n                                            placeholder=\"Last name\"\n                                            onChange={e => this.setState({ lastname: e.target.value })}\n                                        />\n                                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                    </Form.Group>\n\n                                </Form.Row>\n                                <Form.Row>\n                                    <Form.Group as={Col} controlId=\"validationCustom01\">\n                                        <Form.Label>ชื่อ(ไทย)<span className=\"text-danger\">*</span></Form.Label>\n                                        <Form.Control\n                                            required\n                                            type=\"text\"\n                                            placeholder=\"ชื่อ\"\n                                            value={this.state.firstname_th}\n                                            onChange={e => this.setState({ firstname_th: e.target.value })}\n                                        />\n                                    </Form.Group>\n                                    <Form.Group as={Col} controlId=\"validationCustom02\">\n                                        <Form.Label>นามสกุล(ไทย)<span className=\"text-danger\">*</span></Form.Label>\n                                        <Form.Control\n                                            required\n                                            type=\"text\"\n                                            placeholder=\"นามสกุล\"\n                                            value={this.state.lastname_th}\n                                            onChange={e => this.setState({ lastname_th: e.target.value })}\n                                        />\n\n                                    </Form.Group>\n                                </Form.Row>\n\n                                {/* <Form.Group controlId=\"formBasicFullname\">\n                                    <Form.Label>Full name<span className=\"text-danger\">*</span></Form.Label>\n                                    <Form.Control value={fullname} type=\"text\" placeholder=\"\" required onChange={e => this.setState({ fullname: e.target.value })} />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Full name is required!\n                                    </Form.Control.Feedback>\n                                </Form.Group> */}\n                                <Form.Group controlId=\"formBasicPassport\" hidden={isVR}>\n                                    <Form.Label>Passport ID<span className=\"text-danger\">*</span></Form.Label>\n                                    <Form.Control value={citycen_id} minLength='13' type=\"number\" placeholder=\"\" required={!isVR} onChange={e => this.setState({ citycen_id: e.target.value })} />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Passport ID is required!\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicBirthday\" hidden={isVR}>\n                                    <Form.Row>\n                                        <Col xs={7}>\n                                            <Form.Label>Birthday<span className=\"text-danger\">*</span></Form.Label>\n                                            <Form.Row>\n                                                <Form.Control value={utils.convertDateApiToString(birthdate)} required={!isVR} type=\"date\" placeholder=\"Birthdate\" max={moment().format(\"YYYY-MM-DD\")} onChange={this.onSelectBirthdate} />\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    Birthday is required!\n                                            </Form.Control.Feedback>\n                                            </Form.Row>\n\n                                        </Col>\n                                        <Col xs={5}>\n                                            <Form.Label>Gender<span className=\"text-danger\">*</span></Form.Label>\n                                            {/* <select value={this.state.mycar}>\n                                                        <option value=\"Ford\">Ford</option>\n                                                        <option value=\"Volvo\">Volvo</option>\n                                                        <option value=\"Fiat\">Fiat</option>\n                                                    </select> */}\n                                            <Form.Control value={gender} as=\"select\" onChange={this.onSelectGender} required={!isVR}>\n                                                <option value=\"\">Select gender</option>\n                                                <option value=\"Male\">Male</option>\n                                                <option value=\"Female\">Female</option>\n                                            </Form.Control>\n\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Gender is required!\n                                            </Form.Control.Feedback>\n                                        </Col>\n                                    </Form.Row>\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicPhone\" >\n                                    <Form.Label>Phone<span className=\"text-danger\">*</span></Form.Label>\n                                    <Form.Control minLength='10' type=\"number\" placeholder=\"\" value={phone} required onChange={e => this.setState({ phone: e.target.value })} />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Phone is required!\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group controlId=\"formGridAddress\">\n                                    <Form.Label>Address<span className=\"text-danger\">*</span></Form.Label>\n                                    <Form.Control as=\"textarea\" rows=\"2\" placeholder=\"\" value={address_no} required onChange={e => this.setState({ address_no: e.target.value })} />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Address is required!\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Row>\n                                    <Form.Group as={Col} controlId=\"formGridCity\">\n                                        <Form.Label>Province<span className=\"text-danger\">*</span></Form.Label>\n                                        <Form.Control\n                                            as=\"select\"\n                                            className=\"form-select\"\n                                            onChange={this.onSelectedprovince}\n                                            required\n                                            value={province}\n                                        >\n                                            <option value=\"\">Select Province</option>\n                                            {this.renderProvinces()}\n                                        </Form.Control>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            Province is required!\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n\n                                    <Form.Group as={Col} controlId=\"formGridState\">\n                                        <Form.Label>District<span className=\"text-danger\">*</span></Form.Label>\n                                        <Form.Control\n                                            as=\"select\"\n                                            className=\"form-select\"\n                                            onChange={this.onSelectedDistrict}\n                                            required\n                                            value={district}\n                                        >\n                                            <option value=\"\">Select District</option>\n                                            {this.state.cities.map((item) => (\n                                                <option key={item} value={item}>\n                                                    {item}\n                                                </option>\n                                            ))}\n                                        </Form.Control>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            District is required!\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                </Form.Row>\n                                <Form.Row>\n                                    <Form.Group as={Col} controlId=\"formGridTumbon\">\n                                        <Form.Label>Sub District<span className=\"text-danger\">*</span></Form.Label>\n                                        <Form.Control\n                                            as=\"select\"\n                                            className=\"form-select\"\n                                            onChange={this.onSelectedTumbon}\n                                            required\n                                            value={city}\n                                        >\n                                            <option value=\"\">Select Sub District</option>\n                                            {this.state.tumbons.map((item) => (\n                                                <option key={item} value={item}>\n                                                    {item}\n                                                </option>\n                                            ))}\n                                        </Form.Control>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            Sub district is required!\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n\n                                    <Form.Group as={Col} controlId=\"formGridZip\">\n                                        <Form.Label>Postcode<span className=\"text-danger\">*</span></Form.Label>\n                                        <Form.Control required defaultValue={postcode} />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            Postcode is required!\n                                    </Form.Control.Feedback>\n                                    </Form.Group>\n                                </Form.Row>\n                                <Button type=\"submit\" className=\"float-right btn-custom rounded-pill px-4 ml-2\" >\n                                    <img\n                                        width={25}\n                                        height={20}\n                                        className=\"mr-1\"\n                                        src={iconrunningwhite}\n                                        alt=\"runex\"\n                                    />Next\n                            </Button>\n                                <Button type='button' variant=\"outline-secondary\" className=\"float-right rounded-pill px-4\"\n                                    onClick={this.onClickBack.bind(this, event)}>Back</Button>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Card.Body>\n                <Row>\n\n                </Row>\n                <Card.Body hidden={!hasAddress}>\n                    <Card.Title>Address</Card.Title>\n                    <div className=\"clearfix\">\n                        {/* <h6 style={{ marginTop: 10 }} className=\"float-left\">{fullname}</h6> */}\n                        <Button className=\"float-right text-color-custom\" style={{ borderColor: '#FA6400' }} variant=\"outline\" onClick={this.editAddress} >{this.state.toggleEditAddress ? 'Cancel' : 'Edit'}</Button>\n                    </div>\n                    <Card.Text>\n                        {this.state.firstname + ' ' + this.state.lastname}\n                    </Card.Text>\n                    <Card.Text>\n                        {address_no + ' ' + city + ', ' + district + ', ' + province + ' ' + postcode}\n                    </Card.Text>\n                    <Card.Text>\n                        {'เบอร์โทรศัพท์ : ' + this.state.phone}\n                    </Card.Text>\n                </Card.Body>\n\n                <Card.Body hidden={!hasAddress || !this.state.toggleEditAddress}>\n                    <h1>Edit Address</h1>\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridCity\">\n                            <Form.Label>ที่อยู่<span className=\"text-danger\">*</span></Form.Label>\n                            <Form.Control\n                                name=\"address\"\n                                onChange={e => this.setState({ address_no_tmp: e.target.value })}\n                                defaultValue={address_no}\n                            ></Form.Control>\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridCity\">\n                            <Form.Label>Province<span className=\"text-danger\">*</span></Form.Label>\n                            <Form.Control\n                                as=\"select\"\n                                onChange={this.onSelectedprovince}\n                                required\n                                value={province}\n                            >\n                                <option value=\"\">Select Province</option>\n                                {this.renderProvinces()}\n                            </Form.Control>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Province is required!\n                                        </Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridState\">\n                            <Form.Label>District<span className=\"text-danger\">*</span></Form.Label>\n                            <Form.Control\n                                as=\"select\"\n                                onChange={this.onSelectedDistrict}\n                                required\n                                value={district}\n                            >\n                                <option value=\"\">Select District</option>\n                                {this.state.cities.map((item) => (\n                                    <option key={item} value={item}>\n                                        {item}\n                                    </option>\n                                ))}\n                            </Form.Control>\n                            <Form.Control.Feedback type=\"invalid\">\n                                District is required!\n                                        </Form.Control.Feedback>\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridTumbon\">\n                            <Form.Label>City<span className=\"text-danger\">*</span></Form.Label>\n                            <Form.Control\n                                as=\"select\"\n                                onChange={this.onSelectedTumbon}\n                                required\n                                value={city}\n                            >\n                                <option value=\"\">Select City</option>\n                                {this.state.tumbons.map((item) => (\n                                    <option key={item} value={item}>\n                                        {item}\n                                    </option>\n                                ))}\n                            </Form.Control>\n                            <Form.Control.Feedback type=\"invalid\">\n                                City is required!\n                                        </Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridZip\">\n                            <Form.Label>Postcode<span className=\"text-danger\">*</span></Form.Label>\n                            <Form.Control\n                                required\n                                defaultValue={postcode}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Postcode is required!\n                                    </Form.Control.Feedback>\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                    <Form.Group controlId=\"formBasicPhone\" >\n                            <Form.Label>Phone<span className=\"text-danger\">*</span></Form.Label>\n                            <Form.Control minLength='10' type=\"number\" placeholder=\"\" value={phone} required onChange={e => this.setState({ phone: e.target.value })} />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Phone is required!\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Form.Row>\n                    <Button className=\"float-right btn-custom rounded-pill px-4 ml-2 d-flex justify-content-center align-content-between\" onClick={this.onSaveAddress}>\n                        <i className=\"material-icons\">save</i>Save\n                            </Button>\n                </Card.Body>\n\n                <Card.Body hidden={!hasAddress || this.state.toggleEditAddress}>\n                    <Button className=\"float-right btn-custom rounded-pill px-4 ml-2\" onClick={this.onClickNext.bind(this)}>\n                        <img\n                            width={25}\n                            height={20}\n                            className=\"mr-1\"\n                            src={iconrunningwhite}\n                            alt=\"runex\"\n                        />Next\n                            </Button>\n                    <Button type='button' variant=\"outline-secondary\" className=\"float-right rounded-pill px-4\"\n                        onClick={this.onClickBack.bind(this, event)}>Back</Button>\n                </Card.Body>\n                {/* <div className=\"fixed\" style={{ position: 'fixed', bottom: '0', left: '0', width: '350px', height: '400px', overflowY: 'scroll', border: '3px solid #73AD21', backgroundColor: 'white', zIndex: 999 }}>\n                    <pre>{JSON.stringify(this.state, null, 2)}</pre>\n                </div> */}\n            </Card >\n        )\n    }\n}\nexport default Address","/Users/idever/Documents/src/GitHub/new-runex/src/utils/auth-header.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/reducers/users.reducer.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/reducers/registration.reducer.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/reducers/alert.reducer.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/reducers/authentication.reducer.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/reducers/eventer.reducer.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/components/race/ConfirmPayment.js",["230","231","232"],"import React, { Component } from 'react'\nimport iconupload from '../../images/icon-upload-file.svg'\nimport { Modal, Button, Col, Row } from 'react-bootstrap'\nimport icon from '../../images/icon-upload-logo.svg'\nimport iconreceipt from '../../images/icon-receipt.svg'\nimport Resizer from 'react-image-file-resizer'\n// import logoBank2 from '../../images/b2-logo.png'\n\nexport default class ConfirmPayment extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n            setShow: false,\n            file: null,\n            uploadEnable: false,\n            cURL: null\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n    handleClose = () => {\n        this.setState({ show: false, setShow: false })\n    }\n    handleShow = () => {\n        this.setState({ show: true, setShow: true })\n    }\n    handleChange(event) {\n        var fileInput = false\n        if(event.target.files[0]) {\n            fileInput = true\n        }\n        if(fileInput) {\n            Resizer.imageFileResizer(\n                event.target.files[0],\n                600,\n                1400,\n                'JPEG',\n                100,\n                0,\n                blob => {\n                    var file = new File([blob], \"uploaded.jpg\", { type: \"image/jpeg\", lastModified: Date.now() })\n                    this.setState({file:file})\n                },\n                'blob'\n            )\n        }\n        \n        this.setState({uploadEnable:true})\n        \n        this.setState({\n          cURL: URL.createObjectURL(event.target.files[0])\n        })\n    }\n    onClickUpload=()=>{\n        this.props.uploadSlip(this.state.file)\n        this.setState({ show: false, setShow: false })\n    }\n\n    render () {\n        // const [show, setShow] = useState(false);\n\n        // const handleClose = () => setShow(false);\n        // const handleShow = () => setShow(true);\n\n        return (\n            <div>\n                <button type=\"button\" className=\"btn btn-outline-warning float-right rounded-pill\" onClick={this.handleShow}><img width=\"25\" height=\"20\" className=\"mr-1\" src={iconupload} alt=\"runex\" />อัปโหลดสลิป</button>\n                <Modal show={this.state.show} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>แนบหลักฐานการชำระเงิน</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body className=\"text-center pt-5\">\n                        <Row>\n                            <Col md={12}>\n                            <img style={{ display: this.state.file  ? \"none\" : \"\" }}\n                                // width={25}\n                                height={44}\n                                className=\"mr-3 my-2\"\n                                src={iconreceipt}\n                            />\n                            <p style={{ display: this.state.file  ? \"none\" : \"\" }} className=\"text-muted mb-5\">ยังไม่มีรูปหลักฐาน</p>\n                            <img style={{ display: !this.state.file  ? \"none\" : \"block\" }}\n                                width={400}\n                                // height={44}\n                                // className=\"mr-3 my-2\"\n                                src={this.state.cURL}\n                            />\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12}>  \n                                <div className=\"upload-btn-wrapper\">\n                                    <button className=\"btn btn-outline-dark\"> <img\n                                        width={25}\n                                        height={25}\n                                        className=\"mr-3\"\n                                        src={icon}\n                                    />เลือกรูปภาพ</button>\n                                    <input type=\"file\" name=\"myfile\" onChange={this.handleChange} />\n                                </div>\n                                {/* <Button variant=\"outline-dark mt-5\">\n                                    \n                                    <img\n                                        width={25}\n                                        height={25}\n                                        className=\"mr-3\"\n                                        src={icon}\n                                    />เลือกรูปภาพ\n                                </Button> */}\n                            </Col>\n                        </Row>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            ยกเลิก\n                        </Button>\n                        <Button variant=\"outline-warning\" disabled={!this.state.uploadEnable} onClick={this.onClickUpload.bind()}>ยืนยัน</Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        )\n    }\n}\n","/Users/idever/Documents/src/GitHub/new-runex/src/components/omise-prebuilt-form/index.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/components/omise-prebuilt-form/CheckoutCreditCard.js",[],"/Users/idever/Documents/src/GitHub/new-runex/src/components/omise-prebuilt-form/CheckoutInternetBanking.js",[],{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","severity":1,"message":"238","line":31,"column":97,"nodeType":"239","messageId":"240","endLine":31,"endColumn":99},{"ruleId":"237","severity":1,"message":"238","line":51,"column":99,"nodeType":"239","messageId":"240","endLine":51,"endColumn":101},{"ruleId":"241","severity":1,"message":"242","line":202,"column":19,"nodeType":"243","messageId":"244","endLine":202,"endColumn":26},{"ruleId":"241","severity":1,"message":"245","line":202,"column":28,"nodeType":"243","messageId":"244","endLine":202,"endColumn":36},{"ruleId":"241","severity":1,"message":"246","line":4,"column":8,"nodeType":"243","messageId":"244","endLine":4,"endColumn":23},{"ruleId":"241","severity":1,"message":"247","line":6,"column":10,"nodeType":"243","messageId":"244","endLine":6,"endColumn":19},{"ruleId":"237","severity":1,"message":"238","line":27,"column":37,"nodeType":"239","messageId":"240","endLine":27,"endColumn":39},{"ruleId":"237","severity":1,"message":"238","line":152,"column":46,"nodeType":"239","messageId":"240","endLine":152,"endColumn":48},{"ruleId":"248","severity":1,"message":"249","line":232,"column":173,"nodeType":"250","messageId":"251","endLine":232,"endColumn":174},{"ruleId":"241","severity":1,"message":"252","line":13,"column":24,"nodeType":"243","messageId":"244","endLine":13,"endColumn":35},{"ruleId":"237","severity":1,"message":"238","line":96,"column":34,"nodeType":"239","messageId":"240","endLine":96,"endColumn":36},{"ruleId":"237","severity":1,"message":"238","line":111,"column":42,"nodeType":"239","messageId":"240","endLine":111,"endColumn":44},{"ruleId":"237","severity":1,"message":"238","line":221,"column":30,"nodeType":"239","messageId":"240","endLine":221,"endColumn":32},{"ruleId":"237","severity":1,"message":"238","line":242,"column":30,"nodeType":"239","messageId":"240","endLine":242,"endColumn":32},{"ruleId":"237","severity":1,"message":"238","line":262,"column":26,"nodeType":"239","messageId":"240","endLine":262,"endColumn":28},{"ruleId":"237","severity":1,"message":"238","line":283,"column":28,"nodeType":"239","messageId":"240","endLine":283,"endColumn":30},{"ruleId":"237","severity":1,"message":"238","line":295,"column":46,"nodeType":"239","messageId":"240","endLine":295,"endColumn":48},{"ruleId":"237","severity":1,"message":"238","line":378,"column":39,"nodeType":"239","messageId":"240","endLine":378,"endColumn":41},{"ruleId":"237","severity":1,"message":"238","line":389,"column":32,"nodeType":"239","messageId":"240","endLine":389,"endColumn":34},{"ruleId":"237","severity":1,"message":"238","line":401,"column":45,"nodeType":"239","messageId":"240","endLine":401,"endColumn":47},{"ruleId":"237","severity":1,"message":"238","line":419,"column":38,"nodeType":"239","messageId":"240","endLine":419,"endColumn":40},{"ruleId":"237","severity":1,"message":"238","line":459,"column":32,"nodeType":"239","messageId":"240","endLine":459,"endColumn":34},{"ruleId":"241","severity":1,"message":"253","line":518,"column":25,"nodeType":"243","messageId":"244","endLine":518,"endColumn":39},{"ruleId":"241","severity":1,"message":"254","line":626,"column":39,"nodeType":"243","messageId":"244","endLine":626,"endColumn":49},{"ruleId":"241","severity":1,"message":"255","line":627,"column":65,"nodeType":"243","messageId":"244","endLine":627,"endColumn":72},{"ruleId":"248","severity":1,"message":"249","line":654,"column":175,"nodeType":"250","messageId":"251","endLine":654,"endColumn":176},{"ruleId":"256","severity":1,"message":"257","line":135,"column":5,"nodeType":"258","endLine":135,"endColumn":28},{"ruleId":"256","severity":1,"message":"257","line":136,"column":5,"nodeType":"258","endLine":136,"endColumn":28},{"ruleId":"241","severity":1,"message":"259","line":185,"column":13,"nodeType":"243","messageId":"244","endLine":185,"endColumn":21},{"ruleId":"241","severity":1,"message":"260","line":3,"column":10,"nodeType":"243","messageId":"244","endLine":3,"endColumn":22},{"ruleId":"241","severity":1,"message":"261","line":70,"column":10,"nodeType":"243","messageId":"244","endLine":70,"endColumn":24},{"ruleId":"241","severity":1,"message":"262","line":157,"column":12,"nodeType":"243","messageId":"244","endLine":157,"endColumn":19},{"ruleId":"241","severity":1,"message":"263","line":158,"column":12,"nodeType":"243","messageId":"244","endLine":158,"endColumn":19},{"ruleId":"241","severity":1,"message":"264","line":9,"column":10,"nodeType":"243","messageId":"244","endLine":9,"endColumn":17},{"ruleId":"265","severity":1,"message":"266","line":63,"column":198,"nodeType":"267","endLine":63,"endColumn":228},{"ruleId":"265","severity":1,"message":"266","line":63,"column":229,"nodeType":"267","endLine":63,"endColumn":246},{"ruleId":"241","severity":1,"message":"268","line":70,"column":10,"nodeType":"243","messageId":"244","endLine":70,"endColumn":18},{"ruleId":"241","severity":1,"message":"269","line":75,"column":9,"nodeType":"243","messageId":"244","endLine":75,"endColumn":23},{"ruleId":"241","severity":1,"message":"270","line":243,"column":10,"nodeType":"243","messageId":"244","endLine":243,"endColumn":17},{"ruleId":"241","severity":1,"message":"271","line":244,"column":9,"nodeType":"243","messageId":"244","endLine":244,"endColumn":23},{"ruleId":"241","severity":1,"message":"272","line":252,"column":10,"nodeType":"243","messageId":"244","endLine":252,"endColumn":24},{"ruleId":"241","severity":1,"message":"273","line":174,"column":11,"nodeType":"243","messageId":"244","endLine":174,"endColumn":18},{"ruleId":"241","severity":1,"message":"274","line":46,"column":17,"nodeType":"243","messageId":"244","endLine":46,"endColumn":22},{"ruleId":"237","severity":1,"message":"238","line":47,"column":34,"nodeType":"239","messageId":"240","endLine":47,"endColumn":36},{"ruleId":"237","severity":1,"message":"238","line":134,"column":39,"nodeType":"239","messageId":"240","endLine":134,"endColumn":41},{"ruleId":"237","severity":1,"message":"238","line":145,"column":32,"nodeType":"239","messageId":"240","endLine":145,"endColumn":34},{"ruleId":"237","severity":1,"message":"238","line":157,"column":45,"nodeType":"239","messageId":"240","endLine":157,"endColumn":47},{"ruleId":"237","severity":1,"message":"238","line":175,"column":38,"nodeType":"239","messageId":"240","endLine":175,"endColumn":40},{"ruleId":"237","severity":1,"message":"275","line":243,"column":47,"nodeType":"239","messageId":"276","endLine":243,"endColumn":49},{"ruleId":"241","severity":1,"message":"277","line":257,"column":41,"nodeType":"243","messageId":"244","endLine":257,"endColumn":47},{"ruleId":"278","severity":1,"message":"279","line":397,"column":36,"nodeType":"280","messageId":"281","endLine":397,"endColumn":37},{"ruleId":"241","severity":1,"message":"247","line":10,"column":10,"nodeType":"243","messageId":"244","endLine":10,"endColumn":19},{"ruleId":"241","severity":1,"message":"274","line":51,"column":17,"nodeType":"243","messageId":"244","endLine":51,"endColumn":22},{"ruleId":"237","severity":1,"message":"238","line":75,"column":42,"nodeType":"239","messageId":"240","endLine":75,"endColumn":44},{"ruleId":"237","severity":1,"message":"238","line":90,"column":50,"nodeType":"239","messageId":"240","endLine":90,"endColumn":52},{"ruleId":"237","severity":1,"message":"238","line":210,"column":30,"nodeType":"239","messageId":"240","endLine":210,"endColumn":32},{"ruleId":"237","severity":1,"message":"238","line":231,"column":30,"nodeType":"239","messageId":"240","endLine":231,"endColumn":32},{"ruleId":"237","severity":1,"message":"238","line":251,"column":26,"nodeType":"239","messageId":"240","endLine":251,"endColumn":28},{"ruleId":"237","severity":1,"message":"238","line":272,"column":28,"nodeType":"239","messageId":"240","endLine":272,"endColumn":30},{"ruleId":"237","severity":1,"message":"238","line":293,"column":34,"nodeType":"239","messageId":"240","endLine":293,"endColumn":36},{"ruleId":"237","severity":1,"message":"238","line":308,"column":42,"nodeType":"239","messageId":"240","endLine":308,"endColumn":44},{"ruleId":"282","severity":1,"message":"283","line":75,"column":29,"nodeType":"284","endLine":80,"endColumn":31},{"ruleId":"282","severity":1,"message":"283","line":82,"column":29,"nodeType":"284","endLine":87,"endColumn":31},{"ruleId":"282","severity":1,"message":"283","line":93,"column":79,"nodeType":"284","endLine":98,"endColumn":39},"no-native-reassign",["285"],"no-negated-in-lhs",["286"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'tickets' is assigned a value but never used.","Identifier","unusedVar","'products' is assigned a value but never used.","'iconshirtactive' is defined but never used.","'IMAGE_URL' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'userService' is defined but never used.","'ticket_options' is assigned a value but never used.","'citycen_id' is assigned a value but never used.","'country' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'regEvent' is assigned a value but never used.","'createLogger' is defined but never used.","'updateRegEvent' is defined but never used.","'success' is defined but never used.","'failure' is defined but never used.","'connect' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'mapState' is defined but never used.","'actionCreators' is assigned a value but never used.","'_delete' is defined but never used.","'requestOptions' is assigned a value but never used.","'handleResponse' is defined but never used.","'headers' is assigned a value but never used.","'event' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'ticket' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]