[{"D:\\react\\new-runex\\src\\index.js":"1","D:\\react\\new-runex\\src\\reportWebVitals.js":"2","D:\\react\\new-runex\\src\\App.js":"3","D:\\react\\new-runex\\src\\components\\RaceRegister.js":"4","D:\\react\\new-runex\\src\\services\\index.js":"5","D:\\react\\new-runex\\src\\services\\user.service.js":"6","D:\\react\\new-runex\\src\\services\\regevent.service.js":"7","D:\\react\\new-runex\\src\\services\\activity.service.js":"8","D:\\react\\new-runex\\src\\services\\event.service.js":"9","D:\\react\\new-runex\\src\\store\\index.js":"10","D:\\react\\new-runex\\src\\actions\\index.js":"11","D:\\react\\new-runex\\src\\utils\\constants.js":"12","D:\\react\\new-runex\\src\\utils\\utils.js":"13","D:\\react\\new-runex\\src\\utils\\auth-header.js":"14","D:\\react\\new-runex\\src\\store\\history.js":"15","D:\\react\\new-runex\\src\\store\\store.js":"16","D:\\react\\new-runex\\src\\actions\\user.actions.js":"17","D:\\react\\new-runex\\src\\actions\\event.actions.js":"18","D:\\react\\new-runex\\src\\actions\\alert.actions.js":"19","D:\\react\\new-runex\\src\\reducers\\index.js":"20","D:\\react\\new-runex\\src\\reducers\\registration.reducer.js":"21","D:\\react\\new-runex\\src\\reducers\\alert.reducer.js":"22","D:\\react\\new-runex\\src\\reducers\\eventer.reducer.js":"23","D:\\react\\new-runex\\src\\reducers\\authentication.reducer.js":"24","D:\\react\\new-runex\\src\\reducers\\users.reducer.js":"25","D:\\react\\new-runex\\src\\components\\race\\index.js":"26","D:\\react\\new-runex\\src\\components\\race\\ConditionsModal.js":"27","D:\\react\\new-runex\\src\\components\\race\\RaceProfile.js":"28","D:\\react\\new-runex\\src\\components\\visual\\RaceProfile.js":"29","D:\\react\\new-runex\\src\\components\\race\\Register.js":"30"},{"size":517,"mtime":1609143417267,"results":"31","hashOfConfig":"32"},{"size":362,"mtime":1608899809427,"results":"33","hashOfConfig":"32"},{"size":650,"mtime":1609216954918,"results":"34","hashOfConfig":"32"},{"size":1357,"mtime":1609221156231,"results":"35","hashOfConfig":"32"},{"size":162,"mtime":1598255474592,"results":"36","hashOfConfig":"32"},{"size":7304,"mtime":1598255474593,"results":"37","hashOfConfig":"32"},{"size":6262,"mtime":1602431644009,"results":"38","hashOfConfig":"32"},{"size":1497,"mtime":1598255474591,"results":"39","hashOfConfig":"32"},{"size":10276,"mtime":1609218889502,"results":"40","hashOfConfig":"32"},{"size":52,"mtime":1598255474595,"results":"41","hashOfConfig":"32"},{"size":98,"mtime":1598255474447,"results":"42","hashOfConfig":"32"},{"size":2949,"mtime":1609219178423,"results":"43","hashOfConfig":"32"},{"size":4013,"mtime":1598255474606,"results":"44","hashOfConfig":"32"},{"size":762,"mtime":1598255474600,"results":"45","hashOfConfig":"32"},{"size":97,"mtime":1598255474594,"results":"46","hashOfConfig":"32"},{"size":352,"mtime":1598255474595,"results":"47","hashOfConfig":"32"},{"size":7108,"mtime":1598255474448,"results":"48","hashOfConfig":"32"},{"size":5094,"mtime":1598255474447,"results":"49","hashOfConfig":"32"},{"size":434,"mtime":1598255474446,"results":"50","hashOfConfig":"32"},{"size":426,"mtime":1598255474584,"results":"51","hashOfConfig":"32"},{"size":370,"mtime":1598255474585,"results":"52","hashOfConfig":"32"},{"size":606,"mtime":1598255474583,"results":"53","hashOfConfig":"32"},{"size":962,"mtime":1598255474584,"results":"54","hashOfConfig":"32"},{"size":2071,"mtime":1598255474584,"results":"55","hashOfConfig":"32"},{"size":1466,"mtime":1598255474585,"results":"56","hashOfConfig":"32"},{"size":33,"mtime":1598255474513,"results":"57","hashOfConfig":"32"},{"size":2817,"mtime":1598255474507,"results":"58","hashOfConfig":"32"},{"size":61164,"mtime":1603806255125,"results":"59","hashOfConfig":"32"},{"size":61161,"mtime":1609220925222,"results":"60","hashOfConfig":"32"},{"size":7374,"mtime":1609221093386,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"y6q95s",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":2,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\react\\new-runex\\src\\index.js",[],["129","130"],"D:\\react\\new-runex\\src\\reportWebVitals.js",[],"D:\\react\\new-runex\\src\\App.js",["131"],"import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport React, { Suspense, lazy } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nconst RaceRegister = lazy(() => import('./components/RaceRegister'));\r\n// const About = lazy(() => import('./routes/About'));\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Switch>\r\n          <Route exact path=\"/raceregister/:slug\" component={RaceRegister} />\r\n          {/* <Route path=\"/about\" component={About} /> */}\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\react\\new-runex\\src\\components\\RaceRegister.js",[],"D:\\react\\new-runex\\src\\services\\index.js",[],"D:\\react\\new-runex\\src\\services\\user.service.js",["132","133","134"],"/* eslint-disable no-console */\r\nimport { API_URL } from '../utils/constants'\r\nimport { authHeader, headers } from '../utils/auth-header'\r\nimport axios from 'axios'\r\nimport { history } from '../store'\r\nimport Resizer from 'react-image-file-resizer'\r\nimport { utils } from '../utils/utils'\r\n\r\n\r\nexport const userService = {\r\n  login,\r\n  getUser,\r\n  logout,\r\n  registerWithEmailPassword,\r\n  registerWithProvider,\r\n  confirmUser,\r\n  addAddress,\r\n  updateUser,\r\n  // getUser,\r\n  // getAll,\r\n  // getById,\r\n  // update,\r\n  // delete: _delete\r\n  uploadAvatar,\r\n  forgetPass,\r\n  changePass\r\n}\r\n\r\nfunction login (data) {\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    url: API_URL + '/user/login',\r\n    data: data\r\n  }).then(response => {\r\n    console.log(response.data.token)\r\n    utils.setToken(response.data.token)\r\n    return response\r\n  }).catch(error => {\r\n    //console.log(error)\r\n    return { status: error.status, msg: \"Email or password is invalid\" }\r\n  })\r\n}\r\n\r\nfunction getUser (token) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + token\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'GET',\r\n    withCredentials: false,\r\n    url: API_URL + '/user',\r\n  }).then(response => {\r\n    if (response.status === 200) {\r\n      utils.setUser(response.data.data)\r\n    }\r\n    return response\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\nfunction logout () {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'GET',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/logout',\r\n  }).then(response => {\r\n    if (response.status === 200) {\r\n      utils.removeUser()\r\n      utils.removeToken()\r\n      history.push('/')\r\n    }\r\n    return response\r\n  }).catch(error => {\r\n  })\r\n  // remove user from local storage to log user out\r\n\r\n}\r\n\r\n// function getAll() {\r\n//   const requestOptions = {\r\n//     method: 'GET',\r\n//     headers: authHeader()\r\n//   }\r\n\r\n// }\r\n\r\n// function getById(id) {\r\n//   const requestOptions = {\r\n//     method: 'GET',\r\n//     headers: authHeader()\r\n//   }\r\n// }\r\n\r\nfunction registerWithEmailPassword (data) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/ep',\r\n    data: data\r\n  }).then(response => {\r\n    if (response.status === 200) {\r\n      utils.setToken(response.data.token)\r\n    }\r\n    return response\r\n  }).catch(error => {\r\n    return { status: error.status, msg: \"Can not register\" }\r\n  })\r\n  // return fetch(`${config.apiUrl}/users/register`, requestOptions).then(handleResponse)\r\n}\r\n\r\nfunction registerWithProvider (data) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    url: API_URL + '/user/pd',\r\n    data: data\r\n  }).then(response => {\r\n    if (response.status === 200) {\r\n      utils.setToken(response.data.token)\r\n    }\r\n    return response\r\n  }).catch(error => {\r\n    return { status: error.status, msg: \"Can not register\" }\r\n  })\r\n}\r\n\r\nfunction confirmUser (token) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + token\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'GET',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/confirm',\r\n  }).then(response => {\r\n    return response\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\nfunction updateUser (user) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'PUT',\r\n    withCredentials: false,\r\n    url: API_URL + '/user',\r\n    data: user\r\n  }).then(response => {\r\n    console.log(response)\r\n    if (response.status === 200) {\r\n      sessionStorage.setItem('user', JSON.stringify(user))\r\n    }\r\n    return response\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\nasync function uploadAvatar (data) {\r\n  const headers = {\r\n    'Content-Type': 'multipart/form-data',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n\r\n  const bodyFormData = new FormData()\r\n\r\n  await new Promise((resolve, reject) => {\r\n    Resizer.imageFileResizer(\r\n      data,\r\n      1000,\r\n      1000,\r\n      data && data.type.includes(\"png\") ? 'PNG' : 'JPEG',\r\n      100,\r\n      0,\r\n      blob => {\r\n        var file = new File([blob], data ? data.name : '', { type: data ? data.type : '', lastModified: Date.now() })\r\n        resolve(bodyFormData.append('upload', file));\r\n      },\r\n      'blob'\r\n    )\r\n  });\r\n\r\n  return await axios({\r\n    headers: headers,\r\n    method: \"POST\",\r\n    url: `${API_URL}/user/avatar`,\r\n    data: bodyFormData\r\n  }).then(response => {\r\n    //console.log(response)\r\n    return response\r\n  }).catch(error => {\r\n    //console.log(error)\r\n    return { status: error.status, msg: \"Can not upload image\" }\r\n  })\r\n}\r\n\r\nfunction addAddress (address) {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/address',\r\n    data: address\r\n  }).then(response => {\r\n    console.log(response)\r\n    return response\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete (id) {\r\n  const requestOptions = {\r\n    method: 'DELETE',\r\n    headers: authHeader()\r\n  }\r\n\r\n  // return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse)\r\n}\r\n\r\nfunction handleResponse (response) {\r\n  return response.text().then(text => {\r\n    const data = text && JSON.parse(text)\r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        // auto logout if 401 response returned from api\r\n        logout()\r\n        // eslint-disable-next-line no-restricted-globals\r\n        location.reload(true)\r\n      }\r\n\r\n      const error = (data && data.message) || response.statusText\r\n      return Promise.reject(error)\r\n    }\r\n\r\n    return data\r\n  })\r\n}\r\n\r\nfunction forgetPass (email) {\r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    // 'Authorization': 'Bearer ' + utils.getToken()\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/forgotpass',\r\n    data: email\r\n  }).then(response => {\r\n    console.log(response)\r\n    return response\r\n  }).catch(error => {\r\n    console.log(error)\r\n    return error.response\r\n  })\r\n}\r\n\r\nfunction changePass (newPassword, token) {\r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': token\r\n  }\r\n  return axios({\r\n    headers: headers,\r\n    method: 'POST',\r\n    withCredentials: false,\r\n    url: API_URL + '/user/updatepass',\r\n    data: newPassword\r\n  }).then(response => {\r\n    //console.log(response)\r\n    return response\r\n  }).catch(error => {\r\n    //console.log(error)\r\n    return error.response\r\n  })\r\n}\r\n","D:\\react\\new-runex\\src\\services\\regevent.service.js",["135"],"import { API_URL } from '../utils/constants'\r\nimport axios from 'axios'\r\nimport { alertActions } from '../actions'\r\nimport { alertConstants } from '../utils/constants'\r\nimport { utils } from '../utils/utils'\r\n\r\nexport const regEventService = {\r\n    regRaceEvent,\r\n    myRegEvents,\r\n    getRegEventDetail,\r\n    getPromoCodeInfo,\r\n    chargeReg,\r\n    getRegEventReport,\r\n    getRegEventReportAll,\r\n    editRegEvent,\r\n    searchPreOrder,\r\n    getAllEventActivity\r\n}\r\n\r\nfunction regRaceEvent (data) {\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n\r\n    return axios({\r\n        headers: headers,\r\n        method: \"POST\",\r\n        url: `${API_URL}/register/addRace`,\r\n        data: data\r\n    }).then(response => {\r\n        //console.log(response)\r\n        return response\r\n    }).catch(error => {\r\n        //console.log(error)\r\n        return { status: error.status, msg: \"Can not add event\" }\r\n    })\r\n\r\n}\r\n\r\nfunction chargeReg(data){\r\n    const headers = {\r\n        'Content-Type': 'multipart/form-data',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"POST\",\r\n        url: `${API_URL}/register/payment`,\r\n        data: data,\r\n    }).then(response => {\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return error\r\n    })\r\n}\r\n\r\nfunction myRegEvents() {\r\n    alertActions.error(alertConstants.LOADING)\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"GET\",\r\n        url: `${API_URL}/register/myRegEvent`\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\r\n    })\r\n}\r\n\r\nfunction getRegEventDetail(regEventID) {\r\n    alertActions.error(alertConstants.LOADING)\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"GET\",\r\n        url: `${API_URL}/register/getRegEvent/${regEventID}`\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\r\n    })\r\n}\r\n\r\nfunction getPromoCodeInfo(code) {\r\n    alertActions.error(alertConstants.LOADING)\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"GET\",\r\n        url: `${API_URL}/coupon/couponInfo/${code}`\r\n    }).then(response => {\r\n        return response\r\n    }).catch(error => {\r\n        return { code: 302, status: error.status, msg: \"code not found\" }\r\n    })\r\n}\r\n\r\nfunction getRegEventReport(data) {\r\n    alertActions.error(alertConstants.LOADING)\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"POST\",\r\n        url: `${API_URL}/register/report`,\r\n        data: data\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\r\n    })\r\n}\r\n\r\nfunction getRegEventReportAll(data) {\r\n    alertActions.error(alertConstants.LOADING)\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"POST\",\r\n        url: `${API_URL}/register/reportAll`,\r\n        data: data\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"Can not load event\" }\r\n    })\r\n}\r\n\r\nfunction editRegEvent(data){\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"PUT\",\r\n        url: `${API_URL}/register/edit/${data.id}`,\r\n        data: data\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"Update register fail\" }\r\n    })\r\n}\r\n\r\nfunction searchPreOrder(data){\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        // headers: headers,\r\n        method: \"POST\",\r\n        url: `https://runex-api.thinkdev.app/api/v2/searchPreOrder`,\r\n        data: data\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        console.log(error)\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"search order fail\" }\r\n    })\r\n}\r\n\r\nfunction getAllEventActivity(data){\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + utils.getToken()\r\n    }\r\n    return axios({\r\n        headers: headers,\r\n        method: \"GET\",\r\n        url: `https://runex-api.thinkdev.app/api/v1/activity/getAllEventActivity/${data}`,\r\n        data: data\r\n    }).then(response => {\r\n        alertActions.error(alertConstants.SUCCESS)\r\n        return response\r\n    }).catch(error => {\r\n        console.log(error)\r\n        alertActions.error(alertConstants.ERROR)\r\n        return { code: 302, status: error.status, msg: \"get Activity fail\" }\r\n    })\r\n}","D:\\react\\new-runex\\src\\services\\activity.service.js",[],"D:\\react\\new-runex\\src\\services\\event.service.js",[],"D:\\react\\new-runex\\src\\store\\index.js",[],"D:\\react\\new-runex\\src\\actions\\index.js",[],"D:\\react\\new-runex\\src\\utils\\constants.js",[],"D:\\react\\new-runex\\src\\utils\\utils.js",[],"D:\\react\\new-runex\\src\\utils\\auth-header.js",[],"D:\\react\\new-runex\\src\\store\\history.js",[],"D:\\react\\new-runex\\src\\store\\store.js",["136"],"import { createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from '../reducers'\r\n\r\n//const loggerMiddleware = createLogger()\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(\r\n    thunkMiddleware\r\n  )\r\n)\r\n\r\nexport default store\r\n","D:\\react\\new-runex\\src\\actions\\user.actions.js",[],"D:\\react\\new-runex\\src\\actions\\event.actions.js",["137","138","139"],"import { eventConstants } from '../utils/constants'\r\nimport { eventService } from '../services'\r\nimport { history } from '../store'\r\nimport Swal from 'sweetalert2'\r\n\r\nexport const eventActions = {\r\n  selectedProducts,\r\n  selectedTicket,\r\n  selectedAddress,\r\n  selectedEvent,\r\n  regEvent,\r\n  regEventByPaypal\r\n}\r\n\r\nfunction selectedProducts (products) {\r\n  return { type: eventConstants.SELECT_PRODUCT_REQUEST, products }\r\n}\r\n\r\nfunction selectedTicket (tickets) {\r\n  return { type: eventConstants.SELECT_TICKET_REQUEST, tickets }\r\n}\r\n\r\nfunction selectedAddress (address) {\r\n  return { type: eventConstants.SELECT_ADDRESS_REQUEST, address }\r\n}\r\n\r\nfunction selectedEvent (events) {\r\n  return { type: eventConstants.SELECT_EVENT_REQUEST, events }\r\n}\r\n\r\nfunction regEvent (data) {\r\n  return dispatch => {\r\n    dispatch(request(data))\r\n    Swal.fire({\r\n      title: 'กำลังส่งข้อมูล',\r\n      showConfirmButton: false,\r\n      onBeforeOpen: () => {\r\n        Swal.showLoading()\r\n        eventService.regEvent(data)\r\n          .then(response => {\r\n            Swal.close()\r\n            if (response.status === 200) {\r\n              if (data.image !== '') {\r\n                const params = {\r\n                  amount: data.total_price,\r\n                  image: data.image,\r\n                }\r\n                dispatch(sendSlip(response.data.data.id, params))\r\n              }\r\n              history.push('/payment-success')\r\n              sessionStorage.removeItem('user_tmp')\r\n              dispatch(success(response.data.data))\r\n            } else {\r\n              dispatch(failure())\r\n            }\r\n          }, error => {\r\n            Swal.close()\r\n            dispatch(failure(error.toString))\r\n            dispatch(error(error.toString()))\r\n          })\r\n      }\r\n    })\r\n  }\r\n\r\n  function request (data) { return { type: eventConstants.REG_EVENT_REQUEST, data } }\r\n  function success (data) { return { type: eventConstants.REG_EVENT_SUCCESS, data } }\r\n  function failure (error) { return { type: eventConstants.REG_EVENT_FAIL, error } }\r\n}\r\n\r\nfunction updateRegEvent (data) {\r\n  return dispatch => {\r\n    dispatch(request(data))\r\n    eventService.regEvent(data)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          if (data.image !== '') {\r\n            const params = {\r\n              amount: data.total_price,\r\n              image: data.image,\r\n            }\r\n            dispatch(sendSlip(response.data.data.id, params))\r\n          }\r\n          history.push('/payment-success')\r\n          sessionStorage.removeItem('user_tmp')\r\n          dispatch(success(response.data.data))\r\n        } else {\r\n          dispatch(failure(response.data.data))\r\n        }\r\n      }, error => {\r\n        dispatch(failure(error.toString))\r\n        dispatch(error(error.toString()))\r\n      })\r\n  }\r\n\r\n  function request (data) { return { type: eventConstants.REG_EVENT_REQUEST, data } }\r\n  function success (data) { return { type: eventConstants.REG_EVENT_SUCCESS, data } }\r\n  function failure (error) { return { type: eventConstants.REG_EVENT_FAIL, error } }\r\n}\r\n\r\nfunction regEventByPaypal (data, params) {\r\n  return dispatch => {\r\n    dispatch(request(data))\r\n    Swal.fire({\r\n      title: 'กำลังส่งข้อมูล',\r\n      showConfirmButton: false,\r\n      onBeforeOpen: () => {\r\n        Swal.showLoading()\r\n        eventService.regEvent(data)\r\n      .then(response => {\r\n        Swal.close()\r\n        if (response.status === 200) {\r\n          if (data.image !== '') {\r\n            // const params = {\r\n            //   amount: data.total_price,\r\n            //   image: data.image,\r\n            // }\r\n            //dispatch(sendSlip(response.data.data.id, params))\r\n\r\n          }\r\n          history.push('/payment-success')\r\n          sessionStorage.removeItem('user_tmp')\r\n          dispatch(success(response.data.data))\r\n        } else {\r\n          dispatch(failure())\r\n        }\r\n      }, error => {\r\n        Swal.close()\r\n        dispatch(failure(error.toString))\r\n        dispatch(error(error.toString()))\r\n      })\r\n      }\r\n    })\r\n  }\r\n\r\n  function request (data) { return { type: eventConstants.REG_EVENT_REQUEST, data } }\r\n  function success (data) { return { type: eventConstants.REG_EVENT_SUCCESS, data } }\r\n  function failure (error) { return { type: eventConstants.REG_EVENT_FAIL, error } }\r\n}\r\n\r\nfunction sendSlip (id, data) {\r\n  return dispatch => {\r\n    dispatch(request(data))\r\n    eventService.sendSlip(id, data)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          //dispatch(success(response.data.data))\r\n        } else {\r\n          //dispatch(failure(response.data.data))\r\n        }\r\n      }, error => {\r\n        //dispatch(failure(error.toString))\r\n        //dispatch(error(error.toString()))\r\n      })\r\n  }\r\n\r\n  function request () { return { type: eventConstants.PAYMENT_UPLOAD_SLIP_REQUEST } }\r\n  function success (data) { return { type: eventConstants.PAYMENT_UPLOAD_SLIP_SUCCESS, data } }\r\n  function failure (error) { return { type: eventConstants.PAYMENT_UPLOAD_SLIP_FAIL, error } }\r\n}","D:\\react\\new-runex\\src\\actions\\alert.actions.js",[],"D:\\react\\new-runex\\src\\reducers\\index.js",[],"D:\\react\\new-runex\\src\\reducers\\registration.reducer.js",[],"D:\\react\\new-runex\\src\\reducers\\alert.reducer.js",[],"D:\\react\\new-runex\\src\\reducers\\eventer.reducer.js",[],"D:\\react\\new-runex\\src\\reducers\\authentication.reducer.js",[],"D:\\react\\new-runex\\src\\reducers\\users.reducer.js",[],"D:\\react\\new-runex\\src\\components\\race\\index.js",[],"D:\\react\\new-runex\\src\\components\\race\\ConditionsModal.js",[],"D:\\react\\new-runex\\src\\components\\race\\RaceProfile.js",["140","141","142","143","144","145","146","147","148","149","150","151","152","153","154"],"import React, { Component } from 'react'\r\nimport { Row, Col, Media, Card, Button, Form, Container } from 'react-bootstrap'\r\nimport iconmedal from '../../../images/icon-medal.svg'\r\nimport iconshirt from '../../../images/icon-shirt.svg'\r\nimport iconshirtactive from '../../../images/icon-tshirt-active.svg'\r\nimport ThaiAddress from \"react-thai-address\";\r\n// import iconrunning from '../../images/icon-running.svg'\r\nimport iconrunningwhite from '../../../images/icon-running-white.svg'\r\n//import moment from 'moment'\r\nimport { utils } from '../../../utils/utils'\r\nimport { IMAGE_URL } from '../../../utils/constants'\r\nimport { history } from '../../../store'\r\nimport { eventService, userService } from '../../../services'\r\n// import { CountryDropdown } from 'react-country-region-selector'\r\nimport Swal from 'sweetalert2'\r\nimport ReactDatePicker from 'react-datepicker'\r\n\r\nexport default class RaceProfile extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: JSON.parse(utils.getUser()),\r\n            fullname: '',\r\n            citycen_id: '',\r\n            passport: '',\r\n            phone: '',\r\n            birthdate: '',\r\n            birthdateApi: '',\r\n            gender: '',\r\n            blood_type: '',\r\n            distant: 'Select distant',\r\n            cities: [],\r\n            tumbons: [],\r\n            address: undefined,\r\n            address_no_tmp: '',\r\n            address_no: '',\r\n            province: '',\r\n            district: '',\r\n            city: '',\r\n            postcode: '',\r\n            validated: false,\r\n            hasAddress: false,\r\n            isVR: true,\r\n            firstname_th: '',\r\n            lastname_th: '',\r\n            firstname: '',\r\n            lastname: '',\r\n            toggleEditAddress: false,\r\n            event: {},\r\n            select_ticket: 'ระบุระยะ, Distance',\r\n            select_distance: 'ระบุระยะ, Distance',\r\n            productSize: -1,\r\n            productOnTicketSize: -1,\r\n            products: [],\r\n            productTickets: [],\r\n            size: undefined,\r\n            priceShow: 0,\r\n            selectTicket: undefined,\r\n            reload: false,\r\n            ticket: {},\r\n            country: '',\r\n            emergency_phone: '',\r\n            emergency_contact: '',\r\n            citycen_type: '',\r\n            reciept_type: 'yourself',\r\n        };\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.getEvent()\r\n        const { user } = this.state\r\n        if (user.address !== undefined && user.address !== null) {\r\n            if (user.address.length > 0) {\r\n                const addr = user.address[0]\r\n                this.setState({ hasAddress: true })\r\n                this.setState({ address_no: addr.address })\r\n                this.setState({ address_no_tmp: addr.address })\r\n                this.setState({ province: addr.province })\r\n                this.setState({ district: addr.district })\r\n                this.setState({ city: addr.city })\r\n                this.setState({ postcode: addr.zipcode })\r\n                var cities = []\r\n                const results = ThaiAddress.search({ province: user.address[0].province });\r\n                //console.log(results);\r\n                results.map(item => {\r\n                    if (!cities.includes(item.city)) {\r\n                        //console.log(item.city)\r\n                        cities.push(item.city)\r\n                    }\r\n                })\r\n\r\n                this.setState({ cities: cities }, () => {\r\n                    this.setState({ district: addr.district }, () => {\r\n                        var tumbons = [];\r\n                        const results = ThaiAddress.search({\r\n                            city: this.state.district,\r\n                            province: this.state.province\r\n                        });\r\n                        //console.log(results);\r\n                        results.map(item => {\r\n                            if (!tumbons.includes(item.tumbon)) {\r\n                                //console.log(item.city)\r\n                                tumbons.push(item.tumbon);\r\n                            }\r\n                        })\r\n                        this.setState({ tumbons: tumbons })\r\n                    })\r\n                })\r\n            }\r\n            this.setState({ fullname: user.fullname })\r\n            this.setState({ firstname: user.firstname })\r\n            this.setState({ lastname: user.lastname })\r\n            if (user.passport !== undefined) {\r\n                this.setState({ passport: user.passport })\r\n                if (user.passport !== '') {\r\n                    this.setState({ citycen_type: 'Passport' })\r\n                } else {\r\n                    this.setState({ citycen_type: 'CiticenID' })\r\n                }\r\n            }\r\n            if (user.citycen_id !== undefined) {\r\n                this.setState({ citycen_id: user.citycen_id })\r\n                if (user.citycen_id !== '') {\r\n                    this.setState({ citycen_type: 'CiticenID' })\r\n                }\r\n            }\r\n            if (user.nationality !== undefined && user.nationality !== '') {\r\n                this.setState({ country: user.nationality })\r\n            } else {\r\n                this.setState({ country: 'Thailand' })\r\n            }\r\n            this.setState({ gender: user.gender })\r\n            this.setState({ phone: user.phone })\r\n            this.setState({ birthdate: user.birthdate })\r\n            this.setState({ birthdateApi: user.birthdate })\r\n            this.setState({ blood_type: user.blood_type })\r\n            this.setState({ emergency_contact: user.emergency_contact })\r\n            this.setState({ emergency_phone: user.emergency_phone })\r\n        }\r\n        //this.getEvent()\r\n    }\r\n\r\n    // componentWillReceiveProps (nextProps) {\r\n    //     if (nextProps.event) {\r\n    //         const { event } = this.props\r\n    //         if (event !== undefined && event !== null) {\r\n    //             if (event.event !== null && event.event !== undefined) {\r\n    //                 if (event.event.category.id === '5d7dbc800ea2d6053ea1e226') {\r\n    //                     this.setState({ isVR: true })\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    getEvent () {\r\n        const { eventID } = this.props.match.params\r\n        // const { eventID } = this.props.route.match.params\r\n\r\n        eventService.getEventInfo(eventID).then(res => {\r\n            if (res.data.code === 200) {\r\n                this.setState({\r\n                    event: res.data.data.event\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    onSelectBirthdate = (e) => {\r\n        //console.log(e)\r\n        //`${this.state.toDateReg}T${this.state.toTimeReg}:00`,\r\n        this.setState({ birthdateApi: utils.convertDateToApi(e) })\r\n        this.setState({ birthdate: e })\r\n    }\r\n\r\n    onSelectGender = e => {\r\n        this.setState({ gender: e.target.value })\r\n    }\r\n\r\n    onSelectCitycen = e => {\r\n        this.setState({ citycen_type: e.target.value })\r\n    }\r\n\r\n    onChangeCitycenValue = e => {\r\n        const { citycen_type } = this.state\r\n        if (citycen_type === 'CiticenID') {\r\n            this.setState({ citycen_id: e.target.value })\r\n        } else {\r\n            this.setState({ passport: e.target.value })\r\n        }\r\n    }\r\n\r\n    onSelectBloodType = e => {\r\n        this.setState({ blood_type: e.target.value })\r\n    }\r\n\r\n    selectCountry (val) {\r\n        this.setState({ country: val });\r\n    }\r\n\r\n    selectRegion (val) {\r\n        this.setState({ region: val });\r\n    }\r\n\r\n    onSelectedprovince = e => {\r\n        this.setState({ province: e.target.value }, () => {\r\n            var cities = [];\r\n            const results = ThaiAddress.search({ province: this.state.province });\r\n            //console.log(results);\r\n            results.map(item => {\r\n                if (!cities.includes(item.city)) {\r\n                    //console.log(item.city)\r\n                    cities.push(item.city)\r\n                }\r\n            })\r\n\r\n            this.setState({ cities: cities });\r\n            this.setState({ tumbons: [] });\r\n            this.setState({ postcode: \"\" });\r\n        });\r\n    };\r\n\r\n    onSelectedDistrict = e => {\r\n        this.setState({ district: e.target.value }, () => {\r\n            var tumbons = [];\r\n            const results = ThaiAddress.search({\r\n                city: this.state.district,\r\n                province: this.state.province\r\n            });\r\n            //console.log(results);\r\n            results.map(item => {\r\n                if (!tumbons.includes(item.tumbon)) {\r\n                    //console.log(item.city)\r\n                    tumbons.push(item.tumbon);\r\n                }\r\n            });\r\n            this.setState({ tumbons: tumbons });\r\n            this.setState({ postcode: \"\" });\r\n            this.setState({ address: undefined });\r\n        });\r\n    };\r\n\r\n    onSelectedTumbon = e => {\r\n        //console.log(e.target.value);\r\n        const results = ThaiAddress.search({\r\n            tumbon: e.target.value,\r\n            city: this.state.district,\r\n            province: this.state.province\r\n        });\r\n        //console.log(results);\r\n        results.map(item => {\r\n            if (\r\n                item.tumbon === e.target.value &&\r\n                item.city === this.state.district &&\r\n                item.province === this.state.province\r\n            ) {\r\n                this.setState({ city: item.tumbon })\r\n                this.setState({ postcode: '' + item.zipcode });\r\n                this.setState({ address: item });\r\n                //console.log(item)\r\n            }\r\n        });\r\n\r\n        //this.setState({ tumbons: tumbons });\r\n    };\r\n\r\n    renderProvinces () {\r\n        ThaiAddress.search({ province: \"\" });\r\n        var arr = [];\r\n        const results = ThaiAddress.provinces;\r\n\r\n        results.map((item) => {\r\n            arr.push(\r\n                <option key={item} value={item}>\r\n                    {item}\r\n                </option>\r\n            );\r\n        });\r\n\r\n        return arr;\r\n    }\r\n\r\n    onChangeTicket = (e) => {\r\n        const { event } = this.state\r\n        event.ticket.map((item, index) => {\r\n            if (item.id === e.target.value) {\r\n                //console.log(e.target.value)\r\n                this.setState({ ticket: item })\r\n                //this.setState({select_ticket:e.target.value})\r\n                this.setState({ selectTicket: undefined })\r\n                this.setState({ productTickets: [] })\r\n                //console.log(item)\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    onSelectedSize = (size, product, tick) => {\r\n        const { productTickets, reload } = this.state\r\n        var arr = productTickets\r\n        var currentIndex = this.checkTicketIndex(product)\r\n        if (currentIndex !== -1) {\r\n            arr.splice(currentIndex, 1)\r\n            const item = {\r\n                product: product,\r\n                type: size.name,\r\n                price: size.price,\r\n                remark: size.remark,\r\n                ticket: this.state.ticket\r\n            }\r\n            arr.push(item)\r\n            \r\n        } else {\r\n            //products.splice(currentIndex, 1)\r\n            const item = {\r\n                product: product,\r\n                type: size.name,\r\n                price: size.price,\r\n                remark: size.remark,\r\n                ticket: this.state.ticket\r\n            }\r\n            arr.push(item)\r\n        }\r\n        this.setState({ productTickets: arr })\r\n        this.setState({ reload: !reload })\r\n        \r\n    }\r\n\r\n    onSelectedProduct = (isDeselect, item, type) => {\r\n        const { products, reload } = this.state\r\n        var arr = products\r\n        var currentIndex = this.checkProductIndex(item)\r\n        if (isDeselect) {\r\n            if (currentIndex !== -1) {\r\n                arr.splice(currentIndex, 1)\r\n            }\r\n        } else {\r\n            if (currentIndex !== -1) {\r\n                arr.splice(currentIndex, 1)\r\n                const product = {\r\n                    id: item.id,\r\n                    type: type.name,\r\n                    price: type.price,\r\n                    product: item\r\n                }\r\n                arr.push(product)\r\n            } else {\r\n                //products.splice(currentIndex, 1)\r\n                const product = {\r\n                    id: item.id,\r\n                    type: type.name,\r\n                    price: type.price,\r\n                    product: item\r\n                }\r\n                arr.push(product)\r\n            }\r\n        }\r\n        this.setState({ products: arr })\r\n        this.setState({ reload: !reload })\r\n\r\n        //console.log(arr)\r\n    }\r\n\r\n    checkProductIndex = (item) => {\r\n        const { products } = this.state\r\n        var check = -1\r\n        products.map((element, index) => {\r\n            if (element.id === item.id) {\r\n                check = index\r\n            }\r\n        })\r\n        return check\r\n    }\r\n\r\n    checkProductAndSize = (item, type) => {\r\n        const { products } = this.state\r\n        var check = false\r\n        products.map((element) => {\r\n            if (element.id === item.id && element.type === type.name) {\r\n                check = true\r\n            }\r\n\r\n        })\r\n        return check\r\n    }\r\n\r\n    checkTicketIndex = (product, type) => {\r\n        const { productTickets } = this.state\r\n        var check = -1\r\n        productTickets.map((element, index) => {\r\n            if (element.product.id === product.id || element.product.reuse === product.reuse) {\r\n                check = index\r\n            }\r\n        })\r\n        return check\r\n        // if (selectTicket === undefined) {\r\n        //     return false\r\n        // }\r\n        // if (product.id === selectTicket.product.id && selectTicket.type === type.name) {\r\n        //     check = true\r\n        // }\r\n        // return check\r\n    }\r\n\r\n    checkProductTicket = (product, type) => {\r\n        const { productTickets } = this.state\r\n        var check = false\r\n        productTickets.map((element) => {\r\n            if (product.id === element.product.id && element.type === type.name) {\r\n                check = true\r\n            }\r\n\r\n        })\r\n        return check\r\n    }\r\n\r\n    showCitycen () {\r\n        const { citycen_type, citycen_id, passport } = this.state\r\n        if (citycen_type === 'CiticenID') {\r\n            return citycen_id\r\n        } else {\r\n            return passport\r\n        }\r\n    }\r\n\r\n    showPrice () {\r\n        const { products, event, ticket, reciept_type } = this.state\r\n        var total = 0\r\n        if (event.ticket !== undefined && event.ticket !== null) {\r\n            if (ticket !== undefined) {\r\n                if (ticket.price !== undefined) {\r\n                    total = ticket.price\r\n                    products.map((element) => (\r\n                        total += element.price\r\n                    ))\r\n                }\r\n            }\r\n            if (reciept_type === 'postman') {\r\n                total += 60\r\n            }\r\n        }\r\n        return total\r\n    }\r\n\r\n    isSold (event) {\r\n        var check = false\r\n        event.product.map(item => {\r\n            if (item.status === 'sold') {\r\n                check = true\r\n            }\r\n        })\r\n        return check\r\n    }\r\n\r\n    saveData = () => {\r\n        var address = {\r\n            address: this.state.address_no,\r\n            province: this.state.province,\r\n            district: this.state.district,\r\n            city: this.state.city,\r\n            zipcode: this.state.postcode\r\n        }\r\n\r\n        var data = this.state.user\r\n        data.birthdate = utils.convertDateToApi(this.state.birthdateApi)\r\n        data.phone = this.state.phone\r\n        data.passport = this.state.passport\r\n        data.emergency_contact = this.state.emergency_contact\r\n        data.emergency_phone = this.state.emergency_phone\r\n        data.gender = this.state.gender\r\n        data.citycen_id = this.state.citycen_id\r\n        data.address = [address]\r\n        data.firstname = this.state.firstname\r\n        data.lastname = this.state.lastname\r\n        data.blood_type = this.state.blood_type\r\n        data.nationality = this.state.country\r\n        data.fullname = this.state.firstname + ' ' + this.state.lastname\r\n        userService.updateUser(data).then(response => {\r\n            if (response.status === 200) {\r\n                // console.log(response)\r\n                const { productTickets, ticket, event, products, reciept_type } = this.state\r\n\r\n                if (ticket.id === undefined || ticket.id === null) {\r\n                    Swal.fire(\r\n                        '',\r\n                        'Please select distance.',\r\n                        'warning'\r\n                    )\r\n                } else if (ticket.product != null && productTickets.length === 0) {\r\n                    Swal.fire(\r\n                        '',\r\n                        'Please select shirt size.',\r\n                        'warning'\r\n                    )\r\n                } else {\r\n                    var check = 0\r\n\r\n                    if (ticket.product !== null) {\r\n                        ticket.product.map((item) => (\r\n                            item.show ? check += 1 : check += 0\r\n                        ))\r\n                        if (productTickets.length === check) {\r\n                            let ticket_options = {\r\n                                user_option: data,\r\n                                product: products,\r\n                                tickets: productTickets,\r\n                                total_price: this.showPrice(),\r\n                                reciept_type: reciept_type\r\n                            }\r\n                            history.push({\r\n                                pathname: '/racesummary',\r\n                                state: {\r\n                                    ticket: productTickets,\r\n                                    product: products,\r\n                                    event: event,\r\n                                    ticket_options: [ticket_options],\r\n                                    index: 0\r\n                                }\r\n                            })\r\n\r\n                        } else {\r\n                            Swal.fire(\r\n                                '',\r\n                                'Please select product on ticket.',\r\n                                'warning'\r\n                            )\r\n                        }\r\n                    } else if (ticket.price === 0) {\r\n                        var arr = productTickets\r\n                        const item = {\r\n                            product: {},\r\n                            type: '',\r\n                            price: 0.00,\r\n                            ticket: ticket\r\n                        }\r\n                        arr.push(item)\r\n                        this.setState({ productTickets: arr }, () => {\r\n                            let ticket_options = {\r\n                                user_option: data,\r\n                                product: products,\r\n                                tickets: productTickets,\r\n                                total_price: this.showPrice(),\r\n                                reciept_type: reciept_type\r\n                            }\r\n                            history.push({\r\n                                pathname: '/racesummary',\r\n                                state: {\r\n                                    ticket: ticket,\r\n                                    product: productTickets,\r\n                                    event: event,\r\n                                    ticket_options: ticket_options,\r\n                                    index: 0\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                Swal.fire(\r\n                    '',\r\n                    'ไม่สามารถบันทึกข้อมูลได้',\r\n                    'warning'\r\n                )\r\n            }\r\n        }, error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    onClickConfirm = () => {\r\n        this.saveData()\r\n    }\r\n\r\n    render () {\r\n\r\n        const { validated, birthdate, citycen_id, gender, phone, address_no, province, district, postcode, city } = this.state\r\n        const { event, productOnTicketSize, ticket, blood_type, country, emergency_contact, emergency_phone } = this.state\r\n        const handleValidate = e => {\r\n            const form = e.currentTarget;\r\n            e.preventDefault();\r\n            if (form.checkValidity() === false) {\r\n                e.stopPropagation();\r\n            } else {\r\n                //\r\n                this.onClickConfirm()\r\n            }\r\n            this.setState({ validated: true });\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Container className=\"mt-5\" >\r\n                    <Card >\r\n                        <Card.Body>\r\n                            <Row>\r\n                                <Col md={4}>\r\n                                    <Card className=\"mb-5\">\r\n                                        <Card.Img variant=\"top\" src={event ? IMAGE_URL + event.cover : ''} />\r\n                                        <Card.Body>\r\n                                            <h4 className=\"h4\">{event ? event.name : ''}</h4>\r\n                                            <p className=\"text-muted mb-4\" style={{ color: '#FA6400', display: ticket.price !== undefined ? \"block\" : 'none' }} >ราคาค่าสมัคร</p>\r\n                                            <h1 className=\"mb-0\" style={{ color: '#FA6400', display: ticket.price !== undefined ? \"block\" : 'none' }}>{this.showPrice() + ' ' + 'THB'} </h1>\r\n                                            <p className=\"text-muted mb-4\" style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>(including. postage fee)</p>\r\n                                            <Card.Title style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>Finisher’s Award</Card.Title>\r\n                                            <Media style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>\r\n                                                <img\r\n                                                    width={35}\r\n                                                    height={35}\r\n                                                    className=\"mr-1\"\r\n                                                    src={iconmedal}\r\n                                                    alt=\"runex\"\r\n                                                />\r\n                                                <Media.Body style={{ display: event ? (event.is_free === true ? \"none\" : \"block\") : 'none' }}>\r\n                                                    <h6 className=\"mb-1 pt-1\">Finisher's Medal</h6>\r\n                                                </Media.Body>\r\n                                            </Media>\r\n                                        </Card.Body>\r\n                                        <Card.Footer className=\"bg-white mb-3\">\r\n                                            <h6>Hurry! Registration close in</h6>\r\n                                            <ul className=\"list-group list-group-horizontal-md text-center\">\r\n                                                <li className=\"list-group-item px-3 border-0\">\r\n                                                    <h6>{event ? utils.convertDateApiToString(event.end_reg) : ''}<small className=\"ml-1 text-muted\"></small></h6>\r\n                                                </li>\r\n                                                {/* <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>13<small className=\"ml-1 text-muted\">days</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>7<small className=\"ml-1 text-muted\">hours.</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>45<small className=\"ml-1 text-muted\">mins.</small></h6>\r\n                                        </li>\r\n                                        <li className=\"list-group-item px-3 border-0\">\r\n                                            <h6>15<small className=\"ml-1 text-muted\">secs</small></h6>\r\n                                        </li> */}\r\n                                            </ul>\r\n                                        </Card.Footer>\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col md={8}>\r\n                                    <Card>\r\n                                        <Card.Body>\r\n                                            <Card.Title>กรอกข้อมูลผู้สมัคร</Card.Title>\r\n                                            <Form className=\"mb-5\" validated={validated} onSubmit={handleValidate}>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col} controlId=\"validationCustom01\">\r\n                                                        <Form.Label>ชื่อ,Name<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            required\r\n                                                            type=\"text\"\r\n                                                            value={this.state.firstname}\r\n                                                            placeholder=\"First name\"\r\n                                                            onChange={e => this.setState({ firstname: e.target.value })}\r\n                                                        />\r\n                                                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                    <Form.Group as={Col} controlId=\"validationCustom02\">\r\n                                                        <Form.Label>นามสกุล, Last name<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            required\r\n                                                            type=\"text\"\r\n                                                            value={this.state.lastname}\r\n                                                            placeholder=\"Last name\"\r\n                                                            onChange={e => this.setState({ lastname: e.target.value })}\r\n                                                        />\r\n                                                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Group controlId=\"formBasicBirthday\">\r\n                                                    <Form.Row>\r\n                                                        <Col xs={5}>\r\n                                                            <Form.Label>บัตรประชาชน, Passport<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control value={this.state.citycen_type} as=\"select\" onChange={this.onSelectCitycen} required>\r\n                                                                <option value=\"CiticenID\">บัตรประชาชน</option>\r\n                                                                <option value=\"Passport\">Passport</option>\r\n                                                            </Form.Control>\r\n                                                        </Col>\r\n                                                        <Col xs={7}>\r\n                                                            <Form.Label>&nbsp;<span className=\"text-danger\"> </span></Form.Label>\r\n                                                            <Form.Control value={this.showCitycen()} minLength='13' type=\"number\" placeholder=\"ระบุหมายเลข, Specify number\" required onChange={this.onChangeCitycenValue} />\r\n                                                            <Form.Control.Feedback type=\"invalid\">บัตรประชาชน หรือ Passport ID is required!</Form.Control.Feedback>\r\n\r\n                                                        </Col>\r\n\r\n                                                    </Form.Row>\r\n                                                </Form.Group>\r\n                                                <Form.Group controlId=\"formBasicBirthday\">\r\n                                                    <Form.Row>\r\n                                                        <Col xs={7}>\r\n\r\n                                                            <Form.Label>เบอร์โทรศัพท์, Phone<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control minLength='10' type=\"number\" placeholder=\"เบอร์โทรศัพท์, Phone\" value={phone} required onChange={e => this.setState({ phone: e.target.value })} />\r\n                                                            <Form.Control.Feedback type=\"invalid\">เบอร์โทรศัพท์, Phone is required!</Form.Control.Feedback>\r\n\r\n                                                        </Col>\r\n                                                        <Col xs={5}>\r\n\r\n                                                            <Form.Label>เพศ, Gender<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control value={gender} as=\"select\" onChange={this.onSelectGender} required>\r\n                                                                <option value=\"\">ระบุ, Select</option>\r\n                                                                <option value=\"Male\">Male</option>\r\n                                                                <option value=\"Female\">Female</option>\r\n                                                            </Form.Control>\r\n                                                            <Form.Control.Feedback type=\"invalid\">Gender is required!</Form.Control.Feedback>\r\n\r\n                                                        </Col>\r\n                                                    </Form.Row>\r\n                                                </Form.Group>\r\n                                                <Form.Group controlId=\"formBasicBirthday\">\r\n                                                    <Form.Row>\r\n                                                        <Col xs={7}>\r\n                                                            <Form.Label>วัน เดือน ปีเกิด, Birthday <span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Row>\r\n                                                                <ReactDatePicker\r\n                                                                    // selected={utils.convertDateApiToString(birthdate)}\r\n                                                                    value={utils.convertDateApiToString(birthdate)}\r\n                                                                    onChange={this.onSelectBirthdate}\r\n                                                                    peekNextMonth\r\n                                                                    showMonthDropdown\r\n                                                                    showYearDropdown\r\n                                                                    maxDate={new Date()}\r\n                                                                    className=\"form-control\"\r\n                                                                    dropdownMode=\"select\"\r\n                                                                    placeholderText='วันที่, DD เดือน, MM ปี, YYYY'\r\n                                                                    required\r\n                                                                />\r\n                                                                {/* <Form.Control value={utils.convertDateApiToString(birthdate)} type=\"date\" placeholder=\"วันที่, DD เดือน, MM ปี, YYYY\" max={moment().format(\"YYYY-MM-DD\")} required onChange={this.onSelectBirthdate} /> */}\r\n                                                                <Form.Control.Feedback type=\"invalid\">วัน เดือน ปีเกิด, Birthday  is required!</Form.Control.Feedback>\r\n                                                            </Form.Row>\r\n                                                        </Col>\r\n                                                        <Col xs={5}>\r\n                                                            <Form.Label>กรุ๊ปเลือด, Blood type<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Control value={blood_type} as=\"select\" onChange={this.onSelectBloodType} required>\r\n                                                                <option value=\"\">ระบุ, Select</option>\r\n                                                                <option value=\"A\">A</option>\r\n                                                                <option value=\"B\">B</option>\r\n                                                                <option value=\"AB\">AB</option>\r\n                                                                <option value=\"O\">O</option>\r\n                                                            </Form.Control>\r\n                                                            <Form.Control.Feedback type=\"invalid\">Gender is required!</Form.Control.Feedback>\r\n                                                        </Col>\r\n                                                    </Form.Row>\r\n                                                </Form.Group>\r\n                                                {/* <Form.Group>\r\n                                                    <Form.Label>สัญชาติ, Nationality<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <Form.Row>\r\n                                                        <CountryDropdown\r\n                                                            value={country}\r\n                                                            onChange={(val) => this.selectCountry(val)}\r\n                                                            style={{\r\n                                                                backgroundColor: '#fff',\r\n                                                                color: '#3b3b3b',\r\n                                                                fontSize: 16,\r\n                                                                height: 38\r\n                                                            }} />\r\n                                                        <Form.Control.Feedback type=\"invalid\">สัญชาติ, nationality is required!</Form.Control.Feedback>\r\n                                                    </Form.Row>\r\n\r\n                                                </Form.Group> */}\r\n                                                <Form.Group controlId=\"formGridAddress\">\r\n                                                    <Form.Label>ที่อยู่, Address<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <Form.Control as=\"textarea\" rows=\"2\" placeholder=\"\" value={address_no} required onChange={e => this.setState({ address_no: e.target.value })} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">ที่อยู่, Address is required!</Form.Control.Feedback>\r\n                                                </Form.Group>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col} controlId=\"formGridCity\">\r\n                                                        <Form.Label>จังหวัด, Province<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            onChange={this.onSelectedprovince}\r\n                                                            required\r\n                                                            value={province}\r\n                                                        >\r\n                                                            <option value=\"\">Select จังหวัด, Province</option>\r\n                                                            {this.renderProvinces()}\r\n                                                        </Form.Control>\r\n\r\n                                                        <Form.Control.Feedback type=\"invalid\">จังหวัด, Province is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col} controlId=\"formGridState\">\r\n                                                        <Form.Label>อำเภอ, District<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            onChange={this.onSelectedDistrict}\r\n                                                            required\r\n                                                            value={district}\r\n                                                        >\r\n                                                            <option value=\"\">Select อำเภอ, District</option>\r\n                                                            {this.state.cities.map((item) => (\r\n                                                                <option key={item} value={item}>\r\n                                                                    {item}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </Form.Control>\r\n                                                        <Form.Control.Feedback type=\"invalid\">อำเภอ, District is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col} controlId=\"formGridTumbon\">\r\n                                                        <Form.Label>ตำบล, Sub District<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            onChange={this.onSelectedTumbon}\r\n                                                            required\r\n                                                            value={city}\r\n                                                        >\r\n                                                            <option value=\"\">Select ตำบล, Sub District</option>\r\n                                                            {this.state.tumbons.map((item) => (\r\n                                                                <option key={item} value={item}>\r\n                                                                    {item}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </Form.Control>\r\n                                                        <Form.Control.Feedback type=\"invalid\">ตำบล, Sub District is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col} controlId=\"formGridZip\">\r\n                                                        <Form.Label>รหัสไปรษณีย์, Postcode<span className=\"text-danger\">*</span></Form.Label>\r\n                                                        <Form.Control required defaultValue={postcode} />\r\n                                                        <Form.Control.Feedback type=\"invalid\">Postcode is required!</Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n                                                <hr color='#FA6400'></hr>\r\n\r\n                                                <Form.Group controlId=\"formTicket\">\r\n                                                    <Form.Label>ระบุระยะ, Distance<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <select className=\"custom-select\" onChange={this.onChangeTicket.bind()} required>\r\n                                                        <option value='' key='99'>{this.state.select_ticket}</option>\r\n                                                        {event.ticket !== undefined ? event.ticket.map((item, index) => (\r\n                                                            <option value={item.id} key={index}>{item.distance !== 0 ? item.title + ' ' + item.distance + ' km.' : item.title}</option>\r\n                                                        )) : ''}\r\n                                                    </select>\r\n                                                </Form.Group>\r\n                                                <Form.Label hidden={ticket.product === undefined}>ขนาดไซต์เสื้อ, T-Shirt Size<span className=\"text-danger\">*</span></Form.Label>\r\n                                                {ticket.product ? event.product ? event.product.map((prod, index) => (\r\n                                                    ticket.product.map((item) => (\r\n                                                        (item.id === prod.id && item.show) ? (\r\n                                                            <Form.Group className=\"mb-5\" key={ticket.id + index}>\r\n                                                                <Form.Label>{prod.name}<span className=\"text-danger\"></span></Form.Label>\r\n                                                                {/* <Form.Label>{prod.detail}<span className=\"text-danger\"></span></Form.Label> */}\r\n                                                                <Row className=\"pirate\">\r\n                                                                    {prod.type ? prod.type.map((type, index) => (\r\n                                                                        <Col className=\"col-half-offset\" sm=\"2\" xs=\"2\" key={prod.id + index}>\r\n                                                                            <Card style={{ cursor: 'pointer', borderColor: this.checkProductTicket(prod, type) ? '#FA6400' : 'rgba(0,0,0,0.19)' }} className=\"text-center\" >\r\n                                                                                <Card.Body className=\"p-2\" style={{ color: this.checkProductTicket(prod, type) ? '#FA6400' : 'rgba(0,0,0,0.75)' }}\r\n                                                                                    onClick={this.onSelectedSize.bind(this, type, prod, ticket)}>\r\n\r\n                                                                                    <img\r\n                                                                                        width={25}\r\n                                                                                        height={20}\r\n                                                                                        className=\"mr-1\"\r\n                                                                                        src={this.checkProductTicket(prod, type) ? iconshirtactive : iconshirt}\r\n                                                                                        alt=\"runex\"\r\n                                                                                    />\r\n                                                                                    <h6 className=\"card-text\">{type.name}<br></br><small>{type.remark}</small></h6>\r\n                                                                                </Card.Body>\r\n                                                                            </Card>\r\n                                                                        </Col>\r\n                                                                    )) : ''}\r\n                                                                </Row>\r\n                                                            </Form.Group>\r\n                                                        ) : ''\r\n                                                    ))\r\n                                                )) : '' : ''}\r\n                                                <Form.Row>\r\n                                                    <Form.Label style={{ display: event.product ? (!this.isSold(event) ? \"none\" : \"block\") : 'none' }}>ซื้อสินค้าเพิ่มเติม</Form.Label>\r\n                                                    {event.product ? event.product.map((item, index) => (\r\n                                                        item.status === 'sold' ? (<Form.Group className=\"mb-5\" key={index}>\r\n\r\n                                                            <Form.Label>{item.name}<span className=\"text-danger\"></span></Form.Label>\r\n                                                            <Form.Label>{item.detail}<span className=\"text-danger\"></span></Form.Label>\r\n                                                            <Row>\r\n                                                                <Col>\r\n                                                                    <img\r\n                                                                        width={64}\r\n                                                                        height={64}\r\n                                                                        className=\"mr-3\"\r\n                                                                        style={{ marginBottom: 5 }}\r\n                                                                        src={item.image ? IMAGE_URL + item.image[0].path_url : ''}\r\n                                                                        alt=\"\"\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                            <Row className=\"size\">\r\n                                                                {item ? item.type.map((type, index) => (\r\n                                                                    <Col className=\"col-half-offset\" sm=\"2\" md=\"2\" key={item.id + index}>\r\n                                                                        <Card style={{ cursor: 'pointer', borderColor: this.checkProductAndSize(item, type) ? '#FA6400' : 'rgba(0,0,0,0.19)' }}\r\n                                                                            className=\"text-center\"\r\n                                                                        >\r\n                                                                            <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)') }}\r\n                                                                                onClick={this.onSelectedProduct.bind(this, false, item, type)}>\r\n\r\n                                                                                <h6 className=\"card-text\">{type.name}<br></br><small>{type.remark}</small></h6>\r\n                                                                            </Card.Body>\r\n                                                                        </Card>\r\n                                                                    </Col>\r\n                                                                )) : ''}\r\n                                                                {/* <Col className=\"\" sm=\"12\" md=\"2\"  key={item.id + '99'}>\r\n                                            <Card style={{ borderColor: (this.checkProductIndex(item) === -1) ? '#FA6400' : 'rgba(0,0,0,0.19)', padding: 1 }} \r\n                                            className=\"text-center\" >\r\n                                                <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)'), padding: 1 }}\r\n                                                    onClick={this.onSelectedProduct.bind(this, true, item, null)}>\r\n\r\n                                                    <h6 className=\"card-text\">ไม่ได้เลือก<br></br><small></small></h6>\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        </Col> */}\r\n                                                            </Row>\r\n                                                            <Row className=\"size\">\r\n                                                                <Col className=\"mt-2\" sm=\"2\" xs=\"4\" key={item.id + '99'}>\r\n                                                                    <Card style={{ cursor: 'pointer', borderColor: (this.checkProductIndex(item) === -1) ? '#FA6400' : 'rgba(0,0,0,0.19)', padding: 1 }}\r\n                                                                        className=\"text-center\" >\r\n                                                                        <Card.Body className=\"p-2\" style={{ color: (productOnTicketSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)'), padding: 1 }}\r\n                                                                            onClick={this.onSelectedProduct.bind(this, true, item, null)}>\r\n\r\n                                                                            <h6 className=\"card-text\">ไม่ได้เลือก<br></br><small></small></h6>\r\n                                                                        </Card.Body>\r\n                                                                    </Card>\r\n                                                                </Col>\r\n                                                            </Row>\r\n\r\n                                                        </Form.Group>) : ''\r\n                                                    )) : ''}\r\n                                                    {/* {event.event ? event.event.product.map((product, index) => (\r\n                                    <Form.Group key={index}>\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <Media>\r\n                                                    <img\r\n                                                        width={64}\r\n                                                        height={64}\r\n                                                        className=\"mr-3\"\r\n                                                        src={product.image ? IMAGE_URL + product.image[0].path_url : ''}\r\n                                                        alt=\"Generic placeholder\"\r\n                                                    />\r\n                                                    <Media.Body>\r\n                                                        <div className=\"clearfix\">\r\n                                                            <h6 className=\"float-left\">{product.name}</h6>\r\n                                                            <h6 className=\"float-right\">Price {product.type[0].price + ' ' + (product.currency !== undefined ? product.currency : 'THB')}</h6>\r\n                                                        </div>\r\n                                                        <ul className=\"list-group list-group-horizontal-lg\" style={{ marginBottom: 8, marginRight: 8 }}>\r\n                                                            {product.type.map((item, index) => (\r\n                                                                <li key={index} className=\"list-group-item rounded-pill mr-1 py-1 mt-1\"\r\n                                                                    style={{ borderColor: (productSize === index ? '#FA6400' : 'rgba(0,0,0,0.19)'), color: (productSize === index ? '#FA6400' : 'rgba(0,0,0,0.75)') }}\r\n                                                                    onClick={this.onSelectedProduct.bind(this, index, product)} >{item.name}</li>\r\n                                                            ))}\r\n                                                            \r\n                                                        </ul>\r\n                                                        <ul className=\"list-group list-group-horizontal-lg mt-1\">\r\n                                                            <li  className=\"list-group-item rounded-pill mr-1 py-1\"\r\n                                                                style={{ borderColor: (productSize === -1 ? '#FA6400' : 'rgba(0,0,0,0.19)'), color: (productSize === -1 ? '#FA6400' : 'rgba(0,0,0,0.75)') }}\r\n                                                                onClick={this.onSelectedProduct.bind(this, -1, product)} >ไม่ได้เลือก</li>\r\n                                                        </ul>\r\n                                                    </Media.Body>\r\n                                                </Media>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Form.Group>\r\n                                )) : ''} */}\r\n                                                </Form.Row>\r\n\r\n                                                <fieldset>\r\n                                                    <Form.Group as={Row}>\r\n\r\n                                                        <Col sm={10}>\r\n                                                            <Form.Label>รูปแบบการจัดส่ง , Shipping<span className=\"text-danger\">*</span></Form.Label>\r\n                                                            <Form.Check\r\n                                                                type=\"radio\"\r\n                                                                label={'รับเสื้อที่หน้างาน ' + event.receive_location}\r\n                                                                name=\"shippingRadios\"\r\n                                                                id=\"RecieptMyself\"\r\n                                                                defaultChecked={true}\r\n                                                                onClick={() => this.setState({ reciept_type: 'yourself' })}\r\n                                                            />\r\n                                                            <Form.Check\r\n                                                                type=\"radio\"\r\n                                                                label='รับเสื้อทางไปรษณีย์ (ค่าจัดส่ง 60  บาท)'\r\n                                                                name=\"shippingRadios\"\r\n                                                                id=\"RecieptPost\"\r\n                                                                onClick={() => this.setState({ reciept_type: 'postman' })}\r\n                                                                style={{ display: event ? (!event.is_post || utils.isAfterDate(event.post_end_date) ? \"none\" : \"block\") : 'none' }}\r\n                                                            />\r\n                                                        </Col>\r\n                                                    </Form.Group>\r\n                                                </fieldset>\r\n                                                <hr color='#FA6400'></hr>\r\n\r\n                                                <Form.Group controlId=\"formEmergencyContact\">\r\n                                                    <Form.Label>ชื่อผู้ติดต่อฉุกเฉิน, Emergency contact list<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <Form.Control type=\"text\" placeholder=\"ชื่อผู้ติดต่อฉุกเฉิน, Emergency contact\" value={emergency_contact} required onChange={e => this.setState({ emergency_contact: e.target.value })} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">ชื่อผู้ติดต่อฉุกเฉิน, Emergency contact is required!</Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group controlId=\"formEmergencyPhone\">\r\n                                                    <Form.Label>เบอร์โทรผู้ติดต่อฉุกเฉิน, Emergency contact number<span className=\"text-danger\">*</span></Form.Label>\r\n                                                    <Form.Control type=\"text\" placeholder=\"เบอร์โทรผู้ติดต่อฉุกเฉย, Emergency contact number\" value={emergency_phone} required onChange={e => this.setState({ emergency_phone: e.target.value })} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">เบอร์โทรผู้ติดต่อฉุกเฉิน, Emergency contact number is required!</Form.Control.Feedback>\r\n                                                </Form.Group>\r\n                                                <Row className=\"justify-content-md-center\">\r\n                                                    <Col md={\"auto\"} sm={\"auto\"}>\r\n                                                        <Button type=\"submit\" className=\"btn-custom rounded-pill px-4 ml-2\" >\r\n                                                            <img\r\n                                                                width={25}\r\n                                                                height={20}\r\n                                                                className=\"mr-1\"\r\n                                                                src={iconrunningwhite}\r\n                                                                alt=\"runex\"\r\n                                                            />ยืนยัน</Button>\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                                {/* <Button type='button' variant=\"outline-secondary\" className=\"float-right rounded-pill px-4\"\r\n                                    onClick={this.onClickBack.bind(this, event)}>Back</Button> */}\r\n                                            </Form>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\react\\new-runex\\src\\components\\visual\\RaceProfile.js",["155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171"],"D:\\react\\new-runex\\src\\components\\race\\Register.js",["172","173","174"],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":1,"column":8,"nodeType":"181","messageId":"182","endLine":1,"endColumn":12},{"ruleId":"179","severity":1,"message":"183","line":242,"column":10,"nodeType":"181","messageId":"182","endLine":242,"endColumn":17},{"ruleId":"179","severity":1,"message":"184","line":243,"column":9,"nodeType":"181","messageId":"182","endLine":243,"endColumn":23},{"ruleId":"179","severity":1,"message":"185","line":251,"column":10,"nodeType":"181","messageId":"182","endLine":251,"endColumn":24},{"ruleId":"179","severity":1,"message":"186","line":174,"column":11,"nodeType":"181","messageId":"182","endLine":174,"endColumn":18},{"ruleId":"179","severity":1,"message":"187","line":3,"column":10,"nodeType":"181","messageId":"182","endLine":3,"endColumn":22},{"ruleId":"179","severity":1,"message":"188","line":70,"column":10,"nodeType":"181","messageId":"182","endLine":70,"endColumn":24},{"ruleId":"179","severity":1,"message":"189","line":157,"column":12,"nodeType":"181","messageId":"182","endLine":157,"endColumn":19},{"ruleId":"179","severity":1,"message":"190","line":158,"column":12,"nodeType":"181","messageId":"182","endLine":158,"endColumn":19},{"ruleId":"191","severity":1,"message":"192","line":86,"column":34,"nodeType":"193","messageId":"194","endLine":86,"endColumn":36},{"ruleId":"191","severity":1,"message":"192","line":101,"column":42,"nodeType":"193","messageId":"194","endLine":101,"endColumn":44},{"ruleId":"191","severity":1,"message":"192","line":211,"column":30,"nodeType":"193","messageId":"194","endLine":211,"endColumn":32},{"ruleId":"191","severity":1,"message":"192","line":232,"column":30,"nodeType":"193","messageId":"194","endLine":232,"endColumn":32},{"ruleId":"191","severity":1,"message":"192","line":252,"column":26,"nodeType":"193","messageId":"194","endLine":252,"endColumn":28},{"ruleId":"191","severity":1,"message":"192","line":273,"column":28,"nodeType":"193","messageId":"194","endLine":273,"endColumn":30},{"ruleId":"191","severity":1,"message":"192","line":286,"column":40,"nodeType":"193","messageId":"194","endLine":286,"endColumn":42},{"ruleId":"191","severity":1,"message":"192","line":369,"column":39,"nodeType":"193","messageId":"194","endLine":369,"endColumn":41},{"ruleId":"191","severity":1,"message":"192","line":380,"column":32,"nodeType":"193","messageId":"194","endLine":380,"endColumn":34},{"ruleId":"191","severity":1,"message":"192","line":392,"column":45,"nodeType":"193","messageId":"194","endLine":392,"endColumn":47},{"ruleId":"191","severity":1,"message":"192","line":410,"column":38,"nodeType":"193","messageId":"194","endLine":410,"endColumn":40},{"ruleId":"191","severity":1,"message":"192","line":449,"column":32,"nodeType":"193","messageId":"194","endLine":449,"endColumn":34},{"ruleId":"179","severity":1,"message":"195","line":578,"column":39,"nodeType":"181","messageId":"182","endLine":578,"endColumn":49},{"ruleId":"179","severity":1,"message":"196","line":579,"column":65,"nodeType":"181","messageId":"182","endLine":579,"endColumn":72},{"ruleId":"197","severity":1,"message":"198","line":605,"column":175,"nodeType":"199","messageId":"200","endLine":605,"endColumn":176},{"ruleId":"191","severity":1,"message":"192","line":86,"column":34,"nodeType":"193","messageId":"194","endLine":86,"endColumn":36},{"ruleId":"191","severity":1,"message":"192","line":101,"column":42,"nodeType":"193","messageId":"194","endLine":101,"endColumn":44},{"ruleId":"191","severity":1,"message":"192","line":211,"column":30,"nodeType":"193","messageId":"194","endLine":211,"endColumn":32},{"ruleId":"191","severity":1,"message":"192","line":232,"column":30,"nodeType":"193","messageId":"194","endLine":232,"endColumn":32},{"ruleId":"191","severity":1,"message":"192","line":252,"column":26,"nodeType":"193","messageId":"194","endLine":252,"endColumn":28},{"ruleId":"191","severity":1,"message":"192","line":273,"column":28,"nodeType":"193","messageId":"194","endLine":273,"endColumn":30},{"ruleId":"191","severity":1,"message":"192","line":286,"column":40,"nodeType":"193","messageId":"194","endLine":286,"endColumn":42},{"ruleId":"191","severity":1,"message":"192","line":369,"column":39,"nodeType":"193","messageId":"194","endLine":369,"endColumn":41},{"ruleId":"191","severity":1,"message":"192","line":380,"column":32,"nodeType":"193","messageId":"194","endLine":380,"endColumn":34},{"ruleId":"191","severity":1,"message":"192","line":392,"column":45,"nodeType":"193","messageId":"194","endLine":392,"endColumn":47},{"ruleId":"191","severity":1,"message":"192","line":410,"column":38,"nodeType":"193","messageId":"194","endLine":410,"endColumn":40},{"ruleId":"191","severity":1,"message":"192","line":449,"column":32,"nodeType":"193","messageId":"194","endLine":449,"endColumn":34},{"ruleId":"179","severity":1,"message":"195","line":578,"column":39,"nodeType":"181","messageId":"182","endLine":578,"endColumn":49},{"ruleId":"179","severity":1,"message":"196","line":579,"column":65,"nodeType":"181","messageId":"182","endLine":579,"endColumn":72},{"ruleId":"197","severity":1,"message":"198","line":605,"column":175,"nodeType":"199","messageId":"200","endLine":605,"endColumn":176},{"ruleId":"201","severity":2,"message":"202","line":858,"column":132,"nodeType":"181","messageId":"203","endLine":858,"endColumn":147},{"ruleId":"201","severity":2,"message":"204","line":858,"column":150,"nodeType":"181","messageId":"203","endLine":858,"endColumn":159},{"ruleId":"205","severity":1,"message":"206","line":131,"column":5,"nodeType":"207","endLine":131,"endColumn":28},{"ruleId":"205","severity":1,"message":"206","line":132,"column":5,"nodeType":"207","endLine":132,"endColumn":28},{"ruleId":"179","severity":1,"message":"208","line":191,"column":13,"nodeType":"181","messageId":"182","endLine":191,"endColumn":21},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'_delete' is defined but never used.","'requestOptions' is assigned a value but never used.","'handleResponse' is defined but never used.","'headers' is assigned a value but never used.","'createLogger' is defined but never used.","'updateRegEvent' is defined but never used.","'success' is defined but never used.","'failure' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'citycen_id' is assigned a value but never used.","'country' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-undef","'iconshirtactive' is not defined.","undef","'iconshirt' is not defined.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'regEvent' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]